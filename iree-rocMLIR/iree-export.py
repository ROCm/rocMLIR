#!/usr/bin/env python3

"""`iree-export`:
Description:
The `iree-export` tool takes an input file containing MLIR code, invokes the
`iree-compile` program and on success returns a JSON file containing:
 - The ROCm binaries generated by IREE
 - Launch parameters for each of the IREE kernels.

The following environment variables are also available:
 - `IREE_BIN`[required]: Path to the folder containing `iree-compile`.
 - `IREE_DEBUG`[optional]: Debug level, 0 means debug, 1 means basic debugging,
    and 2 means print all debug messages.
 - `IREE_CONFIG`[optional]: YAML file with a list of extra flags to pass to `iree-compile` 


usage: iree-export [-h] [--iree-path <iree path>] -o <output> [-a <arch>] [-f <features>] [-v] <input>

positional arguments:
  <input>               MLIR file

optional arguments:
  -h, --help            show this help message and exit
  --iree-path <iree path>
                        IREE tools path
  -o <output>           output file
  -a <arch>, --arch <arch>
                        gpu arch
  -f <features>, --features <features>
                        gpu features
"""

import argparse
import json
import os
import yaml

import subprocess
from pathlib import Path
from tempfile import TemporaryDirectory

verbose = 0


class IREEException(Exception): ...


def getIreeBinPath():
    """Get the IREE_BIN path environment variable."""
    if "IREE_BIN" in os.environ:
        return os.environ["IREE_BIN"]
    return ""


def getIreeDebugFlag():
    """Get the IREE_DEBUG environment variable."""
    if "IREE_DEBUG" in os.environ:
        flag = os.environ["IREE_DEBUG"]
        if flag.isdigit():
            return int(flag)
    return 0


def getConfigFile():
    """Get the IREE_CONFIG environment variable."""
    if "IREE_CONFIG" in os.environ:
        return os.environ["IREE_CONFIG"]
    return ""


def parseArgs():
    """Parse the `iree-export` tool arguments"""
    parser = argparse.ArgumentParser(
        "iree-export",
        description="""
The `iree-export` tool takes an input file containing MLIR code, invokes the
`iree-compile` program and on success returns a JSON file containing:
 - The ROCm binaries generated by IREE
 - Launch parameters for each of the IREE kernels.
""",
    )
    parser.add_argument(
        "--iree-path",
        dest="iree_path",
        metavar="<iree path>",
        default=getIreeBinPath(),
        type=str,
        help="IREE tools path",
    )
    parser.add_argument("input", metavar="<input>", type=str, help="MLIR file")
    parser.add_argument(
        "-o",
        dest="output",
        metavar="<output>",
        required=True,
        type=str,
        help="output file",
    )
    parser.add_argument(
        "-a",
        "--arch",
        dest="arch",
        metavar="<arch>",
        type=str,
        help="gpu arch",
    )
    parser.add_argument(
        "-f",
        "--features",
        dest="features",
        metavar="<features>",
        default="+sramecc,-xnack",
        type=str,
        help="gpu features",
    )
    args = parser.parse_args()
    return args


def invoke(args: list):
    """Invoke a program with the given arguments"""
    status = subprocess.run(args, capture_output=True)
    if status.returncode != 0:
        if verbose > 1:
            print(
                "Command: `{}`\nstdout:\n{}\nstderr:\n{}".format(
                    " ".join(args),
                    status.stdout.decode("utf-8"),
                    status.stderr.decode("utf-8"),
                )
            )
        raise RuntimeError("invocation failed")


def loadIreeConfig(filePath: Path) -> list:
    """Try to load a configuration file with options"""
    if not filePath.exists():
        return []
    with open(filePath, "r") as file:
        data = yaml.safe_load(file)
        if isinstance(data, list):
            return data
    return []


def ireeCC(inputFile: str, arch: str, features: str):
    """Invoke `iree-compile` and collect the binaries"""
    # Check the input file exists.
    if not Path(inputFile).exists():
        raise IREEException("invalid input file: {}".format(inputFile))
    # Check the architecture is non-empty.
    if len(arch) == 0:
        raise IREEException("invalid gpu arch")
    # Create a temporary directory to stor intermediate files.
    with TemporaryDirectory() as tmpDir:
        dir = Path(tmpDir)
        ireeFile = dir.joinpath("iree.mlir")
        # Setup `iree-compile` arguments
        arguments = [
            "iree-compile",
            "--iree-hal-target-backends=rocm",
            "--iree-rocm-target-chip={0}".format(arch),
            "--iree-hal-dump-executable-binaries-to={0}".format(dir),
            "--iree-rocm-target-features={0}".format(features),
            "--compile-to=hal",
            "-o",
            "{0}".format(ireeFile),
            inputFile,
        ]
        configFile = getConfigFile()
        if len(configFile) > 0:
            arguments.extend(loadIreeConfig(Path(configFile)))
        # Invoke `iree-compile`.
        invoke(arguments)
        # Check the expected output file was produced.
        if not ireeFile.exists():
            raise IREEException("`iree-compile` invocation failed")
        # Parse the output generated by `iree-compile`.
        attrs = {}
        with open(ireeFile, "r") as file:
            attrs["MLIR"] = file.readlines()
        bins = []
        for bin in dir.glob("*.json"):
            with open(bin, "r") as file:
                bins.append(json.load(file))
        attrs["binaries"] = bins

    return attrs


def getKernelName(inputFile):
    """Get the kernel name"""
    kernel = ""
    try:
        with open(inputFile, "r") as file:
            mlir = file.read()
            start = mlir.find("func.func")
            if start >= 0:
                end = mlir.find("(", start)
                if end >= 0:
                    kernel = mlir[start:end]
                    kernel = kernel[kernel.find("@") + 1 :]
    except Exception as exc:
        pass
    return kernel


def main():
    global verbose
    # Parse the command line arguments.
    args = parseArgs()
    verbose = getIreeDebugFlag()
    # Add `IREE_BIN` to `PATH`.
    if Path(args.iree_path).exists():
        os.environ["PATH"] += os.pathsep + args.iree_path
    attrs = {}
    kernel = getKernelName(args.input)
    # Run the IREE compiler.
    try:
        attrs = ireeCC(args.input, args.arch, args.features)
    except Exception as exc:
        if verbose > 0:
            print(str(exc))
        attrs["error"] = str(exc)
    # Print diagnostics.
    if verbose > 0:
        if "binaries" in attrs:
            ireeData = []
            # bin should be a dict
            for bin in attrs["binaries"]:
                for k, v in bin.items():
                    if k[0] == "$":
                        continue
                    ireeData.append(v)
            print(
                "[iree-export]: number of kernels: {}, rocMLIR name: {}, iree-metadata".format(
                    len(attrs["binaries"]), kernel
                ),
                json.dumps(ireeData),
            )
        else:
            print(
                "[iree-export]: number of kernels: 0, rocMLIR name: {}".format(kernel)
            )
    # Output the results to a JSON.
    with open(args.output, "w") as outputFile:
        print(json.dumps(attrs, indent=2), file=outputFile)


if __name__ == "__main__":
    main()
