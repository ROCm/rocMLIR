; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes='instcombine' -S --experimental-debuginfo-iterators=true  < %s | FileCheck %s
; RUN: opt -passes='instcombine' -S --experimental-debuginfo-iterators=false < %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i32 @foo() !dbg !5 {
; CHECK-LABEL: define i32 @foo(
; CHECK-SAME: ) !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VAR:%.*]] = alloca i32, align 4
; CHECK-NEXT:      #dbg_value(i32 42, [[META11:![0-9]+]], !DIExpression(DIOpArg(0, i32)), [[META12:![0-9]+]])
; CHECK-NEXT:    store i32 42, ptr [[VAR]], align 4
; CHECK-NEXT:      #dbg_value(ptr [[VAR]], [[META11]], !DIExpression(DIOpArg(0, ptr), DIOpDeref(i32)), [[META12]])
; CHECK-NEXT:    call void @escape(ptr nonnull [[VAR]])
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[VAR]], align 4
; CHECK-NEXT:      #dbg_value(i32 [[TMP0]], [[META11]], !DIExpression(DIOpArg(0, i32)), [[META12]])
; CHECK-NEXT:    ret i32 [[TMP0]]
;
entry:
  %var = alloca i32, align 4
  tail call void @llvm.dbg.declare(metadata ptr %var, metadata !11, metadata !DIExpression(DIOpArg(0, ptr), DIOpDeref(i32))), !dbg !12
  store i32 42, ptr %var, align 4
  call void @escape(ptr %var)
  %0 = load i32, ptr %var, align 4
  ret i32 %0
}

declare void @llvm.dbg.declare(metadata, metadata, metadata)

declare void @escape(ptr)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang 19.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "t.c", directory: "/")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang 19.0.0"}
!5 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 4, type: !7, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !10)
!6 = !DIFile(filename: "t.cpp", directory: "/")
!7 = !DISubroutineType(types: !8)
!8 = !{!9}
!9 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!10 = !{!11}
!11 = !DILocalVariable(name: "var", scope: !5, file: !6, line: 5, type: !9)
!12 = !DILocation(line: 1, column: 1, scope: !5)
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C11, file: [[META1:![0-9]+]], producer: "clang 19.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
; CHECK: [[META1]] = !DIFile(filename: "t.c", directory: {{.*}})
; CHECK: [[DBG5]] = distinct !DISubprogram(name: "main", scope: [[META6:![0-9]+]], file: [[META6]], line: 4, type: [[META7:![0-9]+]], scopeLine: 4, spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META10:![0-9]+]])
; CHECK: [[META6]] = !DIFile(filename: "t.cpp", directory: {{.*}})
; CHECK: [[META7]] = !DISubroutineType(types: [[META8:![0-9]+]])
; CHECK: [[META8]] = !{[[META9:![0-9]+]]}
; CHECK: [[META9]] = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
; CHECK: [[META10]] = !{[[META11]]}
; CHECK: [[META11]] = !DILocalVariable(name: "var", scope: [[DBG5]], file: [[META6]], line: 5, type: [[META9]])
; CHECK: [[META12]] = !DILocation(line: 0, scope: [[DBG5]])
;.
