; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple amdgcn-amd-amdhsa -mcpu=gfx1030 -O1 -filetype=asm < %s -o - | FileCheck --check-prefixes=CHECK-ORIG-OPS %s
; RUN: llc -mtriple amdgcn-amd-amdhsa -mcpu=gfx1030 -O1 -filetype=asm -emit-heterogeneous-dwarf-as-user-ops < %s -o - | FileCheck --check-prefixes=CHECK-USER-OPS %s

define amdgpu_kernel void @foo(ptr addrspace(1) noalias %arg_in_0, ptr addrspace(1) %arg_out) !dbg !4 {
; CHECK-ORIG-OPS-LABEL: foo:
; CHECK-ORIG-OPS:       .Lfunc_begin0:
; CHECK-ORIG-OPS-NEXT:    .file 1 "/" "gdb_simple.f95"
; CHECK-ORIG-OPS-NEXT:    .loc 1 0 0 ; gdb_simple.f95:0:0
; CHECK-ORIG-OPS-NEXT:    .cfi_sections .debug_frame
; CHECK-ORIG-OPS-NEXT:    .cfi_startproc
; CHECK-ORIG-OPS-NEXT:  ; %bb.0:
; CHECK-ORIG-OPS-NEXT:    .cfi_escape 0x0f, 0x04, 0x30, 0x36, 0xe9, 0x02 ;
; CHECK-ORIG-OPS-NEXT:    .cfi_undefined 16
; CHECK-ORIG-OPS-NEXT:    s_load_dwordx4 s[0:3], s[6:7], 0x0
; CHECK-ORIG-OPS-NEXT:    v_mov_b32_e32 v2, 0
; CHECK-ORIG-OPS-NEXT:    v_mov_b32_e32 v0, 0
; CHECK-ORIG-OPS-NEXT:    v_mov_b32_e32 v1, 0
; CHECK-ORIG-OPS-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-ORIG-OPS-NEXT:  .Ltmp0:
; CHECK-ORIG-OPS-NEXT:    s_clause 0x1
; CHECK-ORIG-OPS-NEXT:    s_load_dword s4, s[0:1], 0x0
; CHECK-ORIG-OPS-NEXT:    ;DEBUG_VALUE: foo:i <- 2
; CHECK-ORIG-OPS-NEXT:    s_load_dword s0, s[0:1], 0x8
; CHECK-ORIG-OPS-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-ORIG-OPS-NEXT:    v_mov_b32_e32 v3, s4
; CHECK-ORIG-OPS-NEXT:    v_mov_b32_e32 v4, s0
; CHECK-ORIG-OPS-NEXT:    global_store_dword v2, v3, s[2:3]
; CHECK-ORIG-OPS-NEXT:    global_store_dword v[0:1], v4, off
; CHECK-ORIG-OPS-NEXT:    s_endpgm
; CHECK-ORIG-OPS-NEXT:  .Ltmp1:
;
; CHECK-USER-OPS-LABEL: foo:
; CHECK-USER-OPS:       .Lfunc_begin0:
; CHECK-USER-OPS-NEXT:    .file 1 "/" "gdb_simple.f95"
; CHECK-USER-OPS-NEXT:    .loc 1 0 0 ; gdb_simple.f95:0:0
; CHECK-USER-OPS-NEXT:    .cfi_sections .debug_frame
; CHECK-USER-OPS-NEXT:    .cfi_startproc
; CHECK-USER-OPS-NEXT:  ; %bb.0:
; CHECK-USER-OPS-NEXT:    .cfi_escape 0x0f, 0x04, 0x30, 0x36, 0xe9, 0x02 ;
; CHECK-USER-OPS-NEXT:    .cfi_undefined 16
; CHECK-USER-OPS-NEXT:    s_load_dwordx4 s[0:3], s[6:7], 0x0
; CHECK-USER-OPS-NEXT:    v_mov_b32_e32 v2, 0
; CHECK-USER-OPS-NEXT:    v_mov_b32_e32 v0, 0
; CHECK-USER-OPS-NEXT:    v_mov_b32_e32 v1, 0
; CHECK-USER-OPS-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-USER-OPS-NEXT:  .Ltmp0:
; CHECK-USER-OPS-NEXT:    s_clause 0x1
; CHECK-USER-OPS-NEXT:    s_load_dword s4, s[0:1], 0x0
; CHECK-USER-OPS-NEXT:    ;DEBUG_VALUE: foo:i <- 2
; CHECK-USER-OPS-NEXT:    s_load_dword s0, s[0:1], 0x8
; CHECK-USER-OPS-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-USER-OPS-NEXT:    v_mov_b32_e32 v3, s4
; CHECK-USER-OPS-NEXT:    v_mov_b32_e32 v4, s0
; CHECK-USER-OPS-NEXT:    global_store_dword v2, v3, s[2:3]
; CHECK-USER-OPS-NEXT:    global_store_dword v[0:1], v4, off
; CHECK-USER-OPS-NEXT:    s_endpgm
; CHECK-USER-OPS-NEXT:  .Ltmp1:
  %arg_in_1 = getelementptr i8, ptr addrspace(1) %arg_in_0, i64 8
  %load0 = load float, ptr addrspace(1) %arg_in_0
  store float %load0, ptr addrspace(1) %arg_out
  call void @llvm.dbg.value(metadata i32 2, metadata !7, metadata !DIExpression()), !dbg !9
  %load1 = load float, ptr addrspace(1) %arg_in_1
  store float %load1, ptr addrspace(1) null
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}

!0 = distinct !DICompileUnit(language: DW_LANG_Fortran90, file: !1, producer: " F90 Flang - 1.5 2017-05-01", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !2, globals: !2, imports: !2, nameTableKind: None)
!1 = !DIFile(filename: "gdb_simple.f95", directory: "/")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "foo", scope: !0, file: !1, line: 12, type: !5, spFlags: DISPFlagDefinition, unit: !0)
!5 = !DISubroutineType(types: !6)
!6 = !{null}
!7 = !DILocalVariable(name: "i", scope: !4, file: !1, type: !8)
!8 = !DIBasicType(name: "integer", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DILocation(line: 0, scope: !4)
