; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -mattr=-f16c -fixup-byte-word-insts=1 \
; RUN:   | FileCheck %s -check-prefixes=CHECK,CHECK-LIBCALL,BWON
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -mattr=-f16c  -fixup-byte-word-insts=0 \
; RUN:   | FileCheck %s -check-prefixes=CHECK,CHECK-LIBCALL,BWOFF
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -mattr=+f16c -fixup-byte-word-insts=1 \
; RUN:    | FileCheck %s -check-prefixes=CHECK,BWON,BWON-F16C
; RUN: llc < %s -mtriple=i686-unknown-linux-gnu -mattr +sse2 -fixup-byte-word-insts=0  \
; RUN:    | FileCheck %s -check-prefixes=CHECK-I686

define void @test_load_store(ptr %in, ptr %out) #0 {
; BWON-LABEL: test_load_store:
; BWON:       # %bb.0:
; BWON-NEXT:    movzwl (%rdi), %eax
; BWON-NEXT:    movw %ax, (%rsi)
; BWON-NEXT:    retq
;
; BWOFF-LABEL: test_load_store:
; BWOFF:       # %bb.0:
; BWOFF-NEXT:    movw (%rdi), %ax
; BWOFF-NEXT:    movw %ax, (%rsi)
; BWOFF-NEXT:    retq
;
; CHECK-I686-LABEL: test_load_store:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    movw (%ecx), %cx
; CHECK-I686-NEXT:    movw %cx, (%eax)
; CHECK-I686-NEXT:    retl
  %val = load half, ptr %in
  store half %val, ptr %out
  ret void
}

define i16 @test_bitcast_from_half(ptr %addr) #0 {
; BWON-LABEL: test_bitcast_from_half:
; BWON:       # %bb.0:
; BWON-NEXT:    movzwl (%rdi), %eax
; BWON-NEXT:    retq
;
; BWOFF-LABEL: test_bitcast_from_half:
; BWOFF:       # %bb.0:
; BWOFF-NEXT:    movw (%rdi), %ax
; BWOFF-NEXT:    retq
;
; CHECK-I686-LABEL: test_bitcast_from_half:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movw (%eax), %ax
; CHECK-I686-NEXT:    retl
  %val = load half, ptr %addr
  %val_int = bitcast half %val to i16
  ret i16 %val_int
}

define void @test_bitcast_to_half(ptr %addr, i16 %in) #0 {
; CHECK-LABEL: test_bitcast_to_half:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movw %si, (%rdi)
; CHECK-NEXT:    retq
;
; CHECK-I686-LABEL: test_bitcast_to_half:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    movw {{[0-9]+}}(%esp), %ax
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    movw %ax, (%ecx)
; CHECK-I686-NEXT:    retl
  %val_fp = bitcast i16 %in to half
  store half %val_fp, ptr %addr
  ret void
}

define float @test_extend32(ptr %addr) #0 {
; CHECK-LIBCALL-LABEL: test_extend32:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    movzwl (%rdi), %edi
; CHECK-LIBCALL-NEXT:    jmp __gnu_h2f_ieee@PLT # TAILCALL
;
; BWON-F16C-LABEL: test_extend32:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movzwl (%rdi), %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_extend32:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    subl $12, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movzwl (%eax), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    addl $12, %esp
; CHECK-I686-NEXT:    retl
  %val16 = load half, ptr %addr
  %val32 = fpext half %val16 to float
  ret float %val32
}

define double @test_extend64(ptr %addr) #0 {
; CHECK-LIBCALL-LABEL: test_extend64:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    movzwl (%rdi), %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cvtss2sd %xmm0, %xmm0
; CHECK-LIBCALL-NEXT:    popq %rax
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_extend64:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movzwl (%rdi), %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtss2sd %xmm0, %xmm0, %xmm0
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_extend64:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    subl $12, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movzwl (%eax), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    addl $12, %esp
; CHECK-I686-NEXT:    retl
  %val16 = load half, ptr %addr
  %val32 = fpext half %val16 to double
  ret double %val32
}

define void @test_trunc32(float %in, ptr %addr) #0 {
; CHECK-LIBCALL-LABEL: test_trunc32:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rbx
; CHECK-LIBCALL-NEXT:    movq %rdi, %rbx
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    movw %ax, (%rbx)
; CHECK-LIBCALL-NEXT:    popq %rbx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_trunc32:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vpextrw $0, %xmm0, (%rdi)
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_trunc32:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $8, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, (%esi)
; CHECK-I686-NEXT:    addl $8, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    retl
  %val16 = fptrunc float %in to half
  store half %val16, ptr %addr
  ret void
}

define void @test_trunc64(double %in, ptr %addr) #0 {
; CHECK-LABEL: test_trunc64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rbx
; CHECK-NEXT:    movq %rdi, %rbx
; CHECK-NEXT:    callq __truncdfhf2@PLT
; CHECK-NEXT:    movw %ax, (%rbx)
; CHECK-NEXT:    popq %rbx
; CHECK-NEXT:    retq
;
; CHECK-I686-LABEL: test_trunc64:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $8, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-I686-NEXT:    movsd %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __truncdfhf2
; CHECK-I686-NEXT:    movw %ax, (%esi)
; CHECK-I686-NEXT:    addl $8, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    retl
  %val16 = fptrunc double %in to half
  store half %val16, ptr %addr
  ret void
}

define i64 @test_fptosi_i64(ptr %p) #0 {
; CHECK-LIBCALL-LABEL: test_fptosi_i64:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    movzwl (%rdi), %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cvttss2si %xmm0, %rax
; CHECK-LIBCALL-NEXT:    popq %rcx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_fptosi_i64:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movzwl (%rdi), %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvttss2si %xmm0, %rax
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_fptosi_i64:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    subl $28, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movzwl (%eax), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fnstcw {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    orl $3072, %eax # imm = 0xC00
; CHECK-I686-NEXT:    movw %ax, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldcw {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fistpll {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldcw {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %edx
; CHECK-I686-NEXT:    addl $28, %esp
; CHECK-I686-NEXT:    retl
  %a = load half, ptr %p, align 2
  %r = fptosi half %a to i64
  ret i64 %r
}

define void @test_sitofp_i64(i64 %a, ptr %p) #0 {
; CHECK-LIBCALL-LABEL: test_sitofp_i64:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rbx
; CHECK-LIBCALL-NEXT:    movq %rsi, %rbx
; CHECK-LIBCALL-NEXT:    cvtsi2ss %rdi, %xmm0
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    movw %ax, (%rbx)
; CHECK-LIBCALL-NEXT:    popq %rbx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_sitofp_i64:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    vcvtsi2ss %rdi, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vpextrw $0, %xmm0, (%rsi)
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_sitofp_i64:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $24, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-I686-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fildll {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, (%esi)
; CHECK-I686-NEXT:    addl $24, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    retl
  %r = sitofp i64 %a to half
  store half %r, ptr %p
  ret void
}

define i64 @test_fptoui_i64(ptr %p) #0 {
; CHECK-LIBCALL-LABEL: test_fptoui_i64:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    movzwl (%rdi), %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cvttss2si %xmm0, %rcx
; CHECK-LIBCALL-NEXT:    movq %rcx, %rdx
; CHECK-LIBCALL-NEXT:    sarq $63, %rdx
; CHECK-LIBCALL-NEXT:    subss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-LIBCALL-NEXT:    cvttss2si %xmm0, %rax
; CHECK-LIBCALL-NEXT:    andq %rdx, %rax
; CHECK-LIBCALL-NEXT:    orq %rcx, %rax
; CHECK-LIBCALL-NEXT:    popq %rcx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_fptoui_i64:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movzwl (%rdi), %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvttss2si %xmm0, %rcx
; BWON-F16C-NEXT:    movq %rcx, %rdx
; BWON-F16C-NEXT:    sarq $63, %rdx
; BWON-F16C-NEXT:    vsubss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvttss2si %xmm0, %rax
; BWON-F16C-NEXT:    andq %rdx, %rax
; BWON-F16C-NEXT:    orq %rcx, %rax
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_fptoui_i64:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    subl $28, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movzwl (%eax), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    ucomiss %xmm1, %xmm0
; CHECK-I686-NEXT:    jae .LBB9_2
; CHECK-I686-NEXT:  # %bb.1:
; CHECK-I686-NEXT:    xorps %xmm1, %xmm1
; CHECK-I686-NEXT:  .LBB9_2:
; CHECK-I686-NEXT:    subss %xmm1, %xmm0
; CHECK-I686-NEXT:    movss %xmm0, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    setae %al
; CHECK-I686-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fnstcw {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    orl $3072, %ecx # imm = 0xC00
; CHECK-I686-NEXT:    movw %cx, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldcw {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fistpll {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldcw {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movzbl %al, %edx
; CHECK-I686-NEXT:    shll $31, %edx
; CHECK-I686-NEXT:    xorl {{[0-9]+}}(%esp), %edx
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    addl $28, %esp
; CHECK-I686-NEXT:    retl
  %a = load half, ptr %p, align 2
  %r = fptoui half %a to i64
  ret i64 %r
}

define void @test_uitofp_i64(i64 %a, ptr %p) #0 {
; CHECK-LIBCALL-LABEL: test_uitofp_i64:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rbx
; CHECK-LIBCALL-NEXT:    movq %rsi, %rbx
; CHECK-LIBCALL-NEXT:    testq %rdi, %rdi
; CHECK-LIBCALL-NEXT:    js .LBB10_1
; CHECK-LIBCALL-NEXT:  # %bb.2:
; CHECK-LIBCALL-NEXT:    cvtsi2ss %rdi, %xmm0
; CHECK-LIBCALL-NEXT:    jmp .LBB10_3
; CHECK-LIBCALL-NEXT:  .LBB10_1:
; CHECK-LIBCALL-NEXT:    movq %rdi, %rax
; CHECK-LIBCALL-NEXT:    shrq %rax
; CHECK-LIBCALL-NEXT:    andl $1, %edi
; CHECK-LIBCALL-NEXT:    orq %rax, %rdi
; CHECK-LIBCALL-NEXT:    cvtsi2ss %rdi, %xmm0
; CHECK-LIBCALL-NEXT:    addss %xmm0, %xmm0
; CHECK-LIBCALL-NEXT:  .LBB10_3:
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    movw %ax, (%rbx)
; CHECK-LIBCALL-NEXT:    popq %rbx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_uitofp_i64:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    testq %rdi, %rdi
; BWON-F16C-NEXT:    js .LBB10_1
; BWON-F16C-NEXT:  # %bb.2:
; BWON-F16C-NEXT:    vcvtsi2ss %rdi, %xmm0, %xmm0
; BWON-F16C-NEXT:    jmp .LBB10_3
; BWON-F16C-NEXT:  .LBB10_1:
; BWON-F16C-NEXT:    movq %rdi, %rax
; BWON-F16C-NEXT:    shrq %rax
; BWON-F16C-NEXT:    andl $1, %edi
; BWON-F16C-NEXT:    orq %rax, %rdi
; BWON-F16C-NEXT:    vcvtsi2ss %rdi, %xmm0, %xmm0
; BWON-F16C-NEXT:    vaddss %xmm0, %xmm0, %xmm0
; BWON-F16C-NEXT:  .LBB10_3:
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vpextrw $0, %xmm0, (%rsi)
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_uitofp_i64:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $24, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-I686-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    shrl $31, %eax
; CHECK-I686-NEXT:    fildll {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fadds {{\.?LCPI[0-9]+_[0-9]+}}(,%eax,4)
; CHECK-I686-NEXT:    fstps (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, (%esi)
; CHECK-I686-NEXT:    addl $24, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    retl
  %r = uitofp i64 %a to half
  store half %r, ptr %p
  ret void
}

define <4 x float> @test_extend32_vec4(ptr %p) #0 {
; CHECK-LIBCALL-LABEL: test_extend32_vec4:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    subq $88, %rsp
; CHECK-LIBCALL-NEXT:    movl (%rdi), %eax
; CHECK-LIBCALL-NEXT:    movl 4(%rdi), %ecx
; CHECK-LIBCALL-NEXT:    movl %eax, (%rsp)
; CHECK-LIBCALL-NEXT:    movl %ecx, {{[0-9]+}}(%rsp)
; CHECK-LIBCALL-NEXT:    movaps (%rsp), %xmm0
; CHECK-LIBCALL-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movdqa {{[0-9]+}}(%rsp), %xmm0
; CHECK-LIBCALL-NEXT:    movdqa %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    pextrw $1, %xmm0, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    movdqa %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movdqa {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-LIBCALL-NEXT:    pextrw $0, %xmm0, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    punpckldq {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Folded Reload
; CHECK-LIBCALL-NEXT:    # xmm0 = xmm0[0],mem[0],xmm0[1],mem[1]
; CHECK-LIBCALL-NEXT:    movdqa %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movdqa {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-LIBCALL-NEXT:    pextrw $1, %xmm0, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    movdqa %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movdqa {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-LIBCALL-NEXT:    pextrw $0, %xmm0, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    punpckldq {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Folded Reload
; CHECK-LIBCALL-NEXT:    # xmm0 = xmm0[0],mem[0],xmm0[1],mem[1]
; CHECK-LIBCALL-NEXT:    punpcklqdq {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Folded Reload
; CHECK-LIBCALL-NEXT:    # xmm0 = xmm0[0],mem[0]
; CHECK-LIBCALL-NEXT:    addq $88, %rsp
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_extend32_vec4:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    vcvtph2ps (%rdi), %xmm0
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_extend32_vec4:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    subl $124, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl (%eax), %ecx
; CHECK-I686-NEXT:    movl 4(%eax), %eax
; CHECK-I686-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movl %ecx, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movaps {{[0-9]+}}(%esp), %xmm0
; CHECK-I686-NEXT:    movaps %xmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    movdqa {{[0-9]+}}(%esp), %xmm0
; CHECK-I686-NEXT:    movdqa %xmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    pextrw $1, %xmm0, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movdqa {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    pextrw $0, %xmm0, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movdqa {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    pextrw $1, %xmm0, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movdqa {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    pextrw $0, %xmm0, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    unpcklps {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; CHECK-I686-NEXT:    movss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    unpcklps {{.*#+}} xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
; CHECK-I686-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; CHECK-I686-NEXT:    addl $124, %esp
; CHECK-I686-NEXT:    retl
  %a = load <4 x half>, ptr %p, align 8
  %b = fpext <4 x half> %a to <4 x float>
  ret <4 x float> %b
}

define <4 x double> @test_extend64_vec4(ptr %p) #0 {
; CHECK-LIBCALL-LABEL: test_extend64_vec4:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rbp
; CHECK-LIBCALL-NEXT:    pushq %r14
; CHECK-LIBCALL-NEXT:    pushq %rbx
; CHECK-LIBCALL-NEXT:    subq $32, %rsp
; CHECK-LIBCALL-NEXT:    movzwl 4(%rdi), %ebx
; CHECK-LIBCALL-NEXT:    movzwl 6(%rdi), %ebp
; CHECK-LIBCALL-NEXT:    movzwl (%rdi), %r14d
; CHECK-LIBCALL-NEXT:    movzwl 2(%rdi), %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cvtss2sd %xmm0, %xmm0
; CHECK-LIBCALL-NEXT:    movaps %xmm0, (%rsp) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movl %r14d, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cvtss2sd %xmm0, %xmm0
; CHECK-LIBCALL-NEXT:    unpcklpd (%rsp), %xmm0 # 16-byte Folded Reload
; CHECK-LIBCALL-NEXT:    # xmm0 = xmm0[0],mem[0]
; CHECK-LIBCALL-NEXT:    movaps %xmm0, (%rsp) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movl %ebp, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cvtss2sd %xmm0, %xmm0
; CHECK-LIBCALL-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movl %ebx, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cvtss2sd %xmm0, %xmm1
; CHECK-LIBCALL-NEXT:    unpcklpd {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Folded Reload
; CHECK-LIBCALL-NEXT:    # xmm1 = xmm1[0],mem[0]
; CHECK-LIBCALL-NEXT:    movaps (%rsp), %xmm0 # 16-byte Reload
; CHECK-LIBCALL-NEXT:    addq $32, %rsp
; CHECK-LIBCALL-NEXT:    popq %rbx
; CHECK-LIBCALL-NEXT:    popq %r14
; CHECK-LIBCALL-NEXT:    popq %rbp
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_extend64_vec4:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    vcvtph2ps (%rdi), %xmm0
; BWON-F16C-NEXT:    vcvtps2pd %xmm0, %ymm0
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_extend64_vec4:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %ebx
; CHECK-I686-NEXT:    pushl %edi
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $64, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movzwl 6(%eax), %esi
; CHECK-I686-NEXT:    movzwl (%eax), %edi
; CHECK-I686-NEXT:    movzwl 2(%eax), %ebx
; CHECK-I686-NEXT:    movzwl 4(%eax), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl %ebx, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl %edi, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movl %esi, (%esp)
; CHECK-I686-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-I686-NEXT:    movhps {{.*#+}} xmm0 = xmm0[0,1],mem[0,1]
; CHECK-I686-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; CHECK-I686-NEXT:    movhps {{.*#+}} xmm1 = xmm1[0,1],mem[0,1]
; CHECK-I686-NEXT:    addl $64, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    popl %edi
; CHECK-I686-NEXT:    popl %ebx
; CHECK-I686-NEXT:    retl
  %a = load <4 x half>, ptr %p, align 8
  %b = fpext <4 x half> %a to <4 x double>
  ret <4 x double> %b
}

define void @test_trunc32_vec4(<4 x float> %a, ptr %p) #0 {
; BWOFF-LABEL: test_trunc32_vec4:
; BWOFF:       # %bb.0:
; BWOFF-NEXT:    pushq %rbp
; BWOFF-NEXT:    pushq %r15
; BWOFF-NEXT:    pushq %r14
; BWOFF-NEXT:    pushq %rbx
; BWOFF-NEXT:    subq $24, %rsp
; BWOFF-NEXT:    movq %rdi, %rbx
; BWOFF-NEXT:    movaps %xmm0, (%rsp) # 16-byte Spill
; BWOFF-NEXT:    shufps {{.*#+}} xmm0 = xmm0[1,1,1,1]
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %bp
; BWOFF-NEXT:    movaps (%rsp), %xmm0 # 16-byte Reload
; BWOFF-NEXT:    movhlps {{.*#+}} xmm0 = xmm0[1,1]
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %r14w
; BWOFF-NEXT:    movaps (%rsp), %xmm0 # 16-byte Reload
; BWOFF-NEXT:    shufps {{.*#+}} xmm0 = xmm0[3,3,3,3]
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %r15w
; BWOFF-NEXT:    movaps (%rsp), %xmm0 # 16-byte Reload
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, (%rbx)
; BWOFF-NEXT:    movw %r15w, 6(%rbx)
; BWOFF-NEXT:    movw %r14w, 4(%rbx)
; BWOFF-NEXT:    movw %bp, 2(%rbx)
; BWOFF-NEXT:    addq $24, %rsp
; BWOFF-NEXT:    popq %rbx
; BWOFF-NEXT:    popq %r14
; BWOFF-NEXT:    popq %r15
; BWOFF-NEXT:    popq %rbp
; BWOFF-NEXT:    retq
;
; BWON-F16C-LABEL: test_trunc32_vec4:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, (%rdi)
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_trunc32_vec4:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %ebp
; CHECK-I686-NEXT:    pushl %ebx
; CHECK-I686-NEXT:    pushl %edi
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $44, %esp
; CHECK-I686-NEXT:    movaps %xmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; CHECK-I686-NEXT:    movaps %xmm0, %xmm1
; CHECK-I686-NEXT:    shufps {{.*#+}} xmm1 = xmm1[1,1],xmm0[1,1]
; CHECK-I686-NEXT:    movss %xmm1, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %si
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movhlps {{.*#+}} xmm0 = xmm0[1,1]
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %di
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    shufps {{.*#+}} xmm0 = xmm0[3,3,3,3]
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %bx
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, (%ebp)
; CHECK-I686-NEXT:    movw %bx, 6(%ebp)
; CHECK-I686-NEXT:    movw %di, 4(%ebp)
; CHECK-I686-NEXT:    movw %si, 2(%ebp)
; CHECK-I686-NEXT:    addl $44, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    popl %edi
; CHECK-I686-NEXT:    popl %ebx
; CHECK-I686-NEXT:    popl %ebp
; CHECK-I686-NEXT:    retl
  %v = fptrunc <4 x float> %a to <4 x half>
  store <4 x half> %v, ptr %p
  ret void
}

define void @test_trunc64_vec4(<4 x double> %a, ptr %p) #0 {
; BWOFF-LABEL: test_trunc64_vec4:
; BWOFF:       # %bb.0:
; BWOFF-NEXT:    pushq %rbp
; BWOFF-NEXT:    pushq %r15
; BWOFF-NEXT:    pushq %r14
; BWOFF-NEXT:    pushq %rbx
; BWOFF-NEXT:    subq $40, %rsp
; BWOFF-NEXT:    movq %rdi, %rbx
; BWOFF-NEXT:    movaps %xmm1, (%rsp) # 16-byte Spill
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movhlps {{.*#+}} xmm0 = xmm0[1,1]
; BWOFF-NEXT:    callq __truncdfhf2@PLT
; BWOFF-NEXT:    movw %ax, %bp
; BWOFF-NEXT:    movaps (%rsp), %xmm0 # 16-byte Reload
; BWOFF-NEXT:    movhlps {{.*#+}} xmm0 = xmm0[1,1]
; BWOFF-NEXT:    callq __truncdfhf2@PLT
; BWOFF-NEXT:    movw %ax, %r14w
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; BWOFF-NEXT:    callq __truncdfhf2@PLT
; BWOFF-NEXT:    movw %ax, %r15w
; BWOFF-NEXT:    movaps (%rsp), %xmm0 # 16-byte Reload
; BWOFF-NEXT:    callq __truncdfhf2@PLT
; BWOFF-NEXT:    movw %ax, 4(%rbx)
; BWOFF-NEXT:    movw %r15w, (%rbx)
; BWOFF-NEXT:    movw %r14w, 6(%rbx)
; BWOFF-NEXT:    movw %bp, 2(%rbx)
; BWOFF-NEXT:    addq $40, %rsp
; BWOFF-NEXT:    popq %rbx
; BWOFF-NEXT:    popq %r14
; BWOFF-NEXT:    popq %r15
; BWOFF-NEXT:    popq %rbp
; BWOFF-NEXT:    retq
;
; BWON-F16C-LABEL: test_trunc64_vec4:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    pushq %rbp
; BWON-F16C-NEXT:    pushq %r15
; BWON-F16C-NEXT:    pushq %r14
; BWON-F16C-NEXT:    pushq %rbx
; BWON-F16C-NEXT:    subq $56, %rsp
; BWON-F16C-NEXT:    movq %rdi, %rbx
; BWON-F16C-NEXT:    vmovupd %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; BWON-F16C-NEXT:    vshufpd {{.*#+}} xmm0 = xmm0[1,0]
; BWON-F16C-NEXT:    vzeroupper
; BWON-F16C-NEXT:    callq __truncdfhf2@PLT
; BWON-F16C-NEXT:    movl %eax, %ebp
; BWON-F16C-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm0 # 32-byte Reload
; BWON-F16C-NEXT:    vextractf128 $1, %ymm0, %xmm0
; BWON-F16C-NEXT:    vmovapd %xmm0, (%rsp) # 16-byte Spill
; BWON-F16C-NEXT:    vshufpd {{.*#+}} xmm0 = xmm0[1,0]
; BWON-F16C-NEXT:    vzeroupper
; BWON-F16C-NEXT:    callq __truncdfhf2@PLT
; BWON-F16C-NEXT:    movl %eax, %r14d
; BWON-F16C-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm0 # 32-byte Reload
; BWON-F16C-NEXT:    # kill: def $xmm0 killed $xmm0 killed $ymm0
; BWON-F16C-NEXT:    vzeroupper
; BWON-F16C-NEXT:    callq __truncdfhf2@PLT
; BWON-F16C-NEXT:    movl %eax, %r15d
; BWON-F16C-NEXT:    vmovaps (%rsp), %xmm0 # 16-byte Reload
; BWON-F16C-NEXT:    callq __truncdfhf2@PLT
; BWON-F16C-NEXT:    movw %ax, 4(%rbx)
; BWON-F16C-NEXT:    movw %r15w, (%rbx)
; BWON-F16C-NEXT:    movw %r14w, 6(%rbx)
; BWON-F16C-NEXT:    movw %bp, 2(%rbx)
; BWON-F16C-NEXT:    addq $56, %rsp
; BWON-F16C-NEXT:    popq %rbx
; BWON-F16C-NEXT:    popq %r14
; BWON-F16C-NEXT:    popq %r15
; BWON-F16C-NEXT:    popq %rbp
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_trunc64_vec4:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %ebp
; CHECK-I686-NEXT:    pushl %ebx
; CHECK-I686-NEXT:    pushl %edi
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $60, %esp
; CHECK-I686-NEXT:    movaps %xmm1, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    movaps %xmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; CHECK-I686-NEXT:    movlps %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __truncdfhf2
; CHECK-I686-NEXT:    movw %ax, %si
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movhps %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __truncdfhf2
; CHECK-I686-NEXT:    movw %ax, %di
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movlps %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __truncdfhf2
; CHECK-I686-NEXT:    movw %ax, %bx
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movhps %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __truncdfhf2
; CHECK-I686-NEXT:    movw %ax, 6(%ebp)
; CHECK-I686-NEXT:    movw %bx, 4(%ebp)
; CHECK-I686-NEXT:    movw %di, 2(%ebp)
; CHECK-I686-NEXT:    movw %si, (%ebp)
; CHECK-I686-NEXT:    addl $60, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    popl %edi
; CHECK-I686-NEXT:    popl %ebx
; CHECK-I686-NEXT:    popl %ebp
; CHECK-I686-NEXT:    retl
  %v = fptrunc <4 x double> %a to <4 x half>
  store <4 x half> %v, ptr %p
  ret void
}

declare float @test_floatret();

; On i686, if SSE2 is available, the return value from test_floatret is loaded
; to f80 and then rounded to f32.  The DAG combiner should not combine this
; fp_round and the subsequent fptrunc from float to half.
define half @test_f80trunc_nodagcombine() #0 {
; CHECK-LIBCALL-LABEL: test_f80trunc_nodagcombine:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    callq test_floatret@PLT
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    popq %rcx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_f80trunc_nodagcombine:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    pushq %rax
; BWON-F16C-NEXT:    callq test_floatret@PLT
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vmovd %xmm0, %eax
; BWON-F16C-NEXT:    # kill: def $ax killed $ax killed $eax
; BWON-F16C-NEXT:    popq %rcx
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_f80trunc_nodagcombine:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    subl $12, %esp
; CHECK-I686-NEXT:    calll test_floatret@PLT
; CHECK-I686-NEXT:    fstps (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    addl $12, %esp
; CHECK-I686-NEXT:    retl
  %1 = call float @test_floatret()
  %2 = fptrunc float %1 to half
  ret half %2
}




define float @test_sitofp_fadd_i32(i32 %a, ptr %b) #0 {
; CHECK-LIBCALL-LABEL: test_sitofp_fadd_i32:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rbx
; CHECK-LIBCALL-NEXT:    subq $16, %rsp
; CHECK-LIBCALL-NEXT:    movzwl (%rsi), %ebx
; CHECK-LIBCALL-NEXT:    cvtsi2ss %edi, %xmm0
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    movzwl %ax, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    movss %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; CHECK-LIBCALL-NEXT:    movl %ebx, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    addss {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 4-byte Folded Reload
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    movzwl %ax, %edi
; CHECK-LIBCALL-NEXT:    addq $16, %rsp
; CHECK-LIBCALL-NEXT:    popq %rbx
; CHECK-LIBCALL-NEXT:    jmp __gnu_h2f_ieee@PLT # TAILCALL
;
; BWON-F16C-LABEL: test_sitofp_fadd_i32:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movzwl (%rsi), %eax
; BWON-F16C-NEXT:    vcvtsi2ss %edi, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vmovd %eax, %xmm1
; BWON-F16C-NEXT:    vcvtph2ps %xmm1, %xmm1
; BWON-F16C-NEXT:    vaddss %xmm0, %xmm1, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_sitofp_fadd_i32:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %edi
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $20, %esp
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movzwl (%eax), %edi
; CHECK-I686-NEXT:    cvtsi2ssl {{[0-9]+}}(%esp), %xmm0
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %si
; CHECK-I686-NEXT:    movl %edi, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movzwl %si, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    addss {{[0-9]+}}(%esp), %xmm0
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movzwl %ax, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    addl $20, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    popl %edi
; CHECK-I686-NEXT:    retl
  %tmp0 = load half, ptr %b
  %tmp1 = sitofp i32 %a to half
  %tmp2 = fadd half %tmp0, %tmp1
  %tmp3 = fpext half %tmp2 to float
  ret float %tmp3
}

define half @PR40273(half) #0 {
; CHECK-LIBCALL-LABEL: PR40273:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    movzwl %di, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    xorl %eax, %eax
; CHECK-LIBCALL-NEXT:    xorps %xmm1, %xmm1
; CHECK-LIBCALL-NEXT:    ucomiss %xmm1, %xmm0
; CHECK-LIBCALL-NEXT:    movl $15360, %ecx # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    cmovnel %ecx, %eax
; CHECK-LIBCALL-NEXT:    cmovpl %ecx, %eax
; CHECK-LIBCALL-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-LIBCALL-NEXT:    popq %rcx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: PR40273:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movzwl %di, %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    xorl %eax, %eax
; BWON-F16C-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; BWON-F16C-NEXT:    vucomiss %xmm1, %xmm0
; BWON-F16C-NEXT:    movl $15360, %ecx # imm = 0x3C00
; BWON-F16C-NEXT:    cmovnel %ecx, %eax
; BWON-F16C-NEXT:    cmovpl %ecx, %eax
; BWON-F16C-NEXT:    # kill: def $ax killed $ax killed $eax
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: PR40273:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    subl $12, %esp
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    xorl %eax, %eax
; CHECK-I686-NEXT:    xorps %xmm1, %xmm1
; CHECK-I686-NEXT:    ucomiss %xmm1, %xmm0
; CHECK-I686-NEXT:    movl $15360, %ecx # imm = 0x3C00
; CHECK-I686-NEXT:    cmovnel %ecx, %eax
; CHECK-I686-NEXT:    cmovpl %ecx, %eax
; CHECK-I686-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-I686-NEXT:    addl $12, %esp
; CHECK-I686-NEXT:    retl
  %2 = fcmp une half %0, 0xH0000
  %3 = uitofp i1 %2 to half
  ret half %3
}

define dso_local void @brcond(half %0) {
; CHECK-LIBCALL-LABEL: brcond:
; CHECK-LIBCALL:       # %bb.0: # %entry
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 16
; CHECK-LIBCALL-NEXT:    movzwl %di, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    xorps %xmm1, %xmm1
; CHECK-LIBCALL-NEXT:    ucomiss %xmm1, %xmm0
; CHECK-LIBCALL-NEXT:    jne .LBB18_2
; CHECK-LIBCALL-NEXT:    jp .LBB18_2
; CHECK-LIBCALL-NEXT:  # %bb.1: # %if.then
; CHECK-LIBCALL-NEXT:    popq %rax
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 8
; CHECK-LIBCALL-NEXT:    retq
; CHECK-LIBCALL-NEXT:  .LBB18_2: # %if.end
;
; BWON-F16C-LABEL: brcond:
; BWON-F16C:       # %bb.0: # %entry
; BWON-F16C-NEXT:    movzwl %di, %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; BWON-F16C-NEXT:    vucomiss %xmm1, %xmm0
; BWON-F16C-NEXT:    jne .LBB18_2
; BWON-F16C-NEXT:    jp .LBB18_2
; BWON-F16C-NEXT:  # %bb.1: # %if.then
; BWON-F16C-NEXT:    retq
; BWON-F16C-NEXT:  .LBB18_2: # %if.end
;
; CHECK-I686-LABEL: brcond:
; CHECK-I686:       # %bb.0: # %entry
; CHECK-I686-NEXT:    subl $12, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 16
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    xorps %xmm1, %xmm1
; CHECK-I686-NEXT:    ucomiss %xmm1, %xmm0
; CHECK-I686-NEXT:    jne .LBB18_2
; CHECK-I686-NEXT:    jp .LBB18_2
; CHECK-I686-NEXT:  # %bb.1: # %if.then
; CHECK-I686-NEXT:    addl $12, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 4
; CHECK-I686-NEXT:    retl
; CHECK-I686-NEXT:  .LBB18_2: # %if.end
entry:
  %cmp = fcmp oeq half 0xH0000, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  ret void

if.end:                                           ; preds = %entry
  unreachable
}

define half @test_sqrt(half %0) {
; CHECK-LIBCALL-LABEL: test_sqrt:
; CHECK-LIBCALL:       # %bb.0: # %entry
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 16
; CHECK-LIBCALL-NEXT:    movzwl %di, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    sqrtss %xmm0, %xmm0
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    popq %rcx
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 8
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: test_sqrt:
; BWON-F16C:       # %bb.0: # %entry
; BWON-F16C-NEXT:    movzwl %di, %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vsqrtss %xmm0, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vmovd %xmm0, %eax
; BWON-F16C-NEXT:    # kill: def $ax killed $ax killed $eax
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: test_sqrt:
; CHECK-I686:       # %bb.0: # %entry
; CHECK-I686-NEXT:    subl $12, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 16
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    sqrtss %xmm0, %xmm0
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    addl $12, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 4
; CHECK-I686-NEXT:    retl
entry:
  %1 = call half @llvm.sqrt.f16(half %0)
  ret half %1
}

declare half @llvm.sqrt.f16(half)

define void @main.158() local_unnamed_addr #0 {
; CHECK-LIBCALL-LABEL: main.158:
; CHECK-LIBCALL:       # %bb.0: # %entry
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    xorl %edi, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    movzwl %ax, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    cmpless {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-LIBCALL-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-LIBCALL-NEXT:    andnps %xmm1, %xmm0
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    movw %ax, (%rax)
; CHECK-LIBCALL-NEXT:    popq %rax
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: main.158:
; BWON-F16C:       # %bb.0: # %entry
; BWON-F16C-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vcmpless {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; BWON-F16C-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; BWON-F16C-NEXT:    vandnps %xmm1, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vpextrw $0, %xmm0, (%rax)
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: main.158:
; CHECK-I686:       # %bb.0: # %entry
; CHECK-I686-NEXT:    subl $12, %esp
; CHECK-I686-NEXT:    movl $0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movzwl %ax, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    cmpless {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    andnps %xmm1, %xmm0
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, (%eax)
; CHECK-I686-NEXT:    addl $12, %esp
; CHECK-I686-NEXT:    retl
entry:
  %0 = tail call half @llvm.fabs.f16(half undef)
  %1 = fpext half %0 to float
  %compare.2 = fcmp ole half %0, 0xH4800
  %multiply.95 = fmul float %1, 5.000000e-01
  %add.82 = fadd float %multiply.95, -2.000000e+00
  %multiply.68 = fmul float %add.82, 0.000000e+00
  %subtract.65 = fsub float %multiply.68, 0.000000e+00
  %multiply.57 = fmul float undef, 0.000000e+00
  %2 = select i1 %compare.2, float 0.000000e+00, float %multiply.57
  %3 = fptrunc float %2 to half
  store half %3, ptr undef, align 2
  ret void
}

define void @main.45() local_unnamed_addr {
; CHECK-LIBCALL-LABEL: main.45:
; CHECK-LIBCALL:       # %bb.0: # %entry
; CHECK-LIBCALL-NEXT:    pushq %rbp
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 16
; CHECK-LIBCALL-NEXT:    pushq %r15
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 24
; CHECK-LIBCALL-NEXT:    pushq %r14
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 32
; CHECK-LIBCALL-NEXT:    pushq %rbx
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 40
; CHECK-LIBCALL-NEXT:    pushq %rax
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 48
; CHECK-LIBCALL-NEXT:    .cfi_offset %rbx, -40
; CHECK-LIBCALL-NEXT:    .cfi_offset %r14, -32
; CHECK-LIBCALL-NEXT:    .cfi_offset %r15, -24
; CHECK-LIBCALL-NEXT:    .cfi_offset %rbp, -16
; CHECK-LIBCALL-NEXT:    movzwl (%rax), %edi
; CHECK-LIBCALL-NEXT:    movd %edi, %xmm0
; CHECK-LIBCALL-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,0,0,0,4,5,6,7]
; CHECK-LIBCALL-NEXT:    movq %xmm0, %rbx
; CHECK-LIBCALL-NEXT:    movq %rbx, %r14
; CHECK-LIBCALL-NEXT:    shrq $48, %r14
; CHECK-LIBCALL-NEXT:    movq %rbx, %r15
; CHECK-LIBCALL-NEXT:    shrq $32, %r15
; CHECK-LIBCALL-NEXT:    movl %ebx, %ebp
; CHECK-LIBCALL-NEXT:    shrl $16, %ebp
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    ucomiss %xmm0, %xmm0
; CHECK-LIBCALL-NEXT:    movl $32256, %eax # imm = 0x7E00
; CHECK-LIBCALL-NEXT:    cmovpl %eax, %ebp
; CHECK-LIBCALL-NEXT:    cmovpl %eax, %r15d
; CHECK-LIBCALL-NEXT:    cmovpl %eax, %r14d
; CHECK-LIBCALL-NEXT:    cmovpl %eax, %ebx
; CHECK-LIBCALL-NEXT:    movw %bx, (%rax)
; CHECK-LIBCALL-NEXT:    movw %r14w, (%rax)
; CHECK-LIBCALL-NEXT:    movw %r15w, (%rax)
; CHECK-LIBCALL-NEXT:    movw %bp, (%rax)
; CHECK-LIBCALL-NEXT:    addq $8, %rsp
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 40
; CHECK-LIBCALL-NEXT:    popq %rbx
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 32
; CHECK-LIBCALL-NEXT:    popq %r14
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 24
; CHECK-LIBCALL-NEXT:    popq %r15
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 16
; CHECK-LIBCALL-NEXT:    popq %rbp
; CHECK-LIBCALL-NEXT:    .cfi_def_cfa_offset 8
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: main.45:
; BWON-F16C:       # %bb.0: # %entry
; BWON-F16C-NEXT:    movzwl (%rax), %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vpshuflw {{.*#+}} xmm1 = xmm0[0,0,0,0,4,5,6,7]
; BWON-F16C-NEXT:    vmovq %xmm1, %rax
; BWON-F16C-NEXT:    movq %rax, %rcx
; BWON-F16C-NEXT:    shrq $48, %rcx
; BWON-F16C-NEXT:    movq %rax, %rdx
; BWON-F16C-NEXT:    shrq $32, %rdx
; BWON-F16C-NEXT:    movl %eax, %esi
; BWON-F16C-NEXT:    shrl $16, %esi
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vucomiss %xmm0, %xmm0
; BWON-F16C-NEXT:    movl $32256, %edi # imm = 0x7E00
; BWON-F16C-NEXT:    cmovpl %edi, %esi
; BWON-F16C-NEXT:    cmovpl %edi, %edx
; BWON-F16C-NEXT:    cmovpl %edi, %ecx
; BWON-F16C-NEXT:    cmovpl %edi, %eax
; BWON-F16C-NEXT:    movw %ax, (%rax)
; BWON-F16C-NEXT:    movw %cx, (%rax)
; BWON-F16C-NEXT:    movw %dx, (%rax)
; BWON-F16C-NEXT:    movw %si, (%rax)
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: main.45:
; CHECK-I686:       # %bb.0: # %entry
; CHECK-I686-NEXT:    pushl %edi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 8
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 12
; CHECK-I686-NEXT:    subl $20, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 32
; CHECK-I686-NEXT:    .cfi_offset %esi, -12
; CHECK-I686-NEXT:    .cfi_offset %edi, -8
; CHECK-I686-NEXT:    movzwl (%eax), %eax
; CHECK-I686-NEXT:    movd %eax, %xmm0
; CHECK-I686-NEXT:    pshuflw {{.*#+}} xmm0 = xmm0[0,0,0,0,4,5,6,7]
; CHECK-I686-NEXT:    movd %xmm0, %esi
; CHECK-I686-NEXT:    movl %esi, %edi
; CHECK-I686-NEXT:    shrl $16, %edi
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    ucomiss %xmm0, %xmm0
; CHECK-I686-NEXT:    movl $32256, %eax # imm = 0x7E00
; CHECK-I686-NEXT:    cmovpl %eax, %esi
; CHECK-I686-NEXT:    cmovpl %eax, %edi
; CHECK-I686-NEXT:    movw %di, (%eax)
; CHECK-I686-NEXT:    movw %si, (%eax)
; CHECK-I686-NEXT:    addl $20, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 12
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 8
; CHECK-I686-NEXT:    popl %edi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 4
; CHECK-I686-NEXT:    retl
entry:
  %0 = load half, ptr undef, align 8
  %1 = bitcast half %0 to i16
  %broadcast.splatinsert = insertelement <4 x half> poison, half %0, i64 0
  %broadcast.splat = shufflevector <4 x half> %broadcast.splatinsert, <4 x half> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert13 = insertelement <4 x i16> poison, i16 %1, i64 0
  %broadcast.splat14 = shufflevector <4 x i16> %broadcast.splatinsert13, <4 x i16> poison, <4 x i32> zeroinitializer
  %2 = fcmp uno <4 x half> %broadcast.splat, zeroinitializer
  %3 = add <4 x i16> zeroinitializer, %broadcast.splat14
  %4 = select i1 undef, <4 x i16> undef, <4 x i16> %3
  %5 = select <4 x i1> undef, <4 x i16> undef, <4 x i16> %4
  %6 = bitcast <4 x i16> %5 to <4 x half>
  %7 = select <4 x i1> %2, <4 x half> <half 0xH7E00, half 0xH7E00, half 0xH7E00, half 0xH7E00>, <4 x half> %6
  store <4 x half> %7, ptr undef, align 16
  ret void
}

define half @fcopysign(half %x, half %y) {
; CHECK-LABEL: fcopysign:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $esi killed $esi def $rsi
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    andl $-32768, %esi # imm = 0x8000
; CHECK-NEXT:    andl $32767, %edi # imm = 0x7FFF
; CHECK-NEXT:    leal (%rdi,%rsi), %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
;
; CHECK-I686-LABEL: fcopysign:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl $-32768, %ecx # imm = 0x8000
; CHECK-I686-NEXT:    andl {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    andl $32767, %eax # imm = 0x7FFF
; CHECK-I686-NEXT:    orl %ecx, %eax
; CHECK-I686-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-I686-NEXT:    retl
  %a = call half @llvm.copysign.f16(half %x, half %y)
  ret half %a
}

declare half @llvm.fabs.f16(half)
declare half @llvm.copysign.f16(half, half)

define <8 x half> @select(i1 %c, <8 x half> %x, <8 x half> %y) {
; BWON-LABEL: select:
; BWON:       # %bb.0:
; BWON-NEXT:    pushq %rbx
; BWON-NEXT:    .cfi_def_cfa_offset 16
; BWON-NEXT:    .cfi_offset %rbx, -16
; BWON-NEXT:    movq %rdi, %rax
; BWON-NEXT:    testb $1, %sil
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %rsi
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %rdi
; BWON-NEXT:    cmovneq %rsi, %rdi
; BWON-NEXT:    movzwl (%rdi), %esi
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %rdi
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %r10
; BWON-NEXT:    cmovneq %rdi, %r10
; BWON-NEXT:    movzwl (%r10), %edi
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %r10
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %r11
; BWON-NEXT:    cmovneq %r10, %r11
; BWON-NEXT:    movzwl (%r11), %r10d
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %r11
; BWON-NEXT:    leaq {{[0-9]+}}(%rsp), %rbx
; BWON-NEXT:    cmovneq %r11, %rbx
; BWON-NEXT:    movzwl (%rbx), %r11d
; BWON-NEXT:    cmovew {{[0-9]+}}(%rsp), %dx
; BWON-NEXT:    cmovew {{[0-9]+}}(%rsp), %cx
; BWON-NEXT:    cmovew {{[0-9]+}}(%rsp), %r8w
; BWON-NEXT:    cmovew {{[0-9]+}}(%rsp), %r9w
; BWON-NEXT:    movw %r9w, 6(%rax)
; BWON-NEXT:    movw %r8w, 4(%rax)
; BWON-NEXT:    movw %cx, 2(%rax)
; BWON-NEXT:    movw %dx, (%rax)
; BWON-NEXT:    movw %r11w, 14(%rax)
; BWON-NEXT:    movw %r10w, 12(%rax)
; BWON-NEXT:    movw %di, 10(%rax)
; BWON-NEXT:    movw %si, 8(%rax)
; BWON-NEXT:    popq %rbx
; BWON-NEXT:    .cfi_def_cfa_offset 8
; BWON-NEXT:    retq
;
; BWOFF-LABEL: select:
; BWOFF:       # %bb.0:
; BWOFF-NEXT:    pushq %rbx
; BWOFF-NEXT:    .cfi_def_cfa_offset 16
; BWOFF-NEXT:    .cfi_offset %rbx, -16
; BWOFF-NEXT:    movq %rdi, %rax
; BWOFF-NEXT:    testb $1, %sil
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %rsi
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %rdi
; BWOFF-NEXT:    cmovneq %rsi, %rdi
; BWOFF-NEXT:    movw (%rdi), %si
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %rdi
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %r10
; BWOFF-NEXT:    cmovneq %rdi, %r10
; BWOFF-NEXT:    movw (%r10), %di
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %r10
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %r11
; BWOFF-NEXT:    cmovneq %r10, %r11
; BWOFF-NEXT:    movw (%r11), %r10w
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %r11
; BWOFF-NEXT:    leaq {{[0-9]+}}(%rsp), %rbx
; BWOFF-NEXT:    cmovneq %r11, %rbx
; BWOFF-NEXT:    movw (%rbx), %r11w
; BWOFF-NEXT:    cmovew {{[0-9]+}}(%rsp), %dx
; BWOFF-NEXT:    cmovew {{[0-9]+}}(%rsp), %cx
; BWOFF-NEXT:    cmovew {{[0-9]+}}(%rsp), %r8w
; BWOFF-NEXT:    cmovew {{[0-9]+}}(%rsp), %r9w
; BWOFF-NEXT:    movw %r9w, 6(%rax)
; BWOFF-NEXT:    movw %r8w, 4(%rax)
; BWOFF-NEXT:    movw %cx, 2(%rax)
; BWOFF-NEXT:    movw %dx, (%rax)
; BWOFF-NEXT:    movw %r11w, 14(%rax)
; BWOFF-NEXT:    movw %r10w, 12(%rax)
; BWOFF-NEXT:    movw %di, 10(%rax)
; BWOFF-NEXT:    movw %si, 8(%rax)
; BWOFF-NEXT:    popq %rbx
; BWOFF-NEXT:    .cfi_def_cfa_offset 8
; BWOFF-NEXT:    retq
;
; CHECK-I686-LABEL: select:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %ebp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 8
; CHECK-I686-NEXT:    pushl %ebx
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 12
; CHECK-I686-NEXT:    pushl %edi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 16
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 20
; CHECK-I686-NEXT:    subl $8, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 28
; CHECK-I686-NEXT:    .cfi_offset %esi, -20
; CHECK-I686-NEXT:    .cfi_offset %edi, -16
; CHECK-I686-NEXT:    .cfi_offset %ebx, -12
; CHECK-I686-NEXT:    .cfi_offset %ebp, -8
; CHECK-I686-NEXT:    testb $1, {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    cmovnel %ecx, %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %edx
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    cmovnel %edx, %eax
; CHECK-I686-NEXT:    movl %eax, (%esp) # 4-byte Spill
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %edx
; CHECK-I686-NEXT:    cmovnel %esi, %edx
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %edi
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    cmovnel %edi, %esi
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %ebx
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %edi
; CHECK-I686-NEXT:    cmovnel %ebx, %edi
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %ebx
; CHECK-I686-NEXT:    cmovnel %eax, %ebx
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    cmovnel %eax, %ecx
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %ebp
; CHECK-I686-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    cmovnel %ebp, %eax
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebp # 4-byte Reload
; CHECK-I686-NEXT:    movw (%ebp), %bp
; CHECK-I686-NEXT:    movw %bp, {{[-0-9]+}}(%e{{[sb]}}p) # 2-byte Spill
; CHECK-I686-NEXT:    movl (%esp), %ebp # 4-byte Reload
; CHECK-I686-NEXT:    movw (%ebp), %bp
; CHECK-I686-NEXT:    movw %bp, (%esp) # 2-byte Spill
; CHECK-I686-NEXT:    movw (%edx), %bp
; CHECK-I686-NEXT:    movw (%esi), %si
; CHECK-I686-NEXT:    movw (%edi), %di
; CHECK-I686-NEXT:    movw (%ebx), %bx
; CHECK-I686-NEXT:    movw (%ecx), %dx
; CHECK-I686-NEXT:    movw (%eax), %cx
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movw %cx, 14(%eax)
; CHECK-I686-NEXT:    movw %dx, 12(%eax)
; CHECK-I686-NEXT:    movw %bx, 10(%eax)
; CHECK-I686-NEXT:    movw %di, 8(%eax)
; CHECK-I686-NEXT:    movw %si, 6(%eax)
; CHECK-I686-NEXT:    movw %bp, 4(%eax)
; CHECK-I686-NEXT:    movw (%esp), %cx # 2-byte Reload
; CHECK-I686-NEXT:    movw %cx, 2(%eax)
; CHECK-I686-NEXT:    movw {{[-0-9]+}}(%e{{[sb]}}p), %cx # 2-byte Reload
; CHECK-I686-NEXT:    movw %cx, (%eax)
; CHECK-I686-NEXT:    addl $8, %esp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 20
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 16
; CHECK-I686-NEXT:    popl %edi
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 12
; CHECK-I686-NEXT:    popl %ebx
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 8
; CHECK-I686-NEXT:    popl %ebp
; CHECK-I686-NEXT:    .cfi_def_cfa_offset 4
; CHECK-I686-NEXT:    retl $4
  %s = select i1 %c, <8 x half> %x, <8 x half> %y
  ret <8 x half> %s
}

define <8 x half> @shuffle(ptr %p) {
; BWON-LABEL: shuffle:
; BWON:       # %bb.0:
; BWON-NEXT:    movq %rdi, %rax
; BWON-NEXT:    movzwl 8(%rsi), %ecx
; BWON-NEXT:    movw %cx, 2(%rdi)
; BWON-NEXT:    movw %cx, (%rdi)
; BWON-NEXT:    retq
;
; BWOFF-LABEL: shuffle:
; BWOFF:       # %bb.0:
; BWOFF-NEXT:    movq %rdi, %rax
; BWOFF-NEXT:    movw 8(%rsi), %cx
; BWOFF-NEXT:    movw %cx, 2(%rdi)
; BWOFF-NEXT:    movw %cx, (%rdi)
; BWOFF-NEXT:    retq
;
; CHECK-I686-LABEL: shuffle:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    movw 8(%ecx), %cx
; CHECK-I686-NEXT:    movw %cx, 2(%eax)
; CHECK-I686-NEXT:    movw %cx, (%eax)
; CHECK-I686-NEXT:    retl $4
  %1 = load <8 x half>, ptr %p, align 8
  %2 = shufflevector <8 x half> %1, <8 x half> poison, <8 x i32> <i32 4, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  ret <8 x half> %2
}

declare half @llvm.minnum.f16(half, half)

define half @pr61271(half %0, half %1) #0 {
; CHECK-LIBCALL-LABEL: pr61271:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    pushq %rbx
; CHECK-LIBCALL-NEXT:    subq $16, %rsp
; CHECK-LIBCALL-NEXT:    movl %edi, %ebx
; CHECK-LIBCALL-NEXT:    movzwl %si, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    movaps %xmm0, (%rsp) # 16-byte Spill
; CHECK-LIBCALL-NEXT:    movzwl %bx, %edi
; CHECK-LIBCALL-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-LIBCALL-NEXT:    movaps %xmm0, %xmm1
; CHECK-LIBCALL-NEXT:    cmpunordss %xmm0, %xmm1
; CHECK-LIBCALL-NEXT:    movaps %xmm1, %xmm2
; CHECK-LIBCALL-NEXT:    movaps (%rsp), %xmm3 # 16-byte Reload
; CHECK-LIBCALL-NEXT:    andps %xmm3, %xmm2
; CHECK-LIBCALL-NEXT:    minss %xmm0, %xmm3
; CHECK-LIBCALL-NEXT:    andnps %xmm3, %xmm1
; CHECK-LIBCALL-NEXT:    orps %xmm2, %xmm1
; CHECK-LIBCALL-NEXT:    movaps %xmm1, %xmm0
; CHECK-LIBCALL-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-LIBCALL-NEXT:    addq $16, %rsp
; CHECK-LIBCALL-NEXT:    popq %rbx
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: pr61271:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movzwl %di, %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    movzwl %si, %eax
; BWON-F16C-NEXT:    vmovd %eax, %xmm1
; BWON-F16C-NEXT:    vcvtph2ps %xmm1, %xmm1
; BWON-F16C-NEXT:    vminss %xmm0, %xmm1, %xmm2
; BWON-F16C-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm0
; BWON-F16C-NEXT:    vblendvps %xmm0, %xmm1, %xmm2, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vmovd %xmm0, %eax
; BWON-F16C-NEXT:    # kill: def $ax killed $ax killed $eax
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: pr61271:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $24, %esp
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movl %esi, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm2
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm2
; CHECK-I686-NEXT:    movaps %xmm2, %xmm3
; CHECK-I686-NEXT:    andps %xmm0, %xmm3
; CHECK-I686-NEXT:    minss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm2
; CHECK-I686-NEXT:    orps %xmm3, %xmm2
; CHECK-I686-NEXT:    movss %xmm2, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    addl $24, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    retl
  %3 = call fast half @llvm.minnum.f16(half %0, half %1)
  ret half %3
}

declare <8 x half> @llvm.maxnum.v8f16(<8 x half>, <8 x half>)

define <8 x half> @maxnum_v8f16(<8 x half> %0, <8 x half> %1) #0 {
; BWOFF-LABEL: maxnum_v8f16:
; BWOFF:       # %bb.0:
; BWOFF-NEXT:    pushq %rbp
; BWOFF-NEXT:    pushq %r15
; BWOFF-NEXT:    pushq %r14
; BWOFF-NEXT:    pushq %r13
; BWOFF-NEXT:    pushq %r12
; BWOFF-NEXT:    pushq %rbx
; BWOFF-NEXT:    subq $168, %rsp
; BWOFF-NEXT:    movl %r9d, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movl %r8d, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movl %ecx, %r12d
; BWOFF-NEXT:    movl %edx, %ebp
; BWOFF-NEXT:    movl %esi, %r15d
; BWOFF-NEXT:    movq %rdi, %rbx
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; BWOFF-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %r13d
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %r14d
; BWOFF-NEXT:    movzwl {{[0-9]+}}(%rsp), %edi
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movzwl %r15w, %edi
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; BWOFF-NEXT:    movl %r14d, %edi
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movzwl %bp, %edi
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; BWOFF-NEXT:    movl %r13d, %edi
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movzwl %r12w, %edi
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %r12w
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 2-byte Folded Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %r14w
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 2-byte Folded Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %bp
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %r15w
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, %r13w
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; BWOFF-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 4-byte Reload
; BWOFF-NEXT:    callq __gnu_h2f_ieee@PLT
; BWOFF-NEXT:    movaps %xmm0, %xmm1
; BWOFF-NEXT:    cmpunordss %xmm0, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm2
; BWOFF-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; BWOFF-NEXT:    andps %xmm3, %xmm2
; BWOFF-NEXT:    maxss %xmm0, %xmm3
; BWOFF-NEXT:    andnps %xmm3, %xmm1
; BWOFF-NEXT:    orps %xmm2, %xmm1
; BWOFF-NEXT:    movaps %xmm1, %xmm0
; BWOFF-NEXT:    callq __gnu_f2h_ieee@PLT
; BWOFF-NEXT:    movw %ax, 14(%rbx)
; BWOFF-NEXT:    movw %r13w, 12(%rbx)
; BWOFF-NEXT:    movw %r15w, 10(%rbx)
; BWOFF-NEXT:    movw %bp, 8(%rbx)
; BWOFF-NEXT:    movw %r14w, 6(%rbx)
; BWOFF-NEXT:    movw %r12w, 4(%rbx)
; BWOFF-NEXT:    movw {{[-0-9]+}}(%r{{[sb]}}p), %ax # 2-byte Reload
; BWOFF-NEXT:    movw %ax, 2(%rbx)
; BWOFF-NEXT:    movw {{[-0-9]+}}(%r{{[sb]}}p), %ax # 2-byte Reload
; BWOFF-NEXT:    movw %ax, (%rbx)
; BWOFF-NEXT:    movq %rbx, %rax
; BWOFF-NEXT:    addq $168, %rsp
; BWOFF-NEXT:    popq %rbx
; BWOFF-NEXT:    popq %r12
; BWOFF-NEXT:    popq %r13
; BWOFF-NEXT:    popq %r14
; BWOFF-NEXT:    popq %r15
; BWOFF-NEXT:    popq %rbp
; BWOFF-NEXT:    retq
;
; BWON-F16C-LABEL: maxnum_v8f16:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    movq %rdi, %rax
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %edi
; BWON-F16C-NEXT:    vmovd %edi, %xmm0
; BWON-F16C-NEXT:    movzwl %si, %esi
; BWON-F16C-NEXT:    vmovd %esi, %xmm1
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %esi
; BWON-F16C-NEXT:    vmovd %esi, %xmm2
; BWON-F16C-NEXT:    movzwl %dx, %edx
; BWON-F16C-NEXT:    vmovd %edx, %xmm3
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %edx
; BWON-F16C-NEXT:    vmovd %edx, %xmm4
; BWON-F16C-NEXT:    movzwl %cx, %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm5
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm6
; BWON-F16C-NEXT:    movzwl %r8w, %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm7
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm8
; BWON-F16C-NEXT:    movzwl %r9w, %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm9
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm10
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm11
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm12
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm13
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vmovd %ecx, %xmm14
; BWON-F16C-NEXT:    movzwl {{[0-9]+}}(%rsp), %ecx
; BWON-F16C-NEXT:    vcvtph2ps %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtph2ps %xmm1, %xmm1
; BWON-F16C-NEXT:    vmaxss %xmm1, %xmm0, %xmm15
; BWON-F16C-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm1
; BWON-F16C-NEXT:    vblendvps %xmm1, %xmm0, %xmm15, %xmm0
; BWON-F16C-NEXT:    vmovd %ecx, %xmm1
; BWON-F16C-NEXT:    vcvtph2ps %xmm2, %xmm2
; BWON-F16C-NEXT:    vcvtph2ps %xmm3, %xmm3
; BWON-F16C-NEXT:    vmaxss %xmm3, %xmm2, %xmm15
; BWON-F16C-NEXT:    vcmpunordss %xmm3, %xmm3, %xmm3
; BWON-F16C-NEXT:    vblendvps %xmm3, %xmm2, %xmm15, %xmm2
; BWON-F16C-NEXT:    vcvtph2ps %xmm4, %xmm3
; BWON-F16C-NEXT:    vcvtph2ps %xmm5, %xmm4
; BWON-F16C-NEXT:    vmaxss %xmm4, %xmm3, %xmm5
; BWON-F16C-NEXT:    vcmpunordss %xmm4, %xmm4, %xmm4
; BWON-F16C-NEXT:    vblendvps %xmm4, %xmm3, %xmm5, %xmm3
; BWON-F16C-NEXT:    vcvtph2ps %xmm6, %xmm4
; BWON-F16C-NEXT:    vcvtph2ps %xmm7, %xmm5
; BWON-F16C-NEXT:    vmaxss %xmm5, %xmm4, %xmm6
; BWON-F16C-NEXT:    vcmpunordss %xmm5, %xmm5, %xmm5
; BWON-F16C-NEXT:    vblendvps %xmm5, %xmm4, %xmm6, %xmm4
; BWON-F16C-NEXT:    vcvtph2ps %xmm8, %xmm5
; BWON-F16C-NEXT:    vcvtph2ps %xmm9, %xmm6
; BWON-F16C-NEXT:    vmaxss %xmm6, %xmm5, %xmm7
; BWON-F16C-NEXT:    vcmpunordss %xmm6, %xmm6, %xmm6
; BWON-F16C-NEXT:    vblendvps %xmm6, %xmm5, %xmm7, %xmm5
; BWON-F16C-NEXT:    vcvtph2ps %xmm10, %xmm6
; BWON-F16C-NEXT:    vcvtph2ps %xmm11, %xmm7
; BWON-F16C-NEXT:    vmaxss %xmm6, %xmm7, %xmm8
; BWON-F16C-NEXT:    vcmpunordss %xmm6, %xmm6, %xmm6
; BWON-F16C-NEXT:    vblendvps %xmm6, %xmm7, %xmm8, %xmm6
; BWON-F16C-NEXT:    vcvtph2ps %xmm12, %xmm7
; BWON-F16C-NEXT:    vcvtph2ps %xmm13, %xmm8
; BWON-F16C-NEXT:    vmaxss %xmm7, %xmm8, %xmm9
; BWON-F16C-NEXT:    vcmpunordss %xmm7, %xmm7, %xmm7
; BWON-F16C-NEXT:    vblendvps %xmm7, %xmm8, %xmm9, %xmm7
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm0, %xmm0
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm2, %xmm2
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm3, %xmm3
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm4, %xmm4
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm5, %xmm5
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm6, %xmm6
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm7, %xmm7
; BWON-F16C-NEXT:    vcvtph2ps %xmm14, %xmm8
; BWON-F16C-NEXT:    vcvtph2ps %xmm1, %xmm1
; BWON-F16C-NEXT:    vmaxss %xmm8, %xmm1, %xmm9
; BWON-F16C-NEXT:    vcmpunordss %xmm8, %xmm8, %xmm8
; BWON-F16C-NEXT:    vblendvps %xmm8, %xmm1, %xmm9, %xmm1
; BWON-F16C-NEXT:    vcvtps2ph $4, %xmm1, %xmm1
; BWON-F16C-NEXT:    vpextrw $0, %xmm1, 14(%rax)
; BWON-F16C-NEXT:    vpextrw $0, %xmm7, 12(%rax)
; BWON-F16C-NEXT:    vpextrw $0, %xmm6, 10(%rax)
; BWON-F16C-NEXT:    vpextrw $0, %xmm5, 8(%rax)
; BWON-F16C-NEXT:    vpextrw $0, %xmm4, 6(%rax)
; BWON-F16C-NEXT:    vpextrw $0, %xmm3, 4(%rax)
; BWON-F16C-NEXT:    vpextrw $0, %xmm2, 2(%rax)
; BWON-F16C-NEXT:    vpextrw $0, %xmm0, (%rax)
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: maxnum_v8f16:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    pushl %ebp
; CHECK-I686-NEXT:    pushl %ebx
; CHECK-I686-NEXT:    pushl %edi
; CHECK-I686-NEXT:    pushl %esi
; CHECK-I686-NEXT:    subl $252, %esp
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %esi
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %ebp
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %edi
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %ebx
; CHECK-I686-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl %ebx, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl %edi, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movl %ebp, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, {{[-0-9]+}}(%e{{[sb]}}p) # 2-byte Spill
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, {{[-0-9]+}}(%e{{[sb]}}p) # 2-byte Spill
; CHECK-I686-NEXT:    movl %esi, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %si
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, {{[-0-9]+}}(%e{{[sb]}}p) # 2-byte Spill
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %bx
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %bp
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    fstpt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Spill
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; CHECK-I686-NEXT:    movl %eax, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_h2f_ieee
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    fldt {{[-0-9]+}}(%e{{[sb]}}p) # 10-byte Folded Reload
; CHECK-I686-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-I686-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; CHECK-I686-NEXT:    movaps %xmm1, %xmm3
; CHECK-I686-NEXT:    cmpunordss %xmm1, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, %xmm2
; CHECK-I686-NEXT:    andps %xmm0, %xmm2
; CHECK-I686-NEXT:    maxss %xmm1, %xmm0
; CHECK-I686-NEXT:    andnps %xmm0, %xmm3
; CHECK-I686-NEXT:    orps %xmm2, %xmm3
; CHECK-I686-NEXT:    movaps %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movw %ax, %di
; CHECK-I686-NEXT:    movaps {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-I686-NEXT:    movss %xmm0, (%esp)
; CHECK-I686-NEXT:    calll __gnu_f2h_ieee
; CHECK-I686-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-I686-NEXT:    movw %ax, 14(%ecx)
; CHECK-I686-NEXT:    movw %di, 12(%ecx)
; CHECK-I686-NEXT:    movw %bp, 10(%ecx)
; CHECK-I686-NEXT:    movw %bx, 8(%ecx)
; CHECK-I686-NEXT:    movw {{[-0-9]+}}(%e{{[sb]}}p), %ax # 2-byte Reload
; CHECK-I686-NEXT:    movw %ax, 6(%ecx)
; CHECK-I686-NEXT:    movw %si, 4(%ecx)
; CHECK-I686-NEXT:    movw {{[-0-9]+}}(%e{{[sb]}}p), %ax # 2-byte Reload
; CHECK-I686-NEXT:    movw %ax, 2(%ecx)
; CHECK-I686-NEXT:    movw {{[-0-9]+}}(%e{{[sb]}}p), %ax # 2-byte Reload
; CHECK-I686-NEXT:    movw %ax, (%ecx)
; CHECK-I686-NEXT:    movl %ecx, %eax
; CHECK-I686-NEXT:    addl $252, %esp
; CHECK-I686-NEXT:    popl %esi
; CHECK-I686-NEXT:    popl %edi
; CHECK-I686-NEXT:    popl %ebx
; CHECK-I686-NEXT:    popl %ebp
; CHECK-I686-NEXT:    retl $4
  %3 = call fast <8 x half> @llvm.maxnum.v8f16(<8 x half> %0, <8 x half> %1)
  ret <8 x half> %3
}

define void @pr63114() {
; CHECK-LIBCALL-LABEL: pr63114:
; CHECK-LIBCALL:       # %bb.0:
; CHECK-LIBCALL-NEXT:    movq (%rax), %rax
; CHECK-LIBCALL-NEXT:    movq %rax, %rcx
; CHECK-LIBCALL-NEXT:    movq %rax, %rdx
; CHECK-LIBCALL-NEXT:    movw %ax, 52
; CHECK-LIBCALL-NEXT:    movw %ax, 20
; CHECK-LIBCALL-NEXT:    # kill: def $eax killed $eax killed $rax
; CHECK-LIBCALL-NEXT:    shrl $16, %eax
; CHECK-LIBCALL-NEXT:    shrq $32, %rcx
; CHECK-LIBCALL-NEXT:    shrq $48, %rdx
; CHECK-LIBCALL-NEXT:    movw %dx, 60
; CHECK-LIBCALL-NEXT:    movw %cx, 36
; CHECK-LIBCALL-NEXT:    movw %dx, 28
; CHECK-LIBCALL-NEXT:    movw %cx, 4
; CHECK-LIBCALL-NEXT:    movw %ax, 44
; CHECK-LIBCALL-NEXT:    movw %ax, 12
; CHECK-LIBCALL-NEXT:    movw $15360, 62 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    movw $15360, 54 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    movw $15360, 46 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    movw $15360, 38 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    movw $15360, 30 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    movw $15360, 22 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    movw $15360, 14 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    movw $15360, 6 # imm = 0x3C00
; CHECK-LIBCALL-NEXT:    retq
;
; BWON-F16C-LABEL: pr63114:
; BWON-F16C:       # %bb.0:
; BWON-F16C-NEXT:    vbroadcastsd (%rax), %ymm0
; BWON-F16C-NEXT:    vpextrw $7, %xmm0, 60
; BWON-F16C-NEXT:    vpextrw $4, %xmm0, 52
; BWON-F16C-NEXT:    vpextrw $1, %xmm0, 44
; BWON-F16C-NEXT:    vpextrw $6, %xmm0, 36
; BWON-F16C-NEXT:    vpextrw $3, %xmm0, 28
; BWON-F16C-NEXT:    vpextrw $0, %xmm0, 20
; BWON-F16C-NEXT:    vpextrw $5, %xmm0, 12
; BWON-F16C-NEXT:    vpextrw $2, %xmm0, 4
; BWON-F16C-NEXT:    movw $15360, 62 # imm = 0x3C00
; BWON-F16C-NEXT:    movw $15360, 54 # imm = 0x3C00
; BWON-F16C-NEXT:    movw $15360, 46 # imm = 0x3C00
; BWON-F16C-NEXT:    movw $15360, 38 # imm = 0x3C00
; BWON-F16C-NEXT:    movw $15360, 30 # imm = 0x3C00
; BWON-F16C-NEXT:    movw $15360, 22 # imm = 0x3C00
; BWON-F16C-NEXT:    movw $15360, 14 # imm = 0x3C00
; BWON-F16C-NEXT:    movw $15360, 6 # imm = 0x3C00
; BWON-F16C-NEXT:    vzeroupper
; BWON-F16C-NEXT:    retq
;
; CHECK-I686-LABEL: pr63114:
; CHECK-I686:       # %bb.0:
; CHECK-I686-NEXT:    movl (%eax), %eax
; CHECK-I686-NEXT:    movw %ax, 52
; CHECK-I686-NEXT:    movw %ax, 36
; CHECK-I686-NEXT:    movw %ax, 20
; CHECK-I686-NEXT:    movw %ax, 4
; CHECK-I686-NEXT:    shrl $16, %eax
; CHECK-I686-NEXT:    movw %ax, 60
; CHECK-I686-NEXT:    movw %ax, 44
; CHECK-I686-NEXT:    movw %ax, 28
; CHECK-I686-NEXT:    movw %ax, 12
; CHECK-I686-NEXT:    movw $15360, 62 # imm = 0x3C00
; CHECK-I686-NEXT:    movw $15360, 54 # imm = 0x3C00
; CHECK-I686-NEXT:    movw $15360, 46 # imm = 0x3C00
; CHECK-I686-NEXT:    movw $15360, 38 # imm = 0x3C00
; CHECK-I686-NEXT:    movw $15360, 30 # imm = 0x3C00
; CHECK-I686-NEXT:    movw $15360, 22 # imm = 0x3C00
; CHECK-I686-NEXT:    movw $15360, 14 # imm = 0x3C00
; CHECK-I686-NEXT:    movw $15360, 6 # imm = 0x3C00
; CHECK-I686-NEXT:    retl
  %1 = load <24 x half>, ptr poison, align 2
  %2 = shufflevector <24 x half> %1, <24 x half> poison, <8 x i32> <i32 2, i32 5, i32 8, i32 11, i32 14, i32 17, i32 20, i32 23>
  %3 = shufflevector <8 x half> %2, <8 x half> <half 0xH3C00, half 0xH3C00, half 0xH3C00, half 0xH3C00, half 0xH3C00, half 0xH3C00, half 0xH3C00, half 0xH3C00>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4 = shufflevector <16 x half> poison, <16 x half> %3, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x half> %4, ptr null, align 2
  ret void
}

attributes #0 = { nounwind }
