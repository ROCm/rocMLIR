; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s

define <8 x half> @cvt_and_clamp2(<8 x float>) nounwind {
; CHECK-LABEL: cvt_and_clamp2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    pushq %r15
; CHECK-NEXT:    pushq %r14
; CHECK-NEXT:    pushq %r13
; CHECK-NEXT:    pushq %r12
; CHECK-NEXT:    pushq %rbx
; CHECK-NEXT:    subq $56, %rsp
; CHECK-NEXT:    movaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-NEXT:    movq %rdi, %rbx
; CHECK-NEXT:    shufps {{.*#+}} xmm0 = xmm0[1,1,1,1]
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; CHECK-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    movhlps {{.*#+}} xmm0 = xmm0[1,1]
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; CHECK-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    shufps {{.*#+}} xmm0 = xmm0[3,3,3,3]
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r14d
; CHECK-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    shufps {{.*#+}} xmm0 = xmm0[1,1,1,1]
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r15d
; CHECK-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    movhlps {{.*#+}} xmm0 = xmm0[1,1]
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %ebp
; CHECK-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    shufps {{.*#+}} xmm0 = xmm0[3,3,3,3]
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r12d
; CHECK-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r13d
; CHECK-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movzwl %ax, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    xorps %xmm1, %xmm1
; CHECK-NEXT:    maxss %xmm1, %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; CHECK-NEXT:    movzwl %r13w, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    maxss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; CHECK-NEXT:    movzwl %r12w, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    maxss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; CHECK-NEXT:    movzwl %bp, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    maxss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %ebp
; CHECK-NEXT:    movzwl %r15w, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    maxss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r12d
; CHECK-NEXT:    movzwl %r14w, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    maxss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r13d
; CHECK-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 2-byte Folded Reload
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    maxss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r15d
; CHECK-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 2-byte Folded Reload
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    maxss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movzwl %ax, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; CHECK-NEXT:    movzwl %r15w, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, {{[-0-9]+}}(%r{{[sb]}}p) # 2-byte Spill
; CHECK-NEXT:    movzwl %r13w, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r13d
; CHECK-NEXT:    movzwl %r12w, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r12d
; CHECK-NEXT:    movzwl %bp, %edi
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %ebp
; CHECK-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 2-byte Folded Reload
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r14d
; CHECK-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 2-byte Folded Reload
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movl %eax, %r15d
; CHECK-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %edi # 2-byte Folded Reload
; CHECK-NEXT:    callq __gnu_h2f_ieee@PLT
; CHECK-NEXT:    minss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    callq __gnu_f2h_ieee@PLT
; CHECK-NEXT:    movw %ax, 8(%rbx)
; CHECK-NEXT:    movw %r15w, (%rbx)
; CHECK-NEXT:    movw %r14w, 14(%rbx)
; CHECK-NEXT:    movw %bp, 12(%rbx)
; CHECK-NEXT:    movw %r12w, 10(%rbx)
; CHECK-NEXT:    movw %r13w, 6(%rbx)
; CHECK-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 2-byte Folded Reload
; CHECK-NEXT:    movw %ax, 4(%rbx)
; CHECK-NEXT:    movzwl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 2-byte Folded Reload
; CHECK-NEXT:    movw %ax, 2(%rbx)
; CHECK-NEXT:    movq %rbx, %rax
; CHECK-NEXT:    addq $56, %rsp
; CHECK-NEXT:    popq %rbx
; CHECK-NEXT:    popq %r12
; CHECK-NEXT:    popq %r13
; CHECK-NEXT:    popq %r14
; CHECK-NEXT:    popq %r15
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
    %2 = fptrunc <8 x float> %0 to <8 x half>
    %3 = call <8 x half> @llvm.maxnum.v8f16(<8 x half> zeroinitializer, <8 x half> %2)
    %4 = call <8 x half> @llvm.minnum.v8f16(<8 x half> %3, <8 x half> <half 1.0, half 1.0, half 1.0, half 1.0, half 1.0, half 1.0, half 1.0, half 1.0>)
    ret <8 x half> %4
}

declare <8 x half> @llvm.maxnum.v8f16(<8 x half>, <8 x half>)
declare <8 x half> @llvm.minnum.v8f16(<8 x half>, <8 x half>)
