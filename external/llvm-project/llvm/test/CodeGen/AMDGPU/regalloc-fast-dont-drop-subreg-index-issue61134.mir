# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -sgpr-regalloc=fast -start-before=regallocfast,0 -stop-before=greedy -o - %s | FileCheck %s

# RegAllocFast was incorrectly dropping subregister indexes on
# unassigned virtual registers. Make sure they are passed through
# undisturbed to the second regalloc run.

---
name:            func
alignment:       1
tracksRegLiveness: true
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1_vgpr2

    ; CHECK-LABEL: name: func
    ; CHECK: liveins: $vgpr0, $vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: undef renamable $vgpr3 = COPY $vgpr0, implicit-def $vgpr3_vgpr4
    ; CHECK-NEXT: SI_SPILL_V64_SAVE $vgpr3_vgpr4, %stack.0, $sgpr32, 0, implicit $exec :: (store (s64) into %stack.0, align 4, addrspace 5)
    ; CHECK-NEXT: renamable $vgpr5_vgpr6 = COPY $vgpr1_vgpr2
    ; CHECK-NEXT: $vgpr0_vgpr1 = SI_SPILL_V64_RESTORE %stack.0, $sgpr32, 0, implicit $exec :: (load (s64) from %stack.0, align 4, addrspace 5)
    ; CHECK-NEXT: undef renamable $vgpr4 = V_MOV_B32_e32 0, implicit $exec, implicit-def $vgpr3_vgpr4
    ; CHECK-NEXT: undef renamable $vgpr1, renamable $sgpr0_sgpr1 = V_ADD_CO_U32_e64 1, $vgpr0, 0, implicit $exec, implicit-def $vgpr1_vgpr2
    ; CHECK-NEXT: undef renamable $vgpr4, dead renamable $sgpr0_sgpr1 = V_ADDC_U32_e64 0, $vgpr4, killed $sgpr0_sgpr1, 0, implicit $exec, implicit-def $vgpr3_vgpr4
    ; CHECK-NEXT: renamable $vgpr5_vgpr6 = GLOBAL_LOAD_DWORDX2 killed renamable $vgpr5_vgpr6, 0, 0, implicit $exec
    ; CHECK-NEXT: $vgpr0 = V_MOV_B32_e32 $vgpr5, implicit $exec, implicit killed $vgpr5_vgpr6
    ; CHECK-NEXT: S_ENDPGM 0, implicit renamable $vgpr1_vgpr2, implicit killed renamable $vgpr3_vgpr4, implicit $vgpr0
    undef %0.sub0:vreg_64 = COPY $vgpr0
    %2:vreg_64 = COPY $vgpr1_vgpr2
    undef %1.sub1:vreg_64 = V_MOV_B32_e32 0, implicit $exec
    undef %0.sub0:vreg_64, %3:sreg_64_xexec = V_ADD_CO_U32_e64 1, %0.sub0, 0, implicit $exec
    undef %1.sub1:vreg_64, dead %4:sreg_64_xexec = V_ADDC_U32_e64 0, %1.sub1, %3, 0, implicit $exec
    %5:vreg_64 = GLOBAL_LOAD_DWORDX2 %2, 0, 0, implicit $exec
    $vgpr0 = V_MOV_B32_e32 %5.sub0, implicit $exec
    S_ENDPGM 0, implicit %0, implicit %1, implicit $vgpr0

...
