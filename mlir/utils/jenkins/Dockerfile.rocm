# This Dockerfile provides the enviornment for a ROCm installation of MLIR
FROM ubuntu:latest
MAINTAINER Zhuoran Yin <zhuoran.yin@amd.com>

ARG ROCM_DEB_REPO=http://repo.radeon.com/rocm/apt/4.5
ARG ROCM_BUILD_NAME=ubuntu
ARG ROCM_BUILD_NUM=main
ARG ROCM_PATH=/opt/rocm-4.5

ENV DEBIAN_FRONTEND noninteractive
ENV HOME /root/

RUN apt-get clean all

# --------------------- Section 1: ported from llvm-premerge-checks -----------------
# Keep this section up-to-date with the upstream
# https://github.com/google/llvm-premerge-checks/blob/master/containers/base-debian/Dockerfile
RUN echo 'install build dependencies'; \
    apt-get update ;\
    apt-get install -y --no-install-recommends \
        locales openssh-client gnupg ca-certificates  \
        zip wget git \
        gdb build-essential  \
        ninja-build \
        ccache \
        python3 python3-psutil \
        python3-pip python3-setuptools \
        swig python3-dev libedit-dev libncurses5-dev libxml2-dev liblzma-dev golang rsync jq;

RUN apt-get update ;\
    apt-get upgrade -y ;\
    apt-get install -y \
        clang-12 lld-12 clang-tidy-12 clang-format-12 \
        ;\
    apt-get clean

RUN echo 'configure locale'; \
    sed --in-place '/en_US.UTF-8/s/^#//' /etc/locale.gen ;\
    locale-gen ;\
    echo 'make python 3 default'; \
    rm -f /usr/bin/python && ln -s /usr/bin/python3 /usr/bin/python; \
    pip3 install wheel

# Configure locale
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Install python dependencies for the scripts. ADD will check contentents of a file for changes changed.
# TODO: that should be done during the build as it will pull this repo anyway and will have latest version.
ADD "https://raw.githubusercontent.com/google/llvm-premerge-checks/master/scripts/requirements.txt" requirements.txt
RUN pip3 install -r requirements.txt

# Needed to output performance tests
RUN pip3 install pandas numpy scipy jinja2

RUN ln -s /usr/bin/clang-12 /usr/bin/clang;\
    ln -s /usr/bin/clang++-12 /usr/bin/clang++;\
    ln -s /usr/bin/clang-tidy-12 /usr/bin/clang-tidy;\
    ln -s /usr/bin/clang-tidy-diff-12.py /usr/bin/clang-tidy-diff;\
    ln -s /usr/bin/clang-format-12 /usr/bin/clang-format;\
    ln -s /usr/bin/git-clang-format-12 /usr/bin/git-clang-format;\
    ln -s /usr/bin/clang-format-diff-12 /usr/bin/clang-format-diff;\
    ln -s /usr/bin/lld-12 /usr/bin/lld;\
    ln -s /usr/bin/llvm-symbolizer-12 /usr/bin/llvm-symbolizer

# --------------------- Section 2: MIOpen dialect setups -----------------

RUN apt-get update && apt-get install -y --no-install-recommends \
  apt-utils \
  apt-transport-https \
  curl  \
  libnuma-dev \
  software-properties-common

# Add ROCm build distribution
RUN wget --no-check-certificate -qO - http://repo.radeon.com/rocm/rocm.gpg.key 2>/dev/null | apt-key add -
RUN echo "deb [arch=amd64] $ROCM_DEB_REPO $ROCM_BUILD_NAME $ROCM_BUILD_NUM" > /etc/apt/sources.list.d/rocm.list

# Install cmake distribution
RUN wget --no-check-certificate -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
RUN apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'

# Note instead of installing the latest, we should always manually bump cmake version when necessary.
# This make sure that we don't accidentally use newer cmake features incompatible with our client.
RUN apt-get update && apt-get install -y --no-install-recommends \
  rocm-dev \
  rocminfo \
  rocprofiler-dev \
  rocblas \
  libelf1 \
  sudo \
  vim \
  kmod \
  file \
  cmake-data=3.21.3-0kitware1ubuntu20.04.1 \
  cmake=3.21.3-0kitware1ubuntu20.04.1 \
  libsqlite3-dev \
  parallel \
  python3-venv  && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Copy rocm_agent_enumerator. (Refer to MLIR issue#326)
RUN git clone https://github.com/RadeonOpenCompute/rocminfo.git && \
    cp rocminfo/rocm_agent_enumerator /opt/rocm/bin && \
    rm -rf rocminfo
