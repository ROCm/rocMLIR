// ON CHANGING THESE, ALSO CHANGE Jenkinsfile.downstream
void buildProject(String target, String cmakeOpts) {
    cmakeBuild generator: 'Ninja',\
        buildDir: 'build',\
        buildType: 'RelWithDebInfo',\
        installation: 'InSearchPath',\
        steps: [[args: target]],\
        cmakeArgs: "-DMLIR_MIOPEN_DRIVER_ENABLED=1 $cmakeOpts"
}

void getAndBuildMIOpen(String prefixOpt, String cmakeOpts) {
    git branch: 'develop', poll: false,\
        url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
    cmake arguments: "-P install_deps.cmake --minimum ${prefixOpt}",\
        installation: "InSearchPath"
    sh '[ ! -d build ] || rm -rf build'
    cmakeBuild generator: 'Unix Makefiles',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                     -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                     ${cmakeOpts}
                     """
    sh 'cd build; make -j $(nproc) MIOpenDriver'
}

void showEnv() {
    sh 'hostname'
    sh 'cat /etc/os-release'
    sh '/opt/rocm/bin/rocm-smi'
}

String dockerArgs() {
    return '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
}

String dockerImage() {
    return 'rocm/mlir:rocm4.1-latest'
}

void preMergeCheck() {
    sh '''
    if [ ! -f ./build/compile_commands.json ];  then
      echo "No compile commands, bailing."
      exit 1
    fi
    if [ ! -f ./compile_commands.json ]; then
      ln -s build/compile_commands.json compile_commands.json
    fi
    '''
    sh 'python3 ./mlir/utils/jenkins/static-checks/premerge-checks.py'
}

void testMIOpenDriver(String dtype, String xdlops, String layout, String direction, String tuning) {
    echo "Config is (${dtype}, ${layout}, xdlops=${xdlops}, dir=${direction}, tuning=${tuning})"
    sh 'ldconfig'
    dir('MIOpen/build/') {
        sh """
        bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh \
        --layout ${layout} \
        --direction ${direction} \
        --dtype ${dtype} \
        ${xdlops == '1' ? '--xdlops' : '--no-xdlops'} \
        ${tuning == '1' ? '--tuning' : '--no-tuning'} \
        < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
    }
}

void postProcessPerfRes() {
    publishHTML (target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'build',
        reportFiles: 'MLIR_Performance_Changes.html,MLIR_vs_MIOpen.html',
        reportName: 'Performance report'
    ])

    plot csvFileName: 'plot-nightly-perf-results-000001.csv',\
        csvSeries: [[file: 'build/mlir_vs_miopen_perf_for_plot.csv', displayTableFlag: false]],\
        title: 'Test performance summary',\
        yaxis: 'TFlops',\
        style: 'line',\
        group: 'Performance plots'

    // Save results for future comparison
    archiveArtifacts artifacts: 'build/mlir_*.csv,build/perf-run-date', onlyIfSuccessful: true
}

pipeline {
    agent none
    parameters {
        // Below should be set statically by Jenkins job
        booleanParam(name: 'nightly', defaultValue: params.nightly ?: false,
                     description: 'Run extra nightly-only tests')
        booleanParam(name: 'canXdlops', defaultValue: params.canXdlops ?: true,
                     description: 'Can this CI instance use xdlops (no for public server)')

        // Each below control whether to run a individual stage from parallel run
        // They default to true but deverloper can toggle them for debugging purpose
        booleanParam(name: 'sharedLib', defaultValue: true,
                     description: 'Run the shared library stage')
        booleanParam(name: 'staticLib', defaultValue: true,
                     description: 'Run the static library stage')
        booleanParam(name: 'perfTest', defaultValue: true,
                     description: 'Run the performance testing stage')
    }
    stages {
        stage("Builds and tests") {
            parallel {
                stage("Shared library") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.sharedLib;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "${params.canXdlops ? 'gfx908' : 'rocm' }"
                            alwaysPull true
                        }
                    }
                    stages {
                        stage('Environment') {
                            steps {
                                showEnv()
                            }
                        }
                        // UPDATE Jenkinsfile.downstream ON CHANGES
                        stage("Shared library build and test") {
                            steps {
                                buildProject('check-mlir check-mlir-miopen', """
                                  -DMLIR_MIOPEN_DRIVER_PR_E2E_TEST_ENABLED=${params.nightly ? '0' : '1'}
                                  -DMLIR_MIOPEN_DRIVER_XDLOPS_TEST_ENABLED=${params.canXdlops ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_TEST_GPU_VALIDATION=1
                                  -DCMAKE_EXPORT_COMPILE_COMMANDS=1
                                """)
                            }
                        }
                        stage('Static Tests') {
                            when { allOf {
                                equals expected: false, actual: params.nightly;
                                // Avoid this test running twice
                                equals expected: false, actual: params.canXdlops
                            } }
                            steps {
                                preMergeCheck()
                            }
                        }
                        stage("Random E2E test") {
                            when {
                                equals expected: true, actual: params.nightly
                            }
                            steps {
                                buildProject('check-mlir-miopen',
                                             """-DMLIR_MIOPEN_DRIVER_RANDOM_DATA_SEED=1
                                             -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=0
                                             -DMLIR_MIOPEN_DRIVER_TEST_GPU_VALIDATION=0""")
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }

                stage("Static Library") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.staticLib;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label 'rocm'
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="/opt/rocm/llvm/bin:$PATH"
                    }
                    stages {
                        stage("Igemm build") {
                            steps {
                                checkout scm
                                buildProject('libMLIRMIOpen',
                                             '-DBUILD_FAT_LIBMLIRMIOPEN=ON')
                            }
                        }

                        stage("Install libMLIRMIOpen") {
                            when { allOf {
                                equals expected: true, actual: params.nightly;
                                equals expected: true, actual: params.canXdlops
                            }}
                            steps {
                                cmake arguments: '--install . --component libMLIRMIOpen --prefix /opt/rocm',\
                                installation: 'InSearchPath', workingDir: 'build'
                            }
                        }
                        stage("Build and stash MIOpen") {
                            when { allOf {
                                equals expected: true, actual: params.nightly;
                                equals expected: true, actual: params.canXdlops
                            }}
                            steps {
                                dir('MIOpen') {
                                        getAndBuildMIOpen('', '''-DMIOPEN_USE_MLIR=On
                                        -DBUILD_DEV=On
                                        -DMIOPEN_TEST_FLAGS=\'--verbose --disable-verification-cache\'
                                        ''')
                                }
                                stash name:"MIOpen-test-requisites",\
                                    includes: """
                                    MIOpen/build/**,\
                                    mlir/utils/jenkins/miopen-tests/**\
                                    """
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }

                stage("Performance testing") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.perfTest;
                        equals expected: true, actual: params.nightly;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "${params.canXdlops ? 'gfx908' : 'rocm' }"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="/opt/rocm/llvm/bin:$PATH"
                    }
                    stages {
                        stage("Environment") {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Build MIOpen with HIP") {
                            steps {
                                dir('MIOpen') {
                                    sh 'mkdir MIOpenInstallDir'
                                    getAndBuildMIOpen('--prefix ./MIOpenDeps',
                                                      '''-DMIOPEN_BACKEND=HIP
                                    -DCMAKE_PREFIX_PATH="${WORKSPACE}/MIOpen/MIOpenDeps"
                                    -DCMAKE_INSTALL_PREFIX=${WORKSPACE}/MIOpen/MIOpenInstallDir
                                    ''')
                                    sh 'cd build; make -j $(nproc)'
                                    sh 'cd build; make install'
                                }
                            }
                        }
                        stage("Build MLIR") {
                            steps {
                                buildProject('mlir-miopen-driver mlir-rocm-runner ci-performance-scripts', '')
                            }
                        }
                        stage('Copy earlier performance results') {
                            steps {
                                copyArtifacts filter: 'build/*.csv',\
                                                optional: true,\
                                                flatten: true,\
                                                projectName: "/${JOB_NAME}",\
                                                selector: lastSuccessful(),\
                                                target: 'build/oldData'
                            }
                        }
                        stage('Performance Test') {
                            steps {
                                sh 'ldconfig'
                                dir('build') {
                                    sh 'date --utc +%Y-%m-%d > perf-run-date'
                                    // Run MLIR perf benchmarks
                                    sh 'python3 ./bin/MIOpenDriver.py'
                                    // Generate report on performance changes
                                    sh 'python3 ./bin/perfRegressionReport.py'
                                }
                                postProcessPerfRes()
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
            }
        }

        stage("MIOpen resnet50 config test") {
            when { allOf {
                equals expected: true, actual: params.nightly;
                equals expected: true, actual: params.canXdlops;
                equals expected: true, actual: params.staticLib;
            }}
            matrix {
                options {
                    skipDefaultCheckout()
                }
                axes {
                    axis {
                        name 'DTYPE'
                        values 'fp16', 'fp32'
                    }
                    axis {
                        name 'XDLOPS'
                        values '1', '0'
                    }
                    axis {
                        name 'LAYOUT'
                        values 'NCHW', 'NHWC'
                    }
                    axis {
                        name 'DIRECTION'
                        values '1', '2', '4'
                    }
                }
                stages {
                    stage('Test MIOpen') {
                        agent {
                            docker {
                                image dockerImage()
                                args dockerArgs()
                                label "${XDLOPS == '1' ? 'gfx908' : 'gfx908'}"
                                alwaysPull true
                            }
                        }
                        stages {
                            stage('Environment') {
                                steps {
                                    echo "Config is ($DTYPE, $LAYOUT, xdlops=$XDLOPS, dir=$DIRECTION)"
                                    showEnv()
                                }
                            }
                            stage("Copy MIOpen test environment") {
                                steps {
                                    unstash name: "MIOpen-test-requisites"
                                }
                            }
                            stage("Test MIOpen config") {
                                environment {
                                    // Make libMIOpen.so accessible to the test driver
                                    LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                                }
                                steps {
                                    testMIOpenDriver('$DTYPE', '$XDLOPS', '$LAYOUT', '$DIRECTION', '0')
                                    testMIOpenDriver('$DTYPE', '$XDLOPS', '$LAYOUT', '$DIRECTION', '1')
                                }
                            }
                        }
                        post {
                            always {
                                cleanWs()
                            }
                        }
                    }
                }
            }
        }
    }
}
