// ON CHANGING THESE, ALSO CHANGE Jenkinsfile.downstream
void buildProject(String target, String cmakeOpts) {
    timeout(time: 60, activity: true, unit: 'MINUTES') {
        cmakeBuild generator: 'Ninja',\
            buildDir: 'build',\
            buildType: 'RelWithDebInfo',\
            installation: 'InSearchPath',\
            steps: [[args: target]],\
            cmakeArgs: "-DROCMLIR_DRIVER_ENABLED=1 $cmakeOpts"
    }
}

void buildMIOpen(String cmakeOpts) {
    sh '[ ! -d build ] || rm -rf build'
    cmakeBuild generator: 'Unix Makefiles',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                     -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                     ${cmakeOpts}
                     """
    sh 'cd build; make -j $(nproc) MIOpenDriver'
}

void getAndBuildMIOpen(String prefixOpt, String cmakeOpts) {
    git branch: params.MIOpenBranch, poll: false,\
        url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
    buildMIOpen(cmakeOpts)
}

void buildMIGraphX(String cmakeOpts) {
    sh '[ ! -d build ] || rm -rf build'
    cmakeBuild generator: 'Unix Makefiles',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        cmakeArgs: "${cmakeOpts}"
    sh 'cd build; make -j $(nproc)'
}

void getAndBuildMIGraphX(String cmakeOpts) {
    git branch: params.MIGraphXBranch, poll: false,\
        url: 'https://github.com/ROCmSoftwarePlatform/AMDMIGraphX.git'
    buildMIGraphX(cmakeOpts)
}

void buildMIOpenWithMLIR() {
    buildProject('librockCompiler',
                    '-DBUILD_FAT_LIBROCKCOMPILER=ON')
    cmake arguments: "--install . --component librockCompiler --prefix ${WORKSPACE}/MIOpenDeps",\
        installation: 'InSearchPath', workingDir: 'build'

    dir('MIOpen') {
        git branch: params.MIOpenBranch, poll: false,\
            url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
        // Note: setting cxxflags here works around https://github.com/ROCmSoftwarePlatform/MIOpen/issues/1604
        buildMIOpen("""-DMIOPEN_USE_MLIR=On
                       -DMIOPEN_USE_COMPOSABLEKERNEL=Off
                       -DMIOPEN_BACKEND=HIP
                       -DCMAKE_PREFIX_PATH=${WORKSPACE}/MIOpenDeps
                       -DCMAKE_CXX_FLAGS="-isystem ${WORKSPACE}/MIOpenDeps/include"
                       -DMIOPEN_USER_DB_PATH=${WORKSPACE}/MIOpen/build/MIOpenUserDB
                       -DMIOPEN_TEST_FLAGS="--verbose --disable-verification-cache"
                       """)
    }
}

void showEnv() {
    echo "$env.NODE_NAME"
    sh 'cat /etc/os-release'
    sh 'ulimit -a'
    // Ignore rocm-smi failures in ixt-sjc2-05
    sh '/opt/rocm/bin/rocm-smi || true'
    sh '/opt/rocm/bin/rocm_agent_enumerator'
    sh 'id'
}

String dockerArgs() {
    return "--device=/dev/kfd --device=/dev/dri --group-add video --group-add render -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro"
}

String dockerImage() {
    // If this is being changed please change Dockerfile.migraphx-ci's base image as well
    return 'pcf0/mlir:rocm5.4.2'
}

String dockerImageCIMIGraphX() {
    return 'rocm/mlir-migraphx-ci:rocm5.3-latest'
}

void preMergeCheck(String codepath) {
    // Only do static check on mfma codepath during PR CI
    if ( (params.nightly == false) && (codepath == "mfma") ) {
        echo "Performing Static Test (preMergeCheck)"
        sh '''
        if [ ! -f ./build/compile_commands.json ];  then
          echo "No compile commands, bailing."
          exit 1
        fi
        if [ ! -f ./compile_commands.json ]; then
          ln -s build/compile_commands.json compile_commands.json
        fi
        '''
        sh 'python3 ./mlir/utils/jenkins/static-checks/premerge-checks.py'
    } else {
        echo "Static Test step skipped"
    }
}

void testMIOpenDriver(boolean testInt8, boolean tuning, String configFilename) {
    timeout(time: 60, activity: true, unit: 'MINUTES') {
        dir('MIOpen/build/') {
            sh """
            bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh --test-all\
            ${tuning ? '--tuning' : '--no-tuning'} \
            < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/${configFilename}"""
            if (testInt8) {
                sh """
                bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh --test-fwd\
                --dtype int8\
                ${tuning ? '--tuning' : '--no-tuning'} \
                < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/${configFilename}"""
            }
        }
    }
}

void postProcessPerfRes(String chip) {
    publishHTML (target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'build',
        reportFiles: "${chip}_MLIR_Performance_Changes.html,${chip}_MLIR_vs_MIOpen.html,${chip}_MLIR_Performance_Changes_Gemm.html,${chip}_MLIR_vs_rocBLAS.html",
        reportName: "Performance report for ${chip}"
    ])

    plot csvFileName: "${chip}_plot-nightly-perf-results-000001.csv",\
        csvSeries: [[file: "build/${chip}_mlir_vs_miopen_perf_for_plot.csv", displayTableFlag: false]],\
        title: "Test performance summary ${chip}, Conv",\
        yaxis: 'TFlops',\
        style: 'line',\
        group: 'Performance plots'

    plot csvFileName: "${chip}_plot-nightly-perf-results-gemm-000001.csv",\
        csvSeries: [[file: "build/${chip}_mlir_vs_rocblas_perf_for_plot.csv", displayTableFlag: false]],\
        title: "Test performance summary ${chip}, GEMM",\
        yaxis: 'TFlops',\
        style: 'line',\
        group: 'Performance plots'

    // Save results for future comparison
    archiveArtifacts artifacts: 'build/*_mlir_*.csv,build/perf-run-date', onlyIfSuccessful: true
}

//makes sure multiple builds are not triggered for branch indexing
def resetBuild() {
    if (currentBuild.getPreviousBuild() == null
        || currentBuild.getPreviousBuild().getBuildCauses().toString().contains('BranchIndexingCause')) {
        def buildNumber = BUILD_NUMBER as int;
        if (buildNumber > 1)
            milestone(buildNumber - 1);
        milestone(buildNumber)
    }
}

void setHeartbeat() {
    script {
        System.setProperty("org.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL", "86400");
    }
}

String getLabelFromCodepath(String codepath) {
    echo "codepath is ${codepath}"
    if (codepath == "mfma") {
        label = 'mlir && (gfx908 || gfx90a)'
    } else if (codepath == "navi21") {
        // For non-performance related testing, use both workstations (gfx1030w)
        // and server nodes (gfx1030)
        label = 'mlir && ( gfx1030w || gfx1030 )'
    } else if (codepath == "vanilla"){
        label = 'mlir && gfx906'
    } else {
        echo "${codepath} is not supported"
        label = 'wrongLabel'
    }
    echo "label is ${label}"
    return label
}

String getLabelFromChip(String chip) {
    switch (chip) {
        case "gfx906":
            return getLabelFromCodepath("vanilla")
        case "gfx908":
            return "mlir && gfx908"
        case "gfx90a":
            return "mlir && gfx90a"
        case "gfx1030":
            // For [Tune MLIR Kernels] and [Performance report] stages,
            // fix the vm-5 workstation for testing
            return "mlir && vm-5"
    }
}

def rebootNode() {
    build job: 'maintenance/reboot-slaves', propagate: false , parameters: [string(name: 'server', value: "${env.NODE_NAME}"),]
}

void tuneMLIRKernels() {
    dir('MIOpen/build/') {
        sh """
            bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh --test-all --tuning\
            < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
        sh """
            bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh --test-fwd --dtype int8 --tuning\
            < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
        sh 'ls -l MIOpenUserDB'
    }
}

void build_fixedE2ETests(String codepath) {
    // Limit the number of lit workers to 8 for navi21 codepath on nightly CI as a workaround for issue#702
    limit_lit_workers = false
    if ( (codepath == 'navi21') && (params.nightly == true) ) {
        limit_lit_workers = true
    }
    buildProject('check-mlir-build-only check-rocmlir-build-only', """
              -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=${params.nightly ? '0' : '1'}
              -DROCMLIR_DRIVER_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
              -DROCK_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
              -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=1
              -DLLVM_LIT_ARGS='-v --time-tests ${ limit_lit_workers ? '-j 8' : ' ' }'
              -DCMAKE_EXPORT_COMPILE_COMMANDS=1
             """)
}

void check_randomE2ETests(String codepath) {
    // Limit the number of lit workers to 8 for navi21 codepath on nightly CI as a workaround for issue#702
    buildProject('check-rocmlir', """
              -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=0
              -DROCMLIR_DRIVER_E2E_TEST_ENABLED=1
              -DROCK_E2E_TEST_ENABLED=1
              -DROCMLIR_DRIVER_RANDOM_DATA_SEED=1
              -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=0
              -DLLVM_LIT_ARGS='-v --time-tests ${ codepath == 'navi21' ? '-j 8' : ' ' }'
              -DCMAKE_EXPORT_COMPILE_COMMANDS=1
             """)
}

void parameterSweep(String CONFIG, String codepath) {
    if (codepath == "navi21") {
        timeout(time: 60, activity: true, unit: 'MINUTES') {
            dir('build') {
                sh """python3 ./bin/parameterSweeps.py -j 8 ${CONFIG}"""
            }
        }
    } else {
        timeout(time: 60, activity: true, unit: 'MINUTES') {
            dir('build') {
                sh """python3 ./bin/parameterSweeps.py ${CONFIG}"""
            }
        }
    }
}

boolean shouldRunFromCodepath(String codepath) {
    // Run vanilla on public CI
    if ((codepath == "vanilla") && (params.canXdlops == false)) {
        return true
    }
    // Run mfma on private CI
    if ((codepath == "mfma") && params.canXdlops) {
        return true
    }
    // Run navi21 on private CI only if it is not disabled
    if (params.canXdlops && (params.disableNavi21 == false) && (codepath == "navi21")) {
        return true
    }
    return false
}

boolean shouldRunFromChip(String chip) {
    switch (chip) {
        case "gfx906":
            return shouldRunFromCodepath("vanilla")
        case "gfx908":
        case "gfx90a":
            return shouldRunFromCodepath("mfma")
        case "gfx1030":
            return shouldRunFromCodepath("navi21")
    }
}

void archivePerfDB() {
    // Note: add additional architectures here
    dir ('MIOpen/build/MIOpenUserDB') {
        unstash name: "MLIR-PerfDB-${params.canXdlops ? 'gfx908' : 'gfx906'}"
        unstash name: "MLIR-PerfDB-${params.canXdlops ? 'gfx90a' : 'gfx906'}"
        if (params.disableNavi21 == false)
            unstash name: "MLIR-PerfDB-${params.canXdlops ? 'gfx1030' : 'gfx906'}"
        sh 'date --utc +%Y-%m-%d >tuning-date'
    }
    archiveArtifacts artifacts: 'MIOpen/build/MIOpenUserDB/**',\
    onlyIfSuccessful: true
}

pipeline {
    agent none
    parameters {
        // Below should be set statically by Jenkins job
        booleanParam(name: 'nightly', defaultValue: params.nightly ? true : false,
                     description: 'Run extra nightly-only tests')
        booleanParam(name: 'canXdlops', defaultValue: params.canXdlops == false ? false : true,
                     description: 'Can this CI instance use xdlops (no for public server)')
        booleanParam(name: 'weekly', defaultValue: params.weekly ? true : false,
                     description: 'Run weekly-only jobs')
        string(name: 'MIOpenBranch', defaultValue: 'develop',
               description: 'The MIOpen branch to be used with the job')
        string(name: 'MIGraphXBranch', defaultValue: 'develop',
               description: 'The MIGraphX branch/commit to verify against.')


        // Each below control whether to run a individual stage from parallel run
        // They default to true or empty but deverloper can toggle them for debugging purpose
        booleanParam(name: 'sharedLib', defaultValue: true,
                     description: 'Run the shared library stage')
        booleanParam(name: 'staticLib', defaultValue: true,
                     description: 'Run the static library stage')
        booleanParam(name: 'perfTest', defaultValue: true,
                     description: 'Run the performance testing stage')
        booleanParam(name: 'checkMIGraphX', defaultValue: false,
                     description: 'Run the MIGraphX integration tests')

        // choose the codepath for testing
        choice(name: 'codepath',
               choices: ['default', 'mfma', 'navi21', 'vanilla'],
               description: 'Choose the codepath to test')
        // option to disable navi21 cells in case nodes are offline
        booleanParam(name: 'disableNavi21', defaultValue: false,
                     description: 'Disable testing on Navi21')
    }
    stages {
        stage("Set System Property") {
            steps {
                setHeartbeat()
            }
        }
        stage("Kill old PR builds") {
            when {
                equals expected: false, actual: params.weekly;
                equals expected: false, actual: params.nightly;
            }
            steps {
                resetBuild()
            }
        }
        stage("Build and Test") {
            when {
                beforeAgent true
                // Skip this part of testing as early as possible
                equals expected: false, actual: params.weekly;
            }
            matrix {
                axes {
                    axis {
                        name 'CODEPATH'
                        values 'vanilla', 'mfma', 'navi21'
                    }
                }
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label getLabelFromCodepath("${CODEPATH}")
                        alwaysPull true
                    }
                }
                when {
                    beforeAgent true
                    anyOf {
                        // When default codepath is selected, we test mfma and navi21 on private CI
                        // and vanilla on public CI
                        allOf {
                            equals expected: "default", actual: params.codepath;
                            expression { return shouldRunFromCodepath("$CODEPATH")}
                        }
                        // When a particular codepath is selected, we only test the codepath
                        // on private CI
                        allOf {
                            anyOf {
                                equals expected: "mfma", actual: params.codepath;
                                allOf {
                                    equals expected: "navi21", actual: params.codepath;
                                    equals expected: false, actual: params.disableNavi21;
                                }
                                equals expected: "vanilla", actual: params.codepath;
                            }
                            equals expected: "${CODEPATH}", actual: params.codepath;
                            equals expected: true, actual: params.canXdlops;
                        }
                    }
                }
                environment {
                    PATH="/opt/rocm/llvm/bin:$PATH"
                    HOME="${WORKSPACE}"
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "codepath is ${CODEPATH}"
                            showEnv()
                        }
                    }
                    stage("Shared Library: fixed E2E tests") {
                        when {
                            beforeAgent true;
                            equals expected: true, actual: params.sharedLib;
                        }
                        steps {
                            build_fixedE2ETests("${CODEPATH}")
                            preMergeCheck("${CODEPATH}")
                            sh 'cd build; ninja check-mlir check-rocmlir'
                        }
                    }
                    stage("Shared Library: random E2E tests") {
                        when {
                            beforeAgent true;
                            allOf {
                                equals expected: true, actual: params.sharedLib;
                                equals expected: true, actual: params.nightly
                            }
                        }
                        steps {
                            check_randomE2ETests("${CODEPATH}")
                        }
                    }
                    stage("Static Library: test librockCompiler with MIOpen") {
                        when {
                            beforeAgent true;
                            equals expected: true, actual: params.staticLib;
                            equals expected: false, actual: params.nightly;
                        }
                        environment {
                            // Make libMIOpen.so accessible to the test driver
                            LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                        }
                        steps {
                            sh 'rm build/CMakeCache.txt'
                            buildMIOpenWithMLIR()
                            testMIOpenDriver(/*testInt8=*/true, /*tuning=*/false, "selected-resnet50-miopen-configs")
                            testMIOpenDriver(/*testInt8=*/true, /*tuning=*/true, "selected-resnet50-miopen-configs")
                        }
                    }
                }
                post {
                    unsuccessful {
                        rebootNode()
                    }
                    always {
                        cleanWs()
                    }
                }
            }
        }
        stage ("Parameter sweeps") {
            when {
                beforeAgent true;
                equals expected: true, actual: params.weekly;
                equals expected: true, actual: params.sharedLib;
            }
            matrix {
                axes {
                    axis {
                        name 'CODEPATH'
                        values 'mfma', 'vanilla', 'navi21'
                    }
                }
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label getLabelFromCodepath("${CODEPATH}")
                        alwaysPull true
                    }
                }
                when {
                    beforeAgent true
                    expression { return shouldRunFromCodepath("$CODEPATH") }
                }
                environment {
                    HOME="${WORKSPACE}"
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "codepath is ${CODEPATH}"
                            showEnv()
                        }
                    }
                    stage("Prepare Performance Scripts") {
                        steps {
                            setHeartbeat()
                            buildProject('check-rocmlir-build-only ci-performance-scripts', '')
                        }
                    }
                    stage("Parameter Sweep") {
                        steps {
                            parameterSweep("conv_structure", "${CODEPATH}")
                            parameterSweep("perf_config", "${CODEPATH}")
                        }
                    }
                }
                post {
                    unsuccessful {
                        rebootNode()
                    }
                    always {
                        cleanWs()
                    }
                }
            }
        }
        stage ("Tune MLIR kernels") {
            when {
                beforeAgent true;
                equals expected: true, actual: params.weekly;
                equals expected: true, actual: params.staticLib;
            }
            matrix {
                axes {
                    axis {
                        name 'ARCH'
                        values 'gfx906', 'gfx908', 'gfx90a', 'gfx1030'
                    }
                }
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label getLabelFromChip("${ARCH}")
                        alwaysPull true
                    }
                }
                when {
                    beforeAgent true
                    expression { return shouldRunFromChip("${ARCH}") }
                }
                environment {
                    PATH="/opt/rocm/llvm/bin:$PATH"
                    HOME="${WORKSPACE}"
                }
                stages {
                    stage("Set System Property on Lockhart nodes") {
                        when {
                            equals expected: "gfx90a", actual: "${ARCH}"
                        }
                        steps {
                            setHeartbeat()
                        }
                    }
                    stage("Environment") {
                        steps {
                            echo "ARCH = ${ARCH}"
                            showEnv()
                        }
                    }
                    stage("Tune Gemm") {
                        steps {
                            buildProject('check-rocmlir-build-only ci-performance-scripts', '')
                            dir('build') {
                                sh 'python3 ./bin/tuningRunner.py --operation gemm --config="-g 1 -m 1 -k 1 -n 1 -t f32 -transA 0 -transB 0" -d'
                            }
                            sh 'rm build/CMakeCache.txt'
                        }
                    }
                    stage("Build MIOpen with librockCompiler") {
                        steps {
                            buildMIOpenWithMLIR()
                        }
                    }
                    stage("Tune MLIR kernels") {
                        environment {
                            // Make libMIOpen.so accessible to the test driver
                            LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                        }
                        steps {
                            tuneMLIRKernels()
                            // Save user database for nightly jobs
                            dir ('MIOpen/build/MIOpenUserDB') {
                                stash name: "MLIR-PerfDB-${ARCH}", includes: "**"
                            }
                        }
                    }
                }
                post {
                    always {
                        cleanWs()
                    }
                }
            }
        }
        stage("Archive weekly tuning perfDB") {
            when {
                beforeAgent true;
                equals expected: true, actual: params.weekly;
                equals expected: true, actual: params.staticLib;
            }
            agent any
            options {
                skipDefaultCheckout()
            }
            steps {
                archivePerfDB()
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
        stage("MIOpen Resnet50 Config Test") {
            when {
                allOf {
                    equals expected: true, actual: params.nightly;
                    equals expected: true, actual: params.staticLib;
                }
            }
            matrix {
                axes {
                    axis {
                        name 'CODEPATH'
                        values 'mfma', 'vanilla', 'navi21'
                    }
                }
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label getLabelFromCodepath("${CODEPATH}")
                        alwaysPull true
                    }
                }
                when {
                    beforeAgent true
                    expression { return shouldRunFromCodepath("${CODEPATH}") }
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "codepath is ${CODEPATH}"
                            showEnv()
                        }
                    }
                    stage("Build MIOpen with librockCompiler") {
                        environment {
                            PATH="/opt/rocm/llvm/bin:$PATH"
                            HOME="${WORKSPACE}"
                        }
                        steps {
                            buildMIOpenWithMLIR()
                        }
                    }
                    stage("Copy perfdb") {
                        steps {
                            copyArtifacts filter: 'MIOpen/build/MIOpenUserDB/**',\
                            optional: true,\
                            flatten: true,\
                            projectName: "/MLIR/mlir-weekly",\
                            selector: lastSuccessful(),\
                            target: 'MIOpen/build/MIOpenUserDB'
                            sh 'ls MIOpen/build/MIOpenUserDB'
                            sh 'cat MIOpen/build/MIOpenUserDB/tuning-date'
                        }
                    }
                    stage("Test MIOpen config") {
                        environment {
                            // Make libMIOpen.so accessible to the test driver
                            LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                            HOME="${WORKSPACE}"
                        }
                        steps {
                            // Test with perfDb
                            testMIOpenDriver(/*testInt8=*/false, /*tuning=*/false, "resnet50-miopen-configs")
                            // Test without perfDb
                            sh 'rm -rf ${WORKSPACE}/MIOpen/build/MIOpenUserDB'
                            testMIOpenDriver(/*testInt8=*/false, /*tuning=*/false, "resnet50-miopen-configs")
                        }
                    }
                }
                post {
                    unsuccessful {
                        rebootNode()
                    }
                    always {
                        cleanWs()
                    }
                }
            }
        }
        // FIXME: run perf tests on both gfx90a and gfx908
        stage("Benchmark and Report Performance") {
            matrix {
                axes {
                    axis {
                        name 'CHIP'
                        values 'gfx906', 'gfx908', 'gfx90a', 'gfx1030'
                    }
                }
                when {
                    beforeAgent true;
                    equals expected: true, actual: params.perfTest;
                    equals expected: true, actual: params.nightly;
                    expression { return shouldRunFromChip("${CHIP}")}
                }
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label getLabelFromChip("${CHIP}")
                        alwaysPull true
                    }
                }
                environment {
                    // Make libMIOpen.so accessible to the test driver
                    PATH="/opt/rocm/llvm/bin:$PATH"
                    LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                    HOME="${WORKSPACE}"
                }
                stages {
                    stage("Environment") {
                        steps {
                            echo "chip is ${CHIP}"
                            showEnv()
                        }
                    }
                    stage("Build MLIR with librockCompiler") {
                        steps {
                            buildMIOpenWithMLIR()
                        }
                    }
                    stage("Copy tuning database") {
                        steps {
                            copyArtifacts filter: 'MIOpen/build/MIOpenUserDB/**',\
                                optional: true,\
                                flatten: true,\
                                projectName: "/MLIR/mlir-weekly",\
                                selector: lastSuccessful(),\
                                target: 'MIOpen/build/MIOpenUserDB'
                                sh 'ls MIOpen/build/MIOpenUserDB'
                                sh 'cat MIOpen/build/MIOpenUserDB/tuning-date'
                        }
                    }
                    stage("Performance Test: Tuned vs Untuned") {
                        steps {
                            buildProject('ci-performance-scripts', '')
                            dir('build') {
                                sh 'python3 ./bin/perfRunner.py --miopen_use_tuned_mlir'
                                sh 'rm -rf ${WORKSPACE}/MIOpen/build/MIOpenUserDB'
                                sh 'python3 ./bin/perfRunner.py --miopen_use_untuned_mlir'
                            }
                        }
                    }
                    stage("Build MIOpen with HIP") {
                        steps {
                            sh 'rm -rf MIOpen'
                            dir('MIOpen') {
                                getAndBuildMIOpen("--prefix ${WORKSPACE}/MIOpen/MIOpenDeps", '''
                                    -DMIOPEN_BACKEND=HIP -DMIOPEN_USE_MLIR=OFF
                                    -DMIOPEN_USE_COMPOSABLEKERNEL=Off
                                    -DCMAKE_PREFIX_PATH="${WORKSPACE}/MIOpen/MIOpenDeps"
                                    -DCMAKE_INSTALL_PREFIX=${WORKSPACE}/MIOpen/build/MIOpenInstallDir
                                    ''')
                                sh 'cd build; make -j $(nproc)'
                                sh 'cd build; make install'
                            }
                        }
                    }
                    stage("Build MLIR") {
                        steps {
                            // Clean up build settings to disable static library and allow
                            // ROCm testing
                            sh 'rm build/CMakeCache.txt'
                            buildProject('check-rocmlir-build-only ci-performance-scripts rocblas-benchmark-driver', '')
                        }
                    }
                    stage("Test MLIR vs MIOpen") {
                        steps {
                            dir('build') {
                                sh 'date --utc +%Y-%m-%d > perf-run-date'
                                // Run MLIR perf benchmarks
                                sh 'python3 ./bin/perfRunner.py'
                                sh 'python3 ./bin/perfRunner.py --op=gemm --batch_both --configs_file=../mlir/utils/performance/bert-configs'
                            }
                        }
                    }
                    stage("Copy earlier performance results") {
                        steps {
                            copyArtifacts filter: 'build/*.csv,build/perf-run-date',\
                                optional: true,\
                                flatten: true,\
                                projectName: "/${JOB_NAME}",\
                                selector: lastSuccessful(),\
                                target: 'build/oldData'
                        }
                    }
                    stage("Create performance reports") {
                        steps {
                            dir('build') {
                                sh 'ls -l'
                                sh 'python3 ./bin/createPerformanceReports.py ${CHIP}'
                                sh 'python3 ./bin/createGemmPerformanceReports.py ${CHIP}'
                                sh 'python3 ./bin/perfRegressionReport.py ${CHIP}'
                                sh 'python3 ./bin/perfRegressionReport.py ${CHIP} ./oldData/${CHIP}_mlir_vs_rocblas_perf.csv ./${CHIP}_mlir_vs_rocblas_perf.csv'
                            }
                            postProcessPerfRes("${CHIP}")
                        }
                    }
                }
                post {
                    unsuccessful {
                        rebootNode()
                    }
                    always {
                        cleanWs()
                    }
                }
            }
        }
        stage ("MIGraphX") {
            when {
                beforeAgent true;
                anyOf {
                    equals expected: true, actual: params.checkMIGraphX;
                    equals expected: true, actual: params.nightly;
                }
            }
            matrix {
                axes {
                    axis {
                        name 'CODEPATH'
                        values 'mfma', 'vanilla', 'navi21'
                    }
                }
                agent {
                    docker {
                        image dockerImageCIMIGraphX()
                        args dockerArgs()
                        label getLabelFromCodepath("${CODEPATH}")
                        alwaysPull true
                    }
                }
                when {
                    beforeAgent true
                    expression { return shouldRunFromCodepath("$CODEPATH") }
                }
                environment {
                    HOME="${WORKSPACE}"
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "codepath is ${CODEPATH}"
                            showEnv()
                        }
                    }
                    stage("Install MIGraphX Dependencies") {
                        steps {
                            // Package and install current checkout of rocMLIR as MIGraphX dependency.
                            sh 'cget -p ${WORKSPACE}/MIGraphXDeps install ${WORKSPACE} -DBUILD_MIXR_TARGET=On -DLLVM_ENABLE_ZSTD=Off -DLLVM_ENABLE_THREADS=Off'
                        }
                    }
                    stage("Build MIGraphX with MLIR") {
                        steps {
                            sh 'rm -rf MIGraphX'
                            dir('MIGraphX') {
                                getAndBuildMIGraphX("-DCMAKE_PREFIX_PATH='/MIGraphXDeps;${WORKSPACE}/MIGraphXDeps' -DMIGRAPHX_ENABLE_MLIR=On -DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++")
                            }
                        }
                    }
                    stage("Verify MIGraphX with MLIR") {
                        steps {
                            dir('MIGraphX/build') {
                                // Verify MLIR unit tests
                                sh 'make -j$(nproc) test_gpu_mlir'
                                sh 'ctest -R test_gpu_mlir'
                                // Verify ResNet50
                                sh './bin/driver verify --onnx /MIGraphXDeps/resnet50-v1-7.onnx'
                            }
                        }
                    }
                }
                post {
                    unsuccessful {
                        rebootNode()
                    }
                    always {
                        cleanWs()
                    }
                }
            }
        }
    }
}
