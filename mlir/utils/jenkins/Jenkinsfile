// ON CHANGING THESE, ALSO CHANGE Jenkinsfile.downstream
void buildProject(String target, String cmakeOpts) {
    cmakeBuild generator: 'Ninja',\
        buildDir: 'build',\
        buildType: 'RelWithDebInfo',\
        installation: 'InSearchPath',\
        steps: [[args: target]],\
        cmakeArgs: "-DMLIR_MIOPEN_DRIVER_ENABLED=1 $cmakeOpts"
}

void buildMIOpen(String cmakeOpts) {
    sh '[ ! -d build ] || rm -rf build'
    cmakeBuild generator: 'Unix Makefiles',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                     -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                     ${cmakeOpts}
                     """
    sh 'cd build; make -j $(nproc) MIOpenDriver'
}

void getAndBuildMIOpen(String prefixOpt, String cmakeOpts) {
    git branch: 'mlir-enlarge-tuning-search-space-bwd', poll: false,\
        url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
    cmake arguments: "-P install_deps.cmake --minimum ${prefixOpt}",\
        installation: "InSearchPath"
    buildMIOpen(cmakeOpts)
}

void buildMIOpenWithMLIR() {
    buildProject('libMLIRMIOpen',
                    '-DBUILD_FAT_LIBMLIRMIOPEN=ON')
    cmake arguments: "--install . --component libMLIRMIOpen --prefix ${WORKSPACE}/MIOpenDeps",\
        installation: 'InSearchPath', workingDir: 'build'

    dir('MIOpen') {
        git branch: 'mlir-enlarge-tuning-search-space-bwd', poll: false,\
            url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
        sh 'sed -i "/ROCmSoftwarePlatform\\/llvm-project-mlir/d" ./requirements.txt'
        cmake arguments: "-P install_deps.cmake --minimum --prefix ${WORKSPACE}/MIOpenDeps",\
                installation: "InSearchPath"
        buildMIOpen('''-DMIOPEN_USE_MLIR=On
                        -DMIOPEN_BACKEND=HIP
                        -DCMAKE_PREFIX_PATH="${WORKSPACE}/MIOpenDeps"
                        -DMIOPEN_USER_DB_PATH=${WORKSPACE}/MIOpen/build/MIOpenUserDB
                        -DMIOPEN_TEST_FLAGS=\'--verbose --disable-verification-cache\'
                        ''')
    }
}

void showEnv() {
    echo "$env.NODE_NAME"
    sh 'cat /etc/os-release'
    sh 'ulimit -a'
    // Ignore rocm-smi failures in ixt-sjc2-05
    sh '/opt/rocm/bin/rocm-smi || true'
    sh '/opt/rocm/bin/rocm_agent_enumerator'
    sh 'id'
}

String dockerArgs() {
    return "--device=/dev/kfd --device=/dev/dri --group-add video --group-add render -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro"
}

String dockerImage() {
    return 'rocm/mlir:rocm5.0-latest'
}

void preMergeCheck() {
    sh '''
    if [ ! -f ./build/compile_commands.json ];  then
      echo "No compile commands, bailing."
      exit 1
    fi
    if [ ! -f ./compile_commands.json ]; then
      ln -s build/compile_commands.json compile_commands.json
    fi
    '''
    sh 'python3 ./mlir/utils/jenkins/static-checks/premerge-checks.py'
}

void testMIOpenDriver(String dtype, String layout, String direction, String tuning) {
    echo "Config is (${dtype}, ${layout}, dir=${direction}, tuning=${tuning})"
    dir('MIOpen/build/') {
        sh """
        bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh \
        --layout ${layout} \
        --direction ${direction} \
        --dtype ${dtype} \
        ${tuning == '1' ? '--tuning' : '--no-tuning'} \
        < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
    }
}

void postProcessPerfRes() {
    publishHTML (target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'build',
        reportFiles: 'MLIR_Performance_Changes.html,MLIR_vs_MIOpen.html',
        reportName: 'Performance report'
    ])

    plot csvFileName: 'plot-nightly-perf-results-000001.csv',\
        csvSeries: [[file: 'build/mlir_vs_miopen_perf_for_plot.csv', displayTableFlag: false]],\
        title: 'Test performance summary',\
        yaxis: 'TFlops',\
        style: 'line',\
        group: 'Performance plots'

    // Save results for future comparison
    archiveArtifacts artifacts: 'build/mlir_*.csv,build/perf-run-date', onlyIfSuccessful: true
}

pipeline {
    agent none
    parameters {
        // Below should be set statically by Jenkins job
        booleanParam(name: 'nightly', defaultValue: params.nightly ? true : false,
                     description: 'Run extra nightly-only tests')
        booleanParam(name: 'canXdlops', defaultValue: params.canXdlops == false ? false : true,
                     description: 'Can this CI instance use xdlops (no for public server)')
        booleanParam(name: 'weekly', defaultValue: params.weekly ? true : false,
                     description: 'Run weekly-only jobs')

        // Each below control whether to run a individual stage from parallel run
        // They default to true or empty but deverloper can toggle them for debugging purpose
        booleanParam(name: 'sharedLib', defaultValue: true,
                     description: 'Run the shared library stage')
        booleanParam(name: 'staticLib', defaultValue: true,
                     description: 'Run the static library stage')
        booleanParam(name: 'perfTest', defaultValue: true,
                     description: 'Run the performance testing stage')
    }
    stages {
        stage("Set System Property") {
            steps {
                script {
                     System.setProperty("org.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL", "86400");
                }
            }
        }
        stage("Build and Test") {
            parallel {
                stage("Shared Library: fixed E2E tests") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.sharedLib;
                        equals expected: false, actual: params.weekly;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "${params.canXdlops ? 'gfx908 || gfx90a' : 'rocm' }"
                            alwaysPull true
                        }
                    }
                    environment {
                        HOME="${WORKSPACE}"
                    }
                    stages {
                        stage('Environment') {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Shared library build and fixed tests") {
                            steps {
                                buildProject('check-mlir check-mlir-miopen', """
                                  -DMLIR_MIOPEN_DRIVER_PR_E2E_TEST_ENABLED=${params.nightly ? '0' : '1'}
                                  -DMLIR_MIOPEN_DRIVER_XDLOPS_TEST_ENABLED=${params.canXdlops ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_TEST_GPU_VALIDATION=1
                                  -DLLVM_LIT_ARGS=-v
                                  -DCMAKE_EXPORT_COMPILE_COMMANDS=1
                                """)
                            }
                        }
                        stage('Static Tests') {
                            when { allOf {
                                equals expected: false, actual: params.nightly;
                                // Avoid this test running twice
                                equals expected: true, actual: params.canXdlops
                            } }
                            steps {
                               preMergeCheck()
                           }
                        }
                     }
                     post {
                        always {
                            cleanWs()
                        }
                    }
                }
                stage("Shared Library: random E2E tests") {
                    when {
                        beforeAgent true;
                        allOf {
                            equals expected: true, actual: params.sharedLib;
                            equals expected: true, actual: params.nightly
                        }
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "${params.canXdlops ? 'gfx908 || gfx90a' : 'rocm' }"
                            alwaysPull true
                        }
                    }
                    environment {
                        HOME="${WORKSPACE}"
                    }
                    stages {
                        stage('Environment') {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Shared library build and random tests") {
                            steps {
                                buildProject('check-mlir-miopen',
                                             """-DMLIR_MIOPEN_DRIVER_PR_E2E_TEST_ENABLED=0
                                             -DMLIR_MIOPEN_DRIVER_XDLOPS_TEST_ENABLED=${params.canXdlops ? '1' : '0'}
                                             -DMLIR_MIOPEN_DRIVER_E2E_TEST_ENABLED=1
                                             -DMLIR_MIOPEN_DRIVER_RANDOM_DATA_SEED=1
                                             -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=0
                                             -DMLIR_MIOPEN_DRIVER_TEST_GPU_VALIDATION=0
                                             -DMLIR_MIOPEN_DRIVER_TIMING_TEST_ENABLED=1
                                             -DLLVM_LIT_ARGS=-v
                                             -DCMAKE_EXPORT_COMPILE_COMMANDS=1""")
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
                stage("Static Library PR tests") {
                    when {
                        beforeAgent true;
                        allOf {
                            equals expected: true, actual: params.staticLib;
                            equals expected: false, actual: params.nightly;
                            equals expected: false, actual: params.weekly;
                        }
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "${params.canXdlops ? 'gfx908 || gfx90a' : 'gfx906' }"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="/opt/rocm/llvm/bin:$PATH"
                        HOME="${WORKSPACE}"
                    }
                    stages {
                        stage('Environment') {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Build MIOpen with libMLIRMIOpen") {
                            steps {
                                buildMIOpenWithMLIR()
                            }
                        }
                        stage("Test selected MIOpen configs") {
                            environment {
                                // Make libMIOpen.so accessible to the test driver
                                LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                            }
                            steps {
                                dir('MIOpen/build/') {
                                    sh """
                                    bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh --test-all --no-tuning\
                                       < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/selected-resnet50-miopen-configs"""
                                    sh """
                                    bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh --test-all --tuning\
                                       < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/selected-resnet50-miopen-configs"""
                                }
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
            }
        }
        stage ("Tune MLIR kernels") {
            when {
                beforeAgent true;
                equals expected: true, actual: params.weekly;
                equals expected: true, actual: params.staticLib;
            }
            matrix {
                axes {
                    axis {
                        name 'ARCH'
                        values 'gfx906', 'gfx908', 'gfx90a'
                    }
                }
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label "${ARCH}"
                        alwaysPull true
                    }
                }
                when {
                    beforeAgent true
                    anyOf {
                        allOf {
                            equals expected: "gfx906", actual: "${ARCH}";
                            equals expected: false, actual: params.canXdlops;
                        }
                        allOf {
                            anyOf {
                                equals expected: "gfx908", actual: "${ARCH}";
                                equals expected: "gfx90a", actual: "${ARCH}";
                            }
                            equals expected: true, actual: params.canXdlops;
                        }
                    }
                }
                environment {
                    PATH="/opt/rocm/llvm/bin:$PATH"
                    HOME="${WORKSPACE}"
                }
                stages {
                    stage("Set System Property on Lockhart nodes") {
                        when {
                            equals expected: "gfx90a", actual: "${ARCH}"
                        }
                        steps {
                            script {
                               System.setProperty("org.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL", "86400");
                            }
                        }
                    }
                    stage("Environment") {
                        steps {
                            echo "ARCH = ${ARCH}"
                            showEnv()
                        }
                    }
                    stage("Build MIOpen with libMLIRMIOpen") {
                        steps {
                            buildMIOpenWithMLIR()
                        }
                    }
                    stage("Tune MLIR kernels") {
                        environment {
                            // Make libMIOpen.so accessible to the test driver
                            LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                        }
                        steps {
                            dir('MIOpen/build/') {
                                sh """
                                bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh --test-all --tuning\
                                    < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
                                sh 'ls -l MIOpenUserDB'
                            }
                            // Save user database for nightly jobs
                            dir ('MIOpen/build/MIOpenUserDB') {
                                stash name: "MLIR-PerfDB-${ARCH}", includes: "**"
                            }
                        }
                    }
                }
                post {
                    always {
                        cleanWs()
                    }
                }
            }
        }
        stage("Archive weekly xdlops tuning perfDB") {
            when {
                beforeAgent true;
                equals expected: true, actual: params.weekly;
                equals expected: true, actual: params.staticLib;
            }
            agent any
            options {
                skipDefaultCheckout()
            }
            steps {
                // Note: add additional architectures here
                dir ('MIOpen/build/MIOpenUserDB') {
                    unstash name: "MLIR-PerfDB-${params.canXdlops ? 'gfx908' : 'gfx906'}"
                    // This'll stop being a duplicate once Navi CI starts
                    unstash name: "MLIR-PerfDB-${params.canXdlops ? 'gfx90a' : 'gfx906'}"
                    sh 'date --utc +%Y-%m-%d >tuning-date'
                }
                archiveArtifacts artifacts: 'MIOpen/build/MIOpenUserDB/**',\
                    onlyIfSuccessful: true
            }
            post {
                always {
                    cleanWs()
                }
            }
        }

        stage("MIOpen Resnet50 Config Test") {
            when { allOf {
                    equals expected: true, actual: params.nightly;
                    equals expected: true, actual: params.staticLib;
            }}
            matrix {
                axes {
                    axis {
                        name 'DTYPE'
                        values 'fp16', 'fp32'
                    }
                    axis {
                        name 'LAYOUT'
                        values 'NCHW', 'NHWC'
                    }
                }
                stages {
                    stage('Test MIOpen integration') {
                        agent {
                            docker {
                                image dockerImage()
                                args dockerArgs()
                                label "${params.canXdlops ? 'gfx908 || gfx90a' : 'gfx906'}"
                                alwaysPull true
                            }
                        }
                        stages {
                            stage('Environment') {
                                steps {
                                    echo "Config is ($DTYPE, $LAYOUT)"
                                    showEnv()
                                }
                            }
                            stage("Build MIOpen with libMLIRMIOpen") {
                                environment {
                                    PATH="/opt/rocm/llvm/bin:$PATH"
                                    HOME="${WORKSPACE}"
                                }
                                steps {
                                    buildMIOpenWithMLIR()
                                }
                            }
                            stage("Copy perfdb") {
                                steps {
                                    copyArtifacts filter: 'MIOpen/build/MIOpenUserDB/**',\
                                               optional: true,\
                                               flatten: true,\
                                               projectName: "/MLIR/mlir-weekly",\
                                               selector: lastSuccessful(),\
                                               target: 'MIOpen/build/MIOpenUserDB'
                                    sh 'ls MIOpen/build/MIOpenUserDB'
                                    sh 'cat MIOpen/build/MIOpenUserDB/tuning-date'
                                }
                            }
                            stage("Test MIOpen config") {
                                environment {
                                    // Make libMIOpen.so accessible to the test driver
                                    LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                                    HOME="${WORKSPACE}"
                                }
                                steps {
                                    // Test with perfDb
                                    testMIOpenDriver("$DTYPE", "$LAYOUT", "1", "0")
                                    testMIOpenDriver("$DTYPE", "$LAYOUT", "2", "0")
                                    testMIOpenDriver("$DTYPE", "$LAYOUT", "4", "0")
                                    // Test without perfDb
                                    sh 'rm -rf ${WORKSPACE}/MIOpen/build/MIOpenUserDB'
                                    testMIOpenDriver("$DTYPE", "$LAYOUT", "1", "0")
                                    testMIOpenDriver("$DTYPE", "$LAYOUT", "2", "0")
                                    testMIOpenDriver("$DTYPE", "$LAYOUT", "4", "0")
                                }
                            }
                        }
                        post {
                            always {
                                cleanWs()
                            }
                        }
                    }
                }
            }
        }
        // FIXME: run perf tests on both gfx90a and gfx908
        stage("Benchmark and Report Performance") {
            when {
                beforeAgent true;
                equals expected: true, actual: params.perfTest;
                equals expected: true, actual: params.nightly;
            }
            agent {
                docker {
                    image dockerImage()
                    args dockerArgs()
                    label "${params.canXdlops ? 'gfx90a' : 'gfx906' }"
                    alwaysPull true
                }
            }
            environment {
                // Make libMIOpen.so accessible to the test driver
                PATH="/opt/rocm/llvm/bin:$PATH"
                LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                HOME="${WORKSPACE}"
            }
            stages {
                stage("Environment") {
                    steps {
                        showEnv()
                    }
                }
                stage("Build MLIR with libMLIRMIOpen") {
                    steps {
                        buildMIOpenWithMLIR()
                    }
                }
                stage("Copy tuning database") {
                    steps {
                        copyArtifacts filter: 'MIOpen/build/MIOpenUserDB/**',\
                                               optional: true,\
                                               flatten: true,\
                                               projectName: "/MLIR/mlir-weekly",\
                                               selector: lastSuccessful(),\
                                               target: 'MIOpen/build/MIOpenUserDB'
                        sh 'ls MIOpen/build/MIOpenUserDB'
                        sh 'cat MIOpen/build/MIOpenUserDB/tuning-date'
                    }
                }
                stage("Performance Test: Tuned vs Untuned") {
                    steps {
                        buildProject('ci-performance-scripts', '')
                        dir('build') {
                           sh 'python3 ./bin/MIOpenDriver.py -bmiopen_use_tuned_mlir'
                           sh 'rm -rf ${WORKSPACE}/MIOpen/build/MIOpenUserDB'
                           sh 'python3 ./bin/MIOpenDriver.py -bmiopen_use_untuned_mlir'
                        }
                    }
                }
                stage("Build MIOpen with HIP") {
                    steps {
                        sh 'rm -rf MIOpen'
                        dir('MIOpen') {
                            getAndBuildMIOpen("--prefix ${WORKSPACE}/MIOpen/MIOpenDeps",
                                '''-DMIOPEN_BACKEND=HIP -DMIOPEN_USE_MLIR=OFF
                                   -DCMAKE_PREFIX_PATH="${WORKSPACE}/MIOpen/MIOpenDeps"
                                   -DCMAKE_INSTALL_PREFIX=${WORKSPACE}/MIOpen/build/MIOpenInstallDir
                                   ''')
                            sh 'cd build; make -j $(nproc)'
                            sh 'cd build; make install'
                        }
                    }
                }
                stage("Build MLIR") {
                    steps {
                        // Clean up build settings to disable static library and allow
                        // mlir-rocm-runner
                        sh 'rm build/CMakeCache.txt'
                        buildProject('miopen-gen mlir-miopen-driver mlir-rocm-runner ci-performance-scripts', '')
                    }
                }
                stage("Test MLIR vs MIOpen") {
                    steps {
                        dir('build') {
                            sh 'date --utc +%Y-%m-%d > perf-run-date'
                            // Run MLIR perf benchmarks
                            sh 'python3 ./bin/MIOpenDriver.py'
                        }
                    }
                }
                stage("Copy earlier performance results") {
                    steps {
                        copyArtifacts filter: 'build/*.csv,build/perf-run-date',\
                                               optional: true,\
                                               flatten: true,\
                                               projectName: "/${JOB_NAME}",\
                                               selector: lastSuccessful(),\
                                               target: 'build/oldData'
                    }
                }
                stage("Create performance reports") {
                    steps {
                        dir('build') {
                            sh 'ls -l'
                            sh 'python3 ./bin/createPerformanceReports.py'
                            sh 'python3 ./bin/perfRegressionReport.py'
                        }
                        postProcessPerfRes()
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
             }
        }
    }
}
