void buildProject(String target, String cmakeOpts) {
    cmakeBuild generator: 'Ninja',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        steps: [[args: target]],\
        cmakeArgs: "-DMLIR_MIOPEN_DRIVER_ENABLED=1 $cmakeArgs"
}

void showEnv() {
    sh 'cat /etc/os-release'
    sh '/opt/rocm/bin/rocm-smi'
}

pipeline {
    agent {
        docker {
            image 'rocm/mlir:rocm4.1-latest'
            args '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
            label "${params.canXdlops ? 'gfx908' : 'rocm' }"
        }
    }
    parameters {
        booleanParam(name: 'nightly', defaultValue: false,
                     description: 'Run extra nightly-only tests')
        booleanParam(name: 'canXdlops', defaultValue: false,
                     description: 'Can this CI instance use xdlops (no for public server)')
    }
    environment {
        PATH="$PATH:/opt/rocm/llvm/bin"
        DOCKER_ARGS='--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
    }
    stages {
        stage("Builds and tests") {
            parallel {
                stages {
                    stage('Environment') {
                        steps { showEnv() }
                    }
                    stage("Shared library build and test") {
                        steps {
                            buildProject('check-mlir', """
                               -DMLIR_MIOPEN_DRIVER_PR_E2E_TEST_ENABLED=${params.nightly ? '0' : '1'}
                               -DMLIR_MIOPEN_DRIVER_XDLOPS_TEST_ENABLED=${params.canXdlops ? '1' : '0'}
                               -DMLIR_MIOPEN_DRIVER_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
                               -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
                               """)
                        }
                        stage('Static Tests') {
                            when allOf {
                                equals expected: false,
                                    actual: params.nightly;
                                // Avoid this test running twice
                                equals expected: false,
                                    actual: params.canXdlops
                            }
                            steps {
                                sh '''
                                if [[ ! -f ./compile_commands.json ]]; then
                                  ln -s build/compile_commands.json compile_commands.json
                                fi
                                '''
                                sh 'python3 ./mlir/utils/jenkins/static-checks/premerge-checks.py'
                            }
                        }
                        stage("Random E2E test") {
                            when { equals expected: true, actual: params.nightly }
                            // Reuses previous build config
                            buildProject('check-mlir',
                               cmakeArgs: """-DMLIR_MIOPEN_DRIVER_RANDOM_DATA_SEED=1
                               -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=0
                               """)
                        }
                    }
                    post {
                        always {
                            dir("build") { deleteDir }
                        }
                    }
                }

                stages {
                    stage("Igemm build") {
                        steps {
                            buildProject('libMLIRMIOpen',
                                         '-DBUILD_FAT_LIBMLIRMIOPEN=ON')
                        }
                    }
                    stage("Install libMLIRMIOpen") {
                        when { allOf {
                            equals expected: true, actual: params.nightly;
                            equals expected: true, actual: params.canXdlops
                        }}
                        cmake arguments: '--install . --component libMLIRMIOpen --prefix /opt/rocm',\
                            installation: 'InSearchPath', workingDir: 'build'
                    }
                    stage("Build and stash MIOpen") {
                        when { allOf {
                            equals expected: true, actual: params.nightly;
                            equals expected: true, actual: params.canXdlops
                        }}
                        steps {
                            dir('MIOpen') {
                                dir('build') {
                                    deleteDir
                                }
                                git branch: 'develop', poll: false,\
                                    url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
                                cmake arguments: "-P install_deps.cmake --minimum",\
                                    installation: "InSearchPath"
                                cmakeBuild generator: 'Ninja',\
                                    buildDir: 'build',\
                                    buildType: 'Release',\
                                    installation: 'InSearchPath',\
                                    steps: [[args: "MIOpenDriver"]],\
                                    cmakeArgs: '''-DMIOPEN_USE_MLIR=On
                                    -DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                                    -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                                    -DBUILD_DEV=On
                                    -DMIOPEN_TEST_FLAGS=\'--verbose --disable-verification-cache\'
                                    '''
                            }
                            stash name:"MIOpen-build",\
                                    includes: """MIOpen/src/kernels/**,\
MIOpen/build/bin/MIOpenDriver,build/lib/*,\
mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
                        }
                    }
                    post {
                        always {
                            dir("build") { deleteDir }
                        }
                    }
                }

                stages {
                    when { equals expected: true, actual: params.nightly,
                          beforeAgent true }
                    agent {
                        docker {
                            image 'rocm/mlir:rocm4.1-latest'
                            args "$DOCKER_ARGS"
                            label "${params.canXdlops ? 'test-0' : 'rocm' }"
                        }
                    }
                    stage("Environment") { showEnv() }

                    stage("Build ROCM runner for benchmarks") {
                        // On private CI:
                        // config MLIR on ROCm, with MIOpen dialect
                        // with custom perf db for:
                        // - gfx908
                        // - fp32
                        // - resnet50 configs.
                        buildProject('mlir-miopen-driver mlir-rocm-runner',
                            """${params.canXdlops ?
                            "-DMIOPEN_SYSTEM_DB_PATH=${WORKSPACE}/mlir/utils/jenkins/perfdb/miopen_1.0.0.udb.resnet50_fp32_1013"
                            : ""}
                            """)
                    }
                    stage("Benchmark") {
                        environment {
                            PATH="/opt/rocm/bin:$PATH"
                        }
                        dir("build") {
                            sh """
                            # Run 1 perf benchmark config. more to come.
                            # Ensure rocminfo can be located by rocprof.
                            ./bin/mlir-miopen-driver -p ${params.canXdlops ? '-x2' : ''} -ph -c | \
                            rocprof --hip-trace \
                            ./bin/mlir-rocm-runner --shared-libs=./lib/librocm-runtime-wrappers.so,./lib/libmlir_runner_utils.so \
                            --entry-point-result=void

                           # Dump perf figures.
                           cat results.stats.csv
                           """
                        }
                    }
                    post {
                        always {
                            dir('build') { deleteDir }
                        }
                    }
                }

                stage("Upstream build") {
                    when { allOf {
                        equals expected: true, actual: params.nightly;
                        equals expected: false, actual: params.canXdlops
                    }}
                    options {
                        skipDefaultCheckout()
                    }
                    steps {
                        git 'https://github.com/llvm/llvm-project'
                        cmakeBuild generator: 'Ninja',\
                            buildDir: 'build',\
                            buildType: 'Release',\
                            installation: 'InSearchPath',\
                            steps: [[args: 'check-mlir']],\
                            // Reminder to keep these up to date with our cmake
                            cmakeArgs: '''
                            -DLLVM_ENABLE_PROJECTS="mlir;lld"
                            -DLLVM_BUILD_EXAMPLES=ON
                            -DLLVM_TARGETS_TO_BUILD="X86;AMDGPU"
                            -DLLVM_ENABLE_ASSERTIONS=ON
                            -DBUILD_SHARED_LIBS=ON
                            -DLLVM_BUILD_LLVM_DYLIB=ON
                            -DMLIR_ROCM_RUNNER_ENABLED=1
                            '''
                        post {
                            always {
                                cleanWs()
                            }
                        }
                    }
                }
            }
        }

        stage("MIOpen resnet50 config test") {
            when { equals expected: true, actual: params.nightly }
            matrix {
                agent {
                    docker {
                        image 'rocm/mlir:rocm4.1-latest'
                        args '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
                        label "${XDLOPS == '1' ? 'gfx908 && multi_gpu' : 'gfx908 && multi_gpu'}"
                    }
                }
                options {
                    skipDefaultCheckout()
                }
                axes {
                    axis {
                        name 'DTYPE'
                        values 'fp16', 'fp32'
                    }
                    axis {
                        name 'XDLOPS'
                        values '1', '0'
                    }
                    axis {
                        name 'LAYOUT'
                        values 'NCHW', 'NHWC'
                    }
                    axis {
                        name 'DIRECTION'
                        values '1', '4'
                    }
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, xdlops=$XDLOPS, dir=$DIRECTION)"
                            showEnv()
                        }
                    }
                    stage("Copy MIOpen binaries") {
                        steps {
                            unstash name: "MIOpen-build"
                        }
                    }
                    stage("Test MIOpen config") {
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, xdlops=$XDLOPS, dir=$DIRECTION)"
                            dir('MIOpen/build/') {
                                sh """
bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh \
--layout $LAYOUT \
--direction $DIRECTION \
--dtype $DTYPE \
${XDLOPS == '1' ? '--xdlops' : '--no-xdlops'} <${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
                            }
                        }
                    }
                }
                post {
                    always {
                        cleanWs()
                    }
                }
            }
        }
    }
}
