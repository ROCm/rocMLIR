void buildProject(String target, String cmakeOpts) {
    cmakeBuild generator: 'Ninja',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        steps: [[args: target]],\
        cmakeArgs: "-DMLIR_MIOPEN_DRIVER_ENABLED=1 $cmakeOpts"
}

void getAndBuildMIOpen(String prefixOpt, String cmakeOpts) {
    git branch: 'develop', poll: false,\
        url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
    cmake arguments: "-P install_deps.cmake --minimum ${prefixOpt}",\
        installation: "InSearchPath"
    sh '[ ! -d build ] || rm -rf build'
    cmakeBuild generator: 'Unix Makefiles',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                     -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                     ${cmakeOpts}
                     """
    sh 'cd build; make -j $(nproc) MIOpenDriver'
}

void showEnv() {
    sh 'hostname'
    sh 'cat /etc/os-release'
    sh '/opt/rocm/bin/rocm-smi'
}

String dockerArgs() {
    return '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
}

String dockerImage() {
    return 'rocm/mlir:rocm4.1-latest'
}

pipeline {
    agent none
    parameters {
        booleanParam(name: 'nightly', defaultValue: params.nightly ?: false,
                     description: 'Run extra nightly-only tests')
        booleanParam(name: 'canXdlops', defaultValue: params.canXdlops ?: false,
                     description: 'Can this CI instance use xdlops (no for public server)')
    }
    stages {
        stage("Builds and tests") {
            parallel {
                stage("Shared library") {
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "${params.canXdlops ? 'gfx908' : 'rocm' } && !single_gpu"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="$PATH:/opt/rocm/llvm/bin"
                    }
                    stages {
                        stage('Environment') {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Shared library build and test") {
                            steps {
                                installProjectDeps()
                                buildProject('check-mlir check-mlir-miopen', """
                                  -DMLIR_MIOPEN_DRIVER_PR_E2E_TEST_ENABLED=${params.nightly ? '0' : '1'}
                                  -DMLIR_MIOPEN_DRIVER_XDLOPS_TEST_ENABLED=${params.canXdlops ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
                                  -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
				  -DMLIR_MIOPEN_DRIVER_TEST_GPU_VALIDATION=1
                                  -DCMAKE_EXPORT_COMPILE_COMMANDS=1
                                """)
                            }
                        }
                        stage('Static Tests') {
                            when { allOf {
                                equals expected: false, actual: params.nightly;
                                // Avoid this test running twice
                                equals expected: false, actual: params.canXdlops
                            } }
                            steps {
                                sh '''
                                if [ ! -f ./build/compile_commands.json ];  then
                                  echo "No compile commands, bailing."
                                  exit 1
                                fi
                                if [ ! -f ./compile_commands.json ]; then
                                  ln -s build/compile_commands.json compile_commands.json
                                fi
                                '''
                                sh 'python3 ./mlir/utils/jenkins/static-checks/premerge-checks.py'
                            }
                        }
                        stage("Random E2E test") {
                            when {
                                equals expected: true, actual: params.nightly
                            }
                            steps {
                                buildProject('check-mlir-miopen',
                                             """-DMLIR_MIOPEN_DRIVER_RANDOM_DATA_SEED=1
                                             -DMLIR_MIOPEN_DRIVER_MISC_E2E_TEST_ENABLED=0
                                             -DMLIR_MIOPEN_DRIVER_TEST_GPU_VALIDATION=0""")
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }

                stage("Implicit GEMM") {
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label 'rocm'
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="$PATH:/opt/rocm/llvm/bin"
                    }
                    stages {
                        stage("Igemm build") {
                            steps {
                                checkout scm
                                buildProject('libMLIRMIOpen',
                                             '-DBUILD_FAT_LIBMLIRMIOPEN=ON')
                            }
                        }

                        stage("Install libMLIRMIOpen") {
                            when { allOf {
                                equals expected: true, actual: params.nightly;
                                equals expected: true, actual: params.canXdlops
                            }}
                            steps {
                                cmake arguments: '--install . --component libMLIRMIOpen --prefix /opt/rocm',\
                                installation: 'InSearchPath', workingDir: 'build'
                            }
                        }
                        stage("Build and stash MIOpen") {
                            when { allOf {
                                equals expected: true, actual: params.nightly;
                                equals expected: true, actual: params.canXdlops
                            }}
                            steps {
                                dir('MIOpen') {
                                        getAndBuildMIOpen('', '''-DMIOPEN_USE_MLIR=On
                                        -DBUILD_DEV=On
                                        -DMIOPEN_TEST_FLAGS=\'--verbose --disable-verification-cache\'
                                        ''')
                                }
                                stash name:"MIOpen-test-requisites",\
                                    includes: """
                                    MIOpen/build/**,\
                                    mlir/utils/jenkins/miopen-tests/**\
                                    """
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }

                stage("Performance testing") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.nightly;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "${params.canXdlops ? 'gfx908' : 'rocm' }"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="$PATH:/opt/rocm/llvm/bin"
                    }
                    stages {
                        stage("Environment") {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Build MIOpen with HIP") {
                            steps {
                                dir('MIOpen') {
                                    sh 'mkdir MIOpenInstallDir'
                                    getAndBuildMIOpen('--prefix ./MIOpenDeps', 
                                                      '''-DMIOPEN_BACKEND=HIP
                                    -DCMAKE_PREFIX_PATH="${WORKSPACE}/MIOpen/MIOpenDeps"
                                    -DCMAKE_INSTALL_PREFIX=${WORKSPACE}/MIOpen/MIOpenInstallDir
                                    ''')
                                    sh 'cd build; make -j $(nproc)'
                                    sh 'cd build; make install'
                                }
                            }
                        }
                        stage("Build MLIR") {
                            steps {
                                buildProject('mlir-miopen-driver mlir-rocm-runner ci-performance-scripts', '')
                            }
                        }
                        stage("TEMPORARY Install python dependencies") {
                            steps {
                                sh 'pip3 install pandas numpy scipy jinja2'
                            }
                        }
                        stage('Copy earlier performance results') {
                            steps {
                                copyArtifacts filter: 'build/*.csv',\
                                                optional: true,\
                                                flatten: true,\
                                                projectName: "/${JOB_NAME}",\
                                                selector: lastSuccessful(),\
                                                target: 'oldData'
                            }
                        }
                        stage('Performance Test') {
                            steps {
                                sh 'ldconfig'
                                dir('build') {
                                    sh 'date --utc +%Y-%m-%d > perf-run-date'
                                    // Run MLIR perf benchmarks
                                    sh 'python3 ./llvm/MIOpenDriver.py'
                                    // Generate report on performance changes
                                    sh 'python3 ./llvm/perfRegressionReport.py'
                                }
                                publishHTML (target: [
                                    allowMissing: false,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'build',
                                    reportFiles: 'MLIR_Performance_Changes.html,MLIR_vs_MIOpen.html',
                                    reportName: 'Performance report'
                                ])
                                
                                plot csvFileName: 'plot-nightly-perf-results-000001.csv',\
                                    csvSeries: [[file: 'build/mlir_vs_miopen_perf_means.csv', displayTableFlag: false]],\
                                    title: 'Test performance summary',\
                                    yaxis: 'TFlops',\
                                    style: 'line',\
                                    group: 'Performance plots'

                                // Save results for future comparison
                                archiveArtifacts artifacts: 'build/mlir_*.csv,build/perf-run-date', onlyIfSuccessful: true
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
                // We're apparently not running this test these days
                // stage("Upstream build") {
                //     when { beforeAgent true;
                //           allOf {
                //             equals expected: true, actual: params.nightly;
                //             equals expected: false, actual: params.canXdlops
                //         }}
                //     agent {
                //             docker {
                //             image dockerImage()
                //             args dockerArgs()
                //             label 'rocm'
                //             alwaysPull true
                //         }
                //     }
                //     options {
                //         skipDefaultCheckout()
                //     }
                //     steps {
                //         git branch: 'main', poll: false,\
                //             url: 'https://github.com/llvm/llvm-project'
                //         cmakeBuild generator: 'Ninja',\
                //             buildDir: 'build',\
                //             sourceDir: 'llvm',\
                //             buildType: 'Release',\
                //             installation: 'InSearchPath',\
                //             steps: [[args: 'check-mlir']],\
                //             // Reminder to keep these up to date with our cmake
                //             cmakeArgs: '''
                //             -DLLVM_ENABLE_PROJECTS="mlir;lld"
                //             -DLLVM_BUILD_EXAMPLES=ON
                //             -DLLVM_TARGETS_TO_BUILD="X86;AMDGPU"
                //             -DLLVM_ENABLE_ASSERTIONS=ON
                //             -DBUILD_SHARED_LIBS=ON
                //             -DLLVM_BUILD_LLVM_DYLIB=ON
                //             -DMLIR_ROCM_RUNNER_ENABLED=1
                //             '''
                //     }
                //     post {
                //         always {
                //             cleanWs()
                //         }
                //     }
                // }
            }
        }

        stage("MIOpen resnet50 config test") {
            when { allOf {
                equals expected: true, actual: params.nightly
                equals expected: true, actual: params.canXdlops
            }}
            matrix {
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label "${XDLOPS == '1' ? 'gfx908' : 'gfx908'} && !single_gpu"
                        alwaysPull true
                    }
                }
                options {
                    skipDefaultCheckout()
                }
                axes {
                    axis {
                        name 'DTYPE'
                        values 'fp16', 'fp32'
                    }
                    axis {
                        name 'XDLOPS'
                        values '1', '0'
                    }
                    axis {
                        name 'LAYOUT'
                        values 'NCHW', 'NHWC'
                    }
                    axis {
                        name 'DIRECTION'
                        values '1', '2', '4'
                    }
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, xdlops=$XDLOPS, dir=$DIRECTION)"
                            showEnv()
                        }
                    }
                    stage("Copy MIOpen test environment") {
                        steps {
                            unstash name: "MIOpen-test-requisites"
                        }
                    }
                    stage("Test MIOpen config") {
                        environment {
                            // Make libMIOpen.so accessible to the test driver
                            LD_LIBRARY_PATH="${WORKSPACE}/MIOpen/build/lib:$LD_LIBRARY_PATH:"
                        }
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, xdlops=$XDLOPS, dir=$DIRECTION)"
                            sh 'ldconfig'
                            dir('MIOpen/build/') {
                                sh """
                                bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh \
                                --layout $LAYOUT \
                                --direction $DIRECTION \
                                --dtype $DTYPE \
                                ${XDLOPS == '1' ? '--xdlops' : '--no-xdlops'} \
                                < ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
                            }
                        }
                    }
                }
                post {
                    always {
                        cleanWs()
                    }
                }
            }
        }
    }
}
