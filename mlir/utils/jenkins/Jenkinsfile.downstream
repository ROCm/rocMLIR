void buildProject(String target, String cmakeOpts) {
    timeout(time: 60, activity: true, unit: 'MINUTES') {
        cmakeBuild generator: 'Ninja',\
            buildDir: 'build',\
            buildType: 'RelWithDebInfo',\
            installation: 'InSearchPath',\
            steps: [[args: target]],\
            cmakeArgs: "-DMLIR_ROCK_DRIVER_ENABLED=1 $cmakeOpts"
    }
}

void buildRock(String cmakeOpts) {
    sh '[ ! -d build ] || rm -rf build'
    timeout(time: 60, activity: true, unit: 'MINUTES') {
        cmakeBuild generator: 'Unix Makefiles',\
            buildDir: 'build',\
            buildType: 'Release',\
            installation: 'InSearchPath',\
            cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                         -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                         ${cmakeOpts}
                         """
        sh 'cd build; make -j $(nproc) RockDriver'
    }
}

void showEnv() {
    echo "$env.NODE_NAME"
    sh 'hostname'
    sh 'cat /etc/os-release'
    sh 'ulimit -a'
    sh '/opt/rocm/bin/rocm-smi'
}

String dockerArgs() {
    return '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
}

String dockerImage() {
    return 'rocm/mlir:rocm5.2-latest'
}


//makes sure multiple builds are not triggered for branch indexing
def resetBuild() {
    if (currentBuild.getPreviousBuild() == null || currentBuild.getPreviousBuild().getBuildCauses().toString().contains('BranchIndexingCause')) {
        def buildNumber = BUILD_NUMBER as int; if (buildNumber > 1) milestone(buildNumber - 1); milestone(buildNumber)
    }
}

def rebootNode() {
    build job: 'maintenance/reboot-slaves', propagate: false , parameters: [string(name: 'server', value: "${env.NODE_NAME}"),]
}

pipeline {
    agent none
    parameters {
        booleanParam(name: 'sharedLib', defaultValue: true,
            description: 'Run shared library tests')
        booleanParam(name: 'staticLib', defaultValue: true,
            description: 'Run static library and Rock integration tests')
    }
    stages {
        stage('Kill old PR builds') {
            steps {
                resetBuild()
            }
        }
        stage('Build and Test') {
            parallel {
                stage("Shared Library: fixed E2E tests") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.sharedLib;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "rocm"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="$PATH:/opt/rocm/llvm/bin"
                    }
                    stages {
                        stage("Environment") {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Shared library build and fixed tests") {
                            steps {
                                buildProject('check-mlir check-mlir-rock', """
                                  -DMLIR_ROCK_DRIVER_PR_E2E_TEST_ENABLED=1
                                  -DMLIR_ROCK_DRIVER_XDLOPS_TEST_ENABLED=0
                                  -DMLIR_ROCK_DRIVER_E2E_TEST_ENABLED=0
                                  -DMLIR_ROCK_DRIVER_MISC_E2E_TEST_ENABLED=0
                                  -DMLIR_ROCK_DRIVER_TEST_GPU_VALIDATION=1
                                  -DLLVM_LIT_ARGS=-v
                                  -DCMAKE_EXPORT_COMPILE_COMMANDS=1
                                """)
                             }
                        }
                    }
                    post {
                        unsuccessful {
                            rebootNode()
                        }
                        always {
                            cleanWs()
                        }
                    }
                }
                stage("Static Library") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.staticLib;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "gfx906"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="$PATH:/opt/rocm/llvm/bin"
                    }
                    stages {
                        stage("Environment") {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Igemm build") {
                            steps {
                                checkout scm
                                buildProject('librockCompiler',
                                             '-DBUILD_FAT_LIBROCKCOMPILER=ON')
                                cmake arguments: "--install . --component librockCompiler --prefix ${WORKSPACE}/RockDeps",\
                                installation: 'InSearchPath', workingDir: 'build'
                            }
                        }
                        // Note: setting cxxflags here works around https://github.com/ROCmSoftwarePlatform/Rock/issues/1604
                        stage("Build Rock with librockCompiler") {
                            steps {
                                dir('Rock') {
                                git branch: 'rename-MLIR', poll: false,\
                                    url: 'https://github.com/ROCmSoftwarePlatform/Rock.git'
                                buildRock("""-DROCK_USE_MLIR=On
                                        -DROCK_BACKEND=HIP
                                        -DCMAKE_PREFIX_PATH=${WORKSPACE}/RockDeps
                                        -DCMAKE_CXX_FLAGS="-isystem ${WORKSPACE}/RockDeps/include"
                                        -DROCK_USER_DB_PATH=${WORKSPACE}/Rock/build/RockUserDB
                                        -DROCK_TEST_FLAGS="--verbose --disable-verification-cache"
                                        """)
                                }
                            }
                        }
                        stage("Test selected Rock configs") {
                            environment {
                                // Make libRock.so accessible to the test driver
                                LD_LIBRARY_PATH="${WORKSPACE}/Rock/build/lib:$LD_LIBRARY_PATH:"
                            }
                            steps {
                                sh 'ldconfig'
                                dir('Rock/build/') {
                                    sh """
                                    bash ${WORKSPACE}/mlir/utils/jenkins/rock-tests/rock_validate.sh --test-all --no-tuning\
                                       < ${WORKSPACE}/mlir/utils/jenkins/rock-tests/selected-resnet50-rock-configs"""
                                    sh """
                                    bash ${WORKSPACE}/mlir/utils/jenkins/rock-tests/rock_validate.sh --test-all --tuning\
                                       < ${WORKSPACE}/mlir/utils/jenkins/rock-tests/selected-resnet50-rock-configs"""
                                }
                            }
                        }
                    }
                    post {
                        unsuccessful {
                            rebootNode()
                        }
                        always {
                            cleanWs()
                        }
                    }
                }
            }
        }
    }
}
