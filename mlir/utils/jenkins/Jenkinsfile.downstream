void buildProject(String target, String cmakeOpts) {
    timeout(time: 60, activity: true, unit: 'MINUTES') {
        cmakeBuild generator: 'Ninja',\
            buildDir: 'build',\
            buildType: 'RelWithDebInfo',\
            installation: 'InSearchPath',\
            steps: [[args: target]],\
            cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
              -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
              ${cmakeOpts}"""
    }
}

void showEnv() {
    echo "$env.NODE_NAME"
    sh 'hostname'
    sh 'cat /etc/os-release'
    sh 'ulimit -a'
    sh '/opt/rocm/bin/rocm-smi'
}

String dockerArgs() {
    return "--device=/dev/kfd --device=/dev/dri --group-add video --group-add render -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro"
}

String dockerImage() {
    return 'rocm/mlir:rocm6.1-latest'
}


//makes sure multiple builds are not triggered for branch indexing
def resetBuild() {
    if (currentBuild.getPreviousBuild() == null || currentBuild.getPreviousBuild().getBuildCauses().toString().contains('BranchIndexingCause')) {
        def buildNumber = BUILD_NUMBER as int; if (buildNumber > 1) milestone(buildNumber - 1); milestone(buildNumber)
    }
}

def rebootNode() {
    build job: 'maintenance/reboot-slaves', propagate: false , parameters: [string(name: 'server', value: "${env.NODE_NAME}"),]
}

pipeline {
    agent none
    parameters {
        booleanParam(name: 'sharedLib', defaultValue: true,
            description: 'Run shared library tests')
        booleanParam(name: 'staticLib', defaultValue: true,
            description: 'Build static library packages')
        string(name: 'CKBranch', defaultValue: 'develop',
            description: 'The Composable Kernel branch to be used with the job')
    }
    stages {
        stage('Kill old PR builds') {
            steps {
                resetBuild()
            }
        }
        stage('Build and Test') {
            parallel {
                stage("Shared Library: fixed E2E tests") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.sharedLib;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "rocm"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="/opt/rocm/llvm/bin:$PATH"
                    }
                    stages {
                        stage("Environment") {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Shared library build and fixed tests") {
                            steps {
                                buildProject('check-mlir check-rocmlir', """
                                  -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=1
                                  -DROCMLIR_DRIVER_E2E_TEST_ENABLED=0
                                  -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=1
                                  -DLLVM_LIT_ARGS=-v
                                  -DCMAKE_EXPORT_COMPILE_COMMANDS=1
                                """)
                             }
                        }
                        stage("Tune selected rocmlir configs") {
                            steps {
                                buildProject('ci-performance-scripts', '')
                                dir('build') {
                                    timeout(time: 60, activity: true, unit: 'MINUTES') {
                                        // Tune gemms, fail if the DB is not created
                                        sh """python3 ./bin/tuningRunner.py --operation gemm \
                                                --configs_file=../mlir/utils/jenkins/ci-configs/selected-gemm-configs \
                                                --output=tuning_gemm.tsv
                                              [ -f tuning_gemm.tsv ]"""
                                        sh """python3 ./bin/tuningRunner.py --operation conv \
                                                --configs_file=../mlir/utils/jenkins/ci-configs/selected-conv-configs \
                                                --output=tuning_conv.tsv
                                              [ -f tuning_conv.tsv ]"""
                                    }
                                }
                            }
                        }
                    }
                    post {
                        unsuccessful {
                            rebootNode()
                        }
                        always {
                            cleanWs()
                        }
                    }
                }
                stage("Static Library") {
                    when {
                        beforeAgent true;
                        equals expected: true, actual: params.staticLib;
                    }
                    agent {
                        docker {
                            image dockerImage()
                            args dockerArgs()
                            label "rocm"
                            alwaysPull true
                        }
                    }
                    environment {
                        PATH="/opt/rocm/llvm/bin:$PATH"
                    }
                    stages {
                        stage("Environment") {
                            steps {
                                showEnv()
                            }
                        }
                        stage("Build static library package") {
                            steps {
                                checkout scm
                                buildProject('package', "-DBUILD_FAT_LIBROCKCOMPILER=ON")
                                echo "Running tests on the newly-built static library"
                                dir ('build') {
                                    sh 'ninja check-rocmlir'
                                }
                            }
                        }
                    }
                    post {
                        unsuccessful {
                            rebootNode()
                        }
                        always {
                            cleanWs()
                        }
                    }
                }
            }
        }
    }
}
