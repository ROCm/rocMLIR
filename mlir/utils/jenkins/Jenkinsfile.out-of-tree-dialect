pipeline {
    agent {
        docker {
            image 'rocm/mlir:rocm4.0-latest'
            args '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
            label 'rocm'
        }
    }
    stages {
        stage('Environment') {
            steps {
                sh 'cat /etc/os-release'
                sh '/opt/rocm/bin/rocm-smi'
            }
        }
        stage('Build and Test') {
            steps {
                checkout scm
                sh '''
                    mkdir -p build && cd build

                    cmake -G Ninja ../llvm \
                        -DLLVM_ENABLE_PROJECTS="mlir;lld" \
                        -DLLVM_BUILD_EXAMPLES=ON \
                        -DLLVM_TARGETS_TO_BUILD="X86;NVPTX;AMDGPU" \
                        -DCMAKE_BUILD_TYPE=Release \
                        -DLLVM_ENABLE_ASSERTIONS=ON \
                        -DBUILD_SHARED_LIBS=ON \
                        -DLLVM_BUILD_LLVM_DYLIB=ON \
                        -DMLIR_ROCM_RUNNER_ENABLED=1 \
                        -DMLIR_MIOPEN_DRIVER_ENABLED=1 \
                        -DMLIR_ENABLE_SQLITE=1

                    # Build LLVM / MLIR and run tests
                    cmake --build . --target check-mlir-miopen
                '''
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
