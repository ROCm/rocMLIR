pipeline {
    agent none
    stages {
        stage("Carry out test") {
            // Note: the builds are reused between cases on each node
            // It may be possible to move build steps out to execute once
            // but this could cause issues with target-specific code
            // when we run the non-xdlops tests on a gfx900
            matrix {
                agent {
                    docker {
                        image 'rocm/mlir:miopen_test'
                        args '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
                        label "${XDLOPS == '1' ? 'gfx908' : 'gfx908'}"
                        // The above could have gfx900 || gfx908 in the latter half
                    }
                }
                axes {
                    axis {
                        name 'DTYPE'
                        values 'fp16', 'fp32'
                    }
                    axis {
                        name 'XDLOPS'
                        values '1', '0'
                    }
                    axis {
                        name 'LAYOUT'
                        values 'NCHW', 'NHWC'
                    }
                    axis {
                        name 'DIRECTION'
                        values '1', '4'
                    }
                }
                stages {
                    stage('Install parallel (temp until dockerfile updated)') {
                        steps {
                            sh 'apt-get update && apt-get install -y --no-install-recommends parallel'
                        }
                    }
                    stage('Environment') {
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, $XDLOPS, dir: $DIRECTION)"
                            sh 'cat /etc/os-release'
                            sh '/opt/rocm/bin/rocm-smi'
                        }
                    }
                    stage('Build libMLIRMIOpen') {
                        steps {
                            checkout scm
                            cmakeBuild generator: 'Unix Makefiles',\
                               buildDir: 'build',\
                               sourceDir: 'llvm',\
                               installation: 'InDocker',\
                               buildType: 'Release',\
                               cmakeArgs: '''-DLLVM_ENABLE_PROJECTS="mlir;lld"
                    -DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                    -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                    -DBUILD_SHARED_LIBS=OFF
                    -DLLVM_BUILD_LLVM_DYLIB=OFF
                    -DLLVM_ENABLE_TERMINFO=OFF
                    '''
                            sh 'cd build; make -j $(nproc) libMLIRMIOpen'
                        }
                    }
                    stage('Build MIOpenDriver') {
                        steps {
                            dir('MIOpen') {
                                git branch: 'igemm-bin-xdlops', poll: false, url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
                                cmakeBuild buildDir: 'build',\
                                   buildType: 'Release',\
                                   installation: 'InDocker',\
                                   cmakeArgs: '''-DMIOPEN_USE_MLIR=On
-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
-DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
-DBUILD_DEV=On
-DMIOPEN_TEST_FLAGS=\'--verbose --disable-verification-cache\'
'''
                                sh 'cd build; make -j $(nproc) MIOpenDriver'
                            }
                        }
                    }
                    stage("Test MIOpen config") {
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, $XDLOPS, dir: $DIRECTION)"
                            dir('MIOpen/build/') {
                                sh """
bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh \
--layout $LAYOUT \
--direction $DIRECTION \
--dtype $DTYPE \
${XDLOPS == '1' ? '--xdlops' : '--no-xdlops'} <${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
