pipeline {
    agent {
        docker {
            image 'rocm/mlir:4.1-latest'
            args '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
            label "rocm"
        }
    }
    stages {
        stage('Build libMLIRMIOpen') {
            steps {
                checkout scm
                cmakeBuild generator: 'Ninja',\
                    buildDir: 'build',\
                    installation: 'InSearchPath',\
                    buildType: 'Release',\
                    steps: [[args: 'libMLIRMIOpen']],\
                    cmakeArgs: '-DBUILD_FAT_LIBMLIRMIOPEN=ON'
                cmake arguments: '--install . --component libMLIRMIOpen',\
                     installation: 'InSearchPath', workingDir: 'build'

            }
        }
        stage('Build MIOpenDriver') {
            steps {
                dir('MIOpen') {
                    git branch: 'develop', poll: false, url: 'https://github.com/ROCmSoftwarePlatform/MIOpen.git'
                    cmakeBuild buildDir: 'build',\
                        buildType: 'Release',\
                        installation: 'InSearchPath',\
                        steps: [[args: "MIOpenDriver"]],\
                        cmakeArgs: '''-DMIOPEN_USE_MLIR=On
                        -DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                        -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                        -DBUILD_DEV=On
                        -DMIOPEN_TEST_FLAGS=\'--verbose --disable-verification-cache\'
                        '''

                    stash name:"MIOpen-build",\
                        includes: "src/kernels/**,build/bin/MIOpenDriver,build/lib/*"
                }
            }
        }
        stage("Resnet50 configs nightly tests") {
            matrix {
                agent {
                    docker {
                        image 'rocm/mlir:latest'
                        args '--user "$(id -u):$(id -g)" --device=/dev/kfd --device=/dev/dri --group-add video -u 0'
                        label "${XDLOPS == '1' ? 'gfx908 && multi_gpu' : 'gfx908 && multi_gpu'}"
                    }
                }
                axes {
                    axis {
                        name 'DTYPE'
                        values 'fp16', 'fp32'
                    }
                    axis {
                        name 'XDLOPS'
                        values '1', '0'
                    }
                    axis {
                        name 'LAYOUT'
                        values 'NCHW', 'NHWC'
                    }
                    axis {
                        name 'DIRECTION'
                        values '1', '4'
                    }
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, xdlops=$XDLOPS, dir=$DIRECTION)"
                            sh 'cat /etc/os-release'
                            sh '/opt/rocm/bin/rocm-smi'
                        }
                    }
                    stage("Copy MIOpen binaries") {
                        steps {
                            dir("MIOpen") {
                                unstash name: "MIOpen-build"
                            }
                        }
                    }
                    stage("Test MIOpen config") {
                        steps {
                            echo "Config is ($DTYPE, $LAYOUT, xdlops=$XDLOPS, dir=$DIRECTION)"
                            dir('MIOpen/build/') {
                                sh """
bash ${WORKSPACE}/mlir/utils/jenkins/miopen-tests/miopen_validate.sh \
--layout $LAYOUT \
--direction $DIRECTION \
--dtype $DTYPE \
${XDLOPS == '1' ? '--xdlops' : '--no-xdlops'} <${WORKSPACE}/mlir/utils/jenkins/miopen-tests/resnet50-miopen-configs"""
                            }
                        }
                    }
                }
                post {
                    always {
                        cleanWs()
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
