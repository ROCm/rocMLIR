@LIT_SITE_CFG_IN_HEADER@

import sys
import subprocess

config.llvm_obj_root = "@LLVM_BINARY_DIR@"
config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
config.llvm_shlib_dir = "@SHLIBDIR@"
config.llvm_shlib_ext = "@SHLIBEXT@"
config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
config.python_executable = "@Python3_EXECUTABLE@"
config.mlir_src_root = "@MLIR_SOURCE_DIR@"
config.mlir_obj_root = "@MLIR_BINARY_DIR@"
config.mlir_runner_utils_dir = "@MLIR_RUNNER_UTILS_DIR@"
config.mlir_tools_dir = "@MLIR_TOOLS_DIR@"
config.mlir_rock_tools_dir = "@ROCMLIR_TOOLS_DIR@"
config.linalg_test_lib_dir = "@MLIR_DIALECT_LINALG_INTEGRATION_TEST_LIB_DIR@"
config.mlir_lib_dir = "@MLIR_LIB_DIR@"
config.conv_validation_wrapper_library_dir = "@MLIR_CONV_VALIDATION_WRAPPER_LIBRARY_DIR@"
config.allow_e2e_tests = @ROCK_E2E_TEST_ENABLED@ or @ROCMLIR_DRIVER_PR_E2E_TEST_ENABLED@
config.enable_bindings_python = @MLIR_BINDINGS_PYTHON_ENABLED@
config.random_data = "@MLIR_RANDOM_DATA@"
config.rocmlir_gen_flags = "@ROCMLIR_GEN_FLAGS@"
config.populate_validation = "@MLIR_POPULATE_VALIDATION@"
config.rocm_path = "@ROCM_PATH@"
config.rocmlir_common_python_tests_utils = "@ROCMLIR_COMMON_PYTHON_TESTS_UTILS@"

# Add common python test utils
sys.path.append(config.rocmlir_common_python_tests_utils)
from common import get_agents, get_arch_features

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))

# If rocm_agent_enumerator shows no viable GPUs, skip tests that need one,
# because the default target will lead to compilation failures.
config.no_AMD_GPU = False
config.arch = ""
config.features = None
config.arch_support_mfma = False
config.arch_support_wmma = False
if config.rocm_path:
    try:
        agents = get_agents(config.rocm_path)
        config.arch = ','.join(agents)
        for x in agents:
            config.features, config.arch_support_mfma, config.arch_support_wmma = get_arch_features(x)
            config.substitutions.append(('%features', config.features))

        # Check other features here
        if not config.arch:
            config.no_AMD_GPU = True
    except subprocess.CalledProcessError:
        config.no_AMD_GPU = True

import lit.llvm
lit.llvm.initialize(lit_config, config)

# Let the main config do the real work.
lit_config.load_config(config, "@MLIR_SOURCE_DIR@/test/e2e/lit.cfg.py")
