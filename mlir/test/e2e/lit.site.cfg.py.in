@LIT_SITE_CFG_IN_HEADER@

import sys
import subprocess

config.llvm_obj_root = "@LLVM_BINARY_DIR@"
config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
config.llvm_shlib_dir = "@SHLIBDIR@"
config.llvm_shlib_ext = "@SHLIBEXT@"
config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
config.python_executable = "@Python3_EXECUTABLE@"
config.mlir_src_root = "@MLIR_SOURCE_DIR@"
config.mlir_obj_root = "@MLIR_BINARY_DIR@"
config.mlir_runner_utils_dir = "@MLIR_RUNNER_UTILS_DIR@"
config.mlir_tools_dir = "@MLIR_TOOLS_DIR@"
config.mlir_rock_tools_dir = "@ROCMLIR_TOOLS_DIR@"
config.linalg_test_lib_dir = "@MLIR_DIALECT_LINALG_INTEGRATION_TEST_LIB_DIR@"
config.mlir_lib_dir = "@MLIR_LIB_DIR@"
config.conv_validation_wrapper_library_dir = "@MLIR_CONV_VALIDATION_WRAPPER_LIBRARY_DIR@"
config.allow_e2e_tests = @ROCK_E2E_TEST_ENABLED@ or @ROCMLIR_DRIVER_PR_E2E_TEST_ENABLED@
config.enable_bindings_python = @MLIR_BINDINGS_PYTHON_ENABLED@
config.random_data = "@MLIR_RANDOM_DATA@"
config.rocmlir_gen_flags = "@ROCMLIR_GEN_FLAGS@"
config.populate_validation = "@MLIR_POPULATE_VALIDATION@"
config.rocm_path = "@ROCM_PATH@"

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))

# Helper function to decode arch to its features
# Keep this in sync with mlir/lib/Dialect/Rock/Generator/AmdArchDb.cpp:mlir::rock::lookupArchInfo
def set_arch_features(arch: str):
    chip_name = arch.split(':')[0]
    if(len(chip_name) < 5):
        return

    arch_features = None
    major = chip_name[:-2]
    minor = chip_name[-2:]
    if major == 'gfx9':
        if minor in ['08', '0a', '40', '41', '42']:
            arch_features = 'mfma|dot|atomic_add'
        elif minor == '06':
            arch_features = 'dot'
        else:
            arch_features = 'none'
    elif major == 'gfx10':
        if minor in ['11', '13']:
            arch_features = 'atomic_fmax_f32'
        elif minor in ['10', '12'] or minor[0] == '3':
            arch_features = 'dot|atomic_fmax_f32'
        else:
            arch_features = 'atomic_fmax_f32'
    elif major == 'gfx11':
        arch_features = 'dot|atomic_add|atomic_fmax_f32|wmma'
    if arch_features and 'mfma' in arch_features and not '-mfma=off' in config.rocmlir_gen_flags:
        config.arch_support_mfma = True
    elif arch_features and 'wmma' in arch_features:
        config.arch_support_wmma = True
    config.features = arch_features
    config.substitutions.append(('%features', config.features))

# If rocm_agent_enumerator shows no viable GPUs, skip tests that need one,
# because the default target will lead to compilation failures.
config.no_AMD_GPU = False
config.arch = ""
config.arch_support_mfma = False
config.arch_support_wmma = False
config.features = None
if config.rocm_path:
    try:
        p = subprocess.run([config.rocm_path + "/bin/rocm_agent_enumerator", "-name"],
                           check=True, stdout=subprocess.PIPE)
        agents = set(x.decode("utf-8") for x in p.stdout.split())
        if not agents:
            # TODO: Remove this workaround for a bug in rocm_agent_enumerator -name
            # Once https://github.com/RadeonOpenCompute/rocminfo/pull/59 lands
            q = subprocess.run([config.rocm_path + "/bin/rocm_agent_enumerator"],
                                check=True, stdout=subprocess.PIPE)
            agents = set(x.decode("utf-8") for x in q.stdout.split() if x != b"gfx000")
        config.arch = ','.join(agents)
        for x in agents:
            if not config.features:
                set_arch_features(x)
        if not config.arch:
            config.no_AMD_GPU = True
    except subprocess.CalledProcessError:
        config.no_AMD_GPU = True

import lit.llvm
lit.llvm.initialize(lit_config, config)

# Let the main config do the real work.
lit_config.load_config(config, "@MLIR_SOURCE_DIR@/test/e2e/lit.cfg.py")
