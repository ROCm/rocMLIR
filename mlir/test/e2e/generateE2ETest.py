#!/usr/bin/env python3
"""
This script reads in a configuration file and generates MLIR E2E tests.

The configuration files are in TOML format.  Below is an example:

    directory= "mlir/test/rocmlir-driver/auto_e2e/"
    prefix = "rocmlir-gen"
    suffix = "--arch %arch %pv %random_data %rocmlir_gen_flags | rocmlir-driver -c | mlir-cpu-runner -O2 --shared-libs=%conv_validation_wrapper_library_dir/libconv-validation-wrappers%shlibext,%linalg_test_lib_dir/libmlir_runner_utils%shlibext --entry-point-result=void | FileCheck %s --check-prefix="

    [[axis]]
    name = "operation"
    values = ["conv2d", "conv2d_bwd_weight", "conv2d_bwd_data"]
    # Note the space, unlike with other prefixes, it is required here to also hande
    # the opt=value case
    prefix = "--operation "

    ## Resnet50
    [[suite]]
    name = "Resnet50"

    [[suite.test]]
    config = "-batchsize=256 -in_channels=1024 -in_h=14 -in_w=14 -out_channels=2048 -fil_h=1 -fil_w=1 --dilation_h=1 --dilation_w=1 --conv_stride_h=2 --conv_stride_w=2 --padding_h=0 --padding_w=0"

    [[suite.test]]
    config = "--more-options"
    [[suite.test.exclude]]
    name = "operation"
    values = ["conv2d_bwd_data"]

"""
import tomli
import itertools
import os
import sys
import getopt
import glob

def generate_option_list(prefixes: dict, table: list, key1: str, key2: str):
    options_list=[]
    for item in table[key1]:
        options=[]
        for value in item[key2]:
            if item["name"] in prefixes:
                opt = prefixes[item["name"]] + value
            else:
                opt = value
            options.append(opt)
        options_list.append(options)

    combinations=[]
    for opt in itertools.product(*options_list):
        combinations.append(opt);

    return combinations

def usage():
    print (f"usage: python3 {sys.argv[0]} [-h | -d <directory> | -i <configfile> | -s]")

# Main function

if __name__ == '__main__':
    output_path = './'
    config_file = 'config.toml'
    single_mode = False

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hd:i:s")
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if  opt == '-h':
            usage()
            sys.exit()
        elif opt == '-d':
            output_path = arg
        elif opt == '-i':
            config_file = arg
        elif opt == '-s':
            single_mode = True
        else:
            print("unhandled option")
            usage()
            sys.exit(2)

    # Load the configuration file
    with open(config_file, 'rb') as f:
        try:
            toml_dict = tomli.load(f)
        except tomli.TOMLDecodeError:
            print("Invalid toml")
            sys.exit(1)

    # Create a directory for test cases
    directory = toml_dict["directory"]
    output_path = output_path + '/' + directory
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    prefix = toml_dict["prefix"]
    suffix = toml_dict["suffix"]

    axis_prefixes={}
    for axis in toml_dict["axis"]:
        if "prefix" in axis:
           axis_prefixes[axis["name"]] = axis["prefix"]

    combinations = generate_option_list(axis_prefixes, toml_dict, "axis", "values")

    for suite in toml_dict["suite"]:
        suite_name = suite["name"]
        test_idx = 0
        for test in suite["test"]:
            test_idx = test_idx + 1
            opt_idx = 0
            exclusions = []
            if "exclude" in test:
                exclusions = generate_option_list(axis_prefixes, test, "exclude", "values")
            for opt in combinations:
                # Only generate i8 data type for fwd convolutions
                if len(opt) >= 3 and "i8" in opt[2] and ("conv2d_bwd_data" in opt[0] or "conv2d_bwd_weight" in opt[0]):
                    continue
                opt_idx = opt_idx + 1
                config = prefix + ' ' +test["config"]
                skip = False;
                for exclude in exclusions:
                    if (all (x in opt for x in exclude)):
                        skip = True;
                        break;
                if not skip:
                    leading = "// RUN: "
                else:
                    leading = "// FIXME: "
                config = leading + config + ' ' + ' '.join(opt)
                output = output_path+'/'+suite_name+'_'+str(test_idx)+'_'+str(opt_idx)+'.mlir'
                with open(output, 'w') as f:
                    if single_mode:
                        f.write("//This file is automatically generated. Do not edit!\n\n")
                    f.write(f"{config}  {suffix}CHECK_{suite_name}_{test_idx}_{opt_idx}")
                    f.write("\n//ALLOW_RETRIES: 2")
                    f.write(f"""
// CHECK_{suite_name}_{test_idx}_{opt_idx}: [1 1 1]

""")
            # After generating each individial tests, merge them if single_mode is NOT selected
            if not single_mode:
                test_files = glob.glob(output_path+'/'+suite_name+'_'+str(test_idx)+'_*'+'.mlir')
                merged_file = output_path+'/'+suite_name+'_'+str(test_idx)+'.mlir'
                with open(merged_file, "wb") as outfile:
                    outfile.write("//This file is automatically generated. Do not edit!\n\n".encode('utf-8'))
                    for t in test_files:
                        with open(t, "rb") as infile:
                            outfile.write(infile.read())
                        os.remove(t)
    print("DONE!")
