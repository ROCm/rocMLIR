// RUN: rocmlir-driver -host-pipeline highlevel %s | rocmlir-gen -ph -print-results -rand 1 -rand_type {randtype} - | rocmlir-driver -arch %arch -c  | mlir-cpu-runner -O2 --shared-libs=%linalg_test_lib_dir/libmlir_rocm_runtime%shlibext,%conv_validation_wrapper_library_dir/libconv-validation-wrappers%shlibext,%linalg_test_lib_dir/libmlir_runner_utils%shlibext --entry-point-result=void | FileCheck %s
// RUN{disablep}: rocmlir-driver -host-pipeline partition,highlevel -targets %arch %s | rocmlir-gen -ph -print-results -rand fixed -rand_type {randtype} -fut test_fusion --verifier clone - | rocmlir-driver -host-pipeline mhal,runner -kernel-pipeline full -targets %arch | mlir-cpu-runner -O2 --shared-libs=%linalg_test_lib_dir/libmlir_rocm_runtime%shlibext,%conv_validation_wrapper_library_dir/libconv-validation-wrappers%shlibext,%linalg_test_lib_dir/libmlir_runner_utils%shlibext --entry-point-result=void | FileCheck %s --check-prefix=CLONE
// ALLOW_RETRIES: 2

module {{
// CHECK: Unranked Memref base
// CLONE: [1 1 1]
// CLONE-NEXT: Unranked Memref base
  func.func @test_fusion(%arg0: tensor<128x32x32x8x{type}>, %arg1: tensor<128x3x3x8x{type}>) -> tensor<128x30x30x128x{type}> attributes {{kernel, arch = ""}} {{

    %zero = arith.constant dense<0.0> : tensor<128x{type}>
    %0 = "tosa.conv2d"(%arg0, %arg1, %zero) {{
      dilation = array<i64: 1, 1>,
      pad = array<i64: 0, 0, 0, 0>,
      stride = array<i64: 1, 1>
    }}
     : (tensor<128x32x32x8x{type}>, tensor<128x3x3x8x{type}>, tensor<128x{type}>) -> tensor<128x30x30x128x{type}>

    %1 = {op}
     : (tensor<128x30x30x128x{type}>) -> tensor<128x30x30x128x{type}>

    return %1 : tensor<128x30x30x128x{type}>
  }}

}}
