// RUN: mlir-opt  %s  |FileCheck %s --check-prefix=CHECK
// RUN: mlir-opt  %s -miopen-affine-transform -miopen-affix-params -miopen-lowering-step2 -miopen-lowering-step3|FileCheck %s --check-prefix=CHECK_STEP3
module  {
func @miopen_test_limit(%arg0: memref<1x32x32x3x3xf32>, %arg1: memref<32x1x32x14x14xf32>, %arg2: memref<32x1x32x14x14xf32>) attributes {kernel = 0 : i32} {
    %0 = miopen.transform(%arg0) {bound_check = [1 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], layout = [{dimensions = [0 : i32], names = ["g"], source_dimensions = [0 : i32], source_names = ["g"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["k"], source_dimensions = [1 : i32], source_names = ["k"], transformation = "PassThrough"}, {dimensions = [2 : i32], names = ["c"], source_dimensions = [2 : i32], source_names = ["c"], transformation = "PassThrough"}, {dimensions = [3 : i32, 4 : i32], names = ["ydot", "ytilda"], parameters = [1 : i32, 1 : i32, 0 : i32], source_dimensions = [3 : i32], source_names = ["y"], transformation = "Embed"}, {dimensions = [5 : i32, 6 : i32], names = ["xdot", "xtilda"], parameters = [1 : i32, 1 : i32, 0 : i32], source_dimensions = [4 : i32], source_names = ["x"], transformation = "Embed"}], output_layout = ["g", "k", "c", "ydot", "ytilda", "xdot", "xtilda"], source_layout = ["g", "k", "c", "y", "x"]} : memref<1x32x32x3x3xf32> to memref<1x32x32x3x1x3x1xf32>
    %1 = miopen.transform(%0) {intermediate_layout = ["g", "k", "c", "ydot", "ytilda", "xdot", "xtilda"], layout = [{dimensions = [0 : i32], names = ["g"], source_dimensions = [0 : i32], source_names = ["g"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["k"], source_dimensions = [1 : i32], source_names = ["k"], transformation = "PassThrough"}, {dimensions = [2 : i32], names = ["c"], source_dimensions = [2 : i32], source_names = ["c"], transformation = "PassThrough"}, {begins = [0 : i32, 0 : i32], dimensions = [3 : i32, 5 : i32], ends = [3 : i32, 3 : i32], names = ["ydotslice", "xdotslice"], source_dimensions = [3 : i32, 5 : i32], source_names = ["ydot", "xdot"], transformation = "Slice"}, {begins = [0 : i32, 0 : i32], dimensions = [4 : i32, 6 : i32], ends = [1 : i32, 1 : i32], names = ["ytildaslice", "xtildaslice"], source_dimensions = [4 : i32, 6 : i32], source_names = ["ytilda", "xtilda"], transformation = "Slice"}], output_layout = ["g", "k", "c", "ydotslice", "ytildaslice", "xdotslice", "xtildaslice"]} : memref<1x32x32x3x1x3x1xf32> to memref<1x32x32x3x1x3x1xf32>
    %2 = miopen.transform(%1) {bound_check = [0 : i32, 0 : i32, 0 : i32, 0 : i32, 1 : i32], gridwise_gemm_argument_position = 0 : i32, intermediate_layout = ["g", "k", "c", "ydotslice", "ytildaslice", "xdotslice", "xtildaslice"], layout = [{dimensions = [0 : i32], names = ["gemmG"], source_dimensions = [0 : i32], source_names = ["g"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["gemmK"], source_dimensions = [1 : i32, 3 : i32, 5 : i32], source_names = ["k", "ydotslice", "xdotslice"], transformation = "Merge"}, {dimensions = [2 : i32], names = ["gemmM"], source_dimensions = [2 : i32, 4 : i32, 6 : i32], source_names = ["c", "ytildaslice", "xtildaslice"], transformation = "Merge"}], output_layout = ["gemmG", "gemmK", "gemmM"]} : memref<1x32x32x3x1x3x1xf32> to memref<1x288x32xf32>
    %3 = miopen.transform(%arg1) {layout = [{dimensions = [0 : i32], names = ["gi"], source_dimensions = [1 : i32], source_names = ["gi"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["ni"], source_dimensions = [0 : i32], source_names = ["ni"], transformation = "PassThrough"}, {dimensions = [2 : i32], names = ["ci"], source_dimensions = [2 : i32], source_names = ["ci"], transformation = "PassThrough"}, {dimensions = [3 : i32, 4 : i32], names = ["hipad", "wipad"], parameters = [1 : i32, 1 : i32, 1 : i32, 1 : i32], source_dimensions = [3 : i32, 4 : i32], source_names = ["hi", "wi"], transformation = "Pad"}], output_layout = ["gi", "ni", "ci", "hipad", "wipad"], source_layout = ["ni", "gi", "ci", "hi", "wi"]} : memref<32x1x32x14x14xf32> to memref<1x32x32x16x16xf32>
    %4 = miopen.transform(%3) {intermediate_layout = ["gi", "ni", "ci", "hipad", "wipad"], layout = [{dimensions = [0 : i32], names = ["gi"], source_dimensions = [0 : i32], source_names = ["gi"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["ni"], source_dimensions = [1 : i32], source_names = ["ni"], transformation = "PassThrough"}, {dimensions = [2 : i32], names = ["ci"], source_dimensions = [2 : i32], source_names = ["ci"], transformation = "PassThrough"}, {dimensions = [3 : i32, 4 : i32], names = ["ytilda", "htilda"], parameters = [1 : i32, 1 : i32, 0 : i32], source_dimensions = [3 : i32], source_names = ["hipad"], transformation = "Embed"}, {dimensions = [5 : i32, 6 : i32], names = ["xtilda", "wtilda"], parameters = [1 : i32, 1 : i32, 0 : i32], source_dimensions = [4 : i32], source_names = ["wipad"], transformation = "Embed"}], output_layout = ["gi", "ni", "ci", "ytilda", "htilda", "xtilda", "wtilda"]} : memref<1x32x32x16x16xf32> to memref<1x32x32x1x16x1x16xf32>
    %5 = miopen.transform(%4) {intermediate_layout = ["gi", "ni", "ci", "ytilda", "htilda", "xtilda", "wtilda"], layout = [{dimensions = [0 : i32], names = ["gi"], source_dimensions = [0 : i32], source_names = ["gi"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["ni"], source_dimensions = [1 : i32], source_names = ["ni"], transformation = "PassThrough"}, {dimensions = [2 : i32], names = ["ci"], source_dimensions = [2 : i32], source_names = ["ci"], transformation = "PassThrough"}, {begins = [0 : i32, 0 : i32], dimensions = [3 : i32, 5 : i32], ends = [1 : i32, 1 : i32], names = ["ytildaslice", "xtildaslice"], source_dimensions = [3 : i32, 5 : i32], source_names = ["ytilda", "xtilda"], transformation = "Slice"}, {begins = [1 : i32, 1 : i32], dimensions = [4 : i32, 6 : i32], ends = [15 : i32, 15 : i32], names = ["htildaslice", "wtildaslice"], source_dimensions = [4 : i32, 6 : i32], source_names = ["htilda", "wtilda"], transformation = "Slice"}], output_layout = ["gi", "ni", "ci", "ytildaslice", "htildaslice", "xtildaslice", "wtildaslice"]} : memref<1x32x32x1x16x1x16xf32> to memref<1x32x32x1x14x1x14xf32>
    %6 = miopen.transform(%5) {bound_check = [0 : i32, 0 : i32, 0 : i32, 1 : i32, 0 : i32],gridwise_gemm_argument_position = 2 : i32, intermediate_layout = ["gi", "ni", "ci", "ytildaslice", "htildaslice", "xtildaslice", "wtildaslice"], layout = [{dimensions = [0 : i32], names = ["gemmG"], source_dimensions = [0 : i32], source_names = ["gi"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["gemmM"], source_dimensions = [2 : i32, 3 : i32, 5 : i32], source_names = ["ci", "ytildaslice", "xtildaslice"], transformation = "Merge"}, {dimensions = [2 : i32], names = ["gemmN"], source_dimensions = [1 : i32, 4 : i32, 6 : i32], source_names = ["ni", "htildaslice", "wtildaslice"], transformation = "Merge"}], output_layout = ["gemmG", "gemmM", "gemmN"]} : memref<1x32x32x1x14x1x14xf32> to memref<1x32x6272xf32>
    %7 = miopen.transform(%arg2) {layout = [{dimensions = [0 : i32], names = ["go"], source_dimensions = [1 : i32], source_names = ["go"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["no"], source_dimensions = [0 : i32], source_names = ["no"], transformation = "PassThrough"}, {dimensions = [2 : i32], names = ["ko"], source_dimensions = [2 : i32], source_names = ["ko"], transformation = "PassThrough"}, {dimensions = [3 : i32, 4 : i32], names = ["ydot", "htilda"], parameters = [-1 : i32, 1 : i32, 0 : i32], source_dimensions = [3 : i32], source_names = ["ho"], transformation = "Embed"}, {dimensions = [5 : i32, 6 : i32], names = ["xdot", "wtilda"], parameters = [-1 : i32, 1 : i32, 0 : i32], source_dimensions = [4 : i32], source_names = ["wo"], transformation = "Embed"}], output_layout = ["go", "no", "ko", "ydot", "htilda", "xdot", "wtilda"], source_layout = ["no", "go", "ko", "ho", "wo"]} : memref<32x1x32x14x14xf32> to memref<1x32x32x3x16x3x16xf32>
    %8 = miopen.transform(%7) {intermediate_layout = ["go", "no", "ko", "ydot", "htilda", "xdot", "wtilda"], layout = [{dimensions = [0 : i32], names = ["go"], source_dimensions = [0 : i32], source_names = ["go"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["no"], source_dimensions = [1 : i32], source_names = ["no"], transformation = "PassThrough"}, {dimensions = [2 : i32], names = ["ko"], source_dimensions = [2 : i32], source_names = ["ko"], transformation = "PassThrough"}, {begins = [0 : i32, 0 : i32], dimensions = [3 : i32, 5 : i32], ends = [3 : i32, 3 : i32], names = ["ydotslice", "xdotslice"], source_dimensions = [3 : i32, 5 : i32], source_names = ["ydot", "xdot"], transformation = "Slice"}, {begins = [1 : i32, 1 : i32], dimensions = [4 : i32, 6 : i32], ends = [15 : i32, 15 : i32], names = ["htildaslice", "wtildaslice"], source_dimensions = [4 : i32, 6 : i32], source_names = ["htilda", "wtilda"], transformation = "Slice"}], output_layout = ["go", "no", "ko", "ydotslice", "htildaslice", "xdotslice", "wtildaslice"]} : memref<1x32x32x3x16x3x16xf32> to memref<1x32x32x3x14x3x14xf32>
    %9 = miopen.transform(%8) {bound_check = [0 : i32, 0 : i32, 1 : i32, 0 : i32, 0 : i32], gridwise_gemm_argument_position = 1 : i32, intermediate_layout = ["go", "no", "ko", "ydotslice", "htildaslice", "xdotslice", "wtildaslice"], layout = [{dimensions = [0 : i32], names = ["gemmG"], source_dimensions = [0 : i32], source_names = ["go"], transformation = "PassThrough"}, {dimensions = [1 : i32], names = ["gemmK"], source_dimensions = [2 : i32, 3 : i32, 5 : i32], source_names = ["ko", "ydotslice", "xdotslice"], transformation = "Merge"}, {dimensions = [2 : i32], names = ["gemmN"], source_dimensions = [1 : i32, 4 : i32, 6 : i32], source_names = ["no", "htildaslice", "wtildaslice"], transformation = "Merge"}], output_layout = ["gemmG", "gemmK", "gemmN"]} : memref<1x32x32x3x14x3x14xf32> to memref<1x288x6272xf32>
    miopen.gridwise_gemm(%2, %9, %6) {arch = "gfx906", dilations = [1 : i32, 1 : i32], filter_dimension = [1, 32, 32, 3, 3], filter_layout = ["g", "k", "c", "y", "x"], input_dimension = [32, 1, 32, 14, 14], input_layout = ["ni", "gi", "ci", "hi", "wi"], kernel_algorithm = "backward_data_v4r1", num_cu = 64 : i32, output_dimension = [32, 1, 32, 14, 14], output_layout = ["no", "go", "ko", "ho", "wo"], padding = [[1 : i32, 1 : i32], [1 : i32, 1 : i32]], strides = [1 : i32, 1 : i32]} : memref<1x288x32xf32>, memref<1x288x6272xf32>, memref<1x32x6272xf32>
    return
  }
// CHECK: bound_check = [1 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]
// CHECK: bound_check = [0 : i32, 0 : i32, 0 : i32, 0 : i32, 1 : i32]
// CHECK: bound_check = [0 : i32, 0 : i32, 0 : i32, 1 : i32, 0 : i32]
// CHECK: bound_check = [0 : i32, 0 : i32, 1 : i32, 0 : i32, 0 : i32]
// CHECK_STEP3: {{.*bound_check = \[1 : i32, 0 : i32, 0 : i32, 0 : i32, 1 : i32\].*operand = 0.*}}
// CHECK_STEP3: {{.*bound_check = \[0 : i32, 0 : i32, 1 : i32, 0 : i32, 0 : i32\].*operand = 0.*}}
// CHECK_STEP3: {{.*bound_check = \[0 : i32, 0 : i32, 0 : i32, 1 : i32, 0 : i32\].*operand = 1.*}}
}
