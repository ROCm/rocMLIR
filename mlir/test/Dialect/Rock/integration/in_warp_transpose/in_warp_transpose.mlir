// ### DO NOT EDIT ###
// Generated by mlir/utils/generateInWarpTransposeTest.py

// RUN: rock-opt \
// RUN: --rock-sugar-to-loops --rock-loops-to-cf --convert-rock-to-gpu %s \
// RUN:  | mlir-rocm-runner \
// RUN: --shared-libs=%linalg_test_lib_dir/libmlir_rocm_runtime%shlibext,%conv_validation_wrapper_library_dir/libconv-validation-wrappers%shlibext,%linalg_test_lib_dir/libmlir_runner_utils%shlibext \
// RUN: --entry-point-result=i32 | FileCheck %s

// CHECK: {{^}}0{{$}}
    
module attributes {gpu.container_module} {
  memref.global "private" constant @__constant_1024xi32_2 : memref<1024xi32> = dense<"
  memref.global "private" constant @__constant_1024xi32_1 : memref<1024xi32> = dense<"
  memref.global "private" constant @__constant_1024xi32_0 : memref<1024xi32> = dense<"
  memref.global "private" constant @__constant_1024xi32 : memref<1024xi32> = dense<"
  func.func private @mgpuMemAllocInt32(memref<?xi32>) -> memref<?xi32>
  func.func private @mgpuMemDeallocInt32(memref<?xi32>)
  func.func private @mgpuMemSetInt32(memref<?xi32>, i32)
  func.func private @mgpuMemCopyInt32(memref<?xi32>, memref<?xi32>, i32)
  func.func private @printMemrefI32(memref<*xi32>)
  func.func @tr_4x4_kern(%arg0: memref<1024xi32>, %arg1: memref<1024xi32>) attributes {block_size = 64 : i32, grid_size = 64 : i32, kernel = 0 : i32} {
    %c960 = arith.constant 960 : index
    %c896 = arith.constant 896 : index
    %c832 = arith.constant 832 : index
    %c768 = arith.constant 768 : index
    %c704 = arith.constant 704 : index
    %c640 = arith.constant 640 : index
    %c576 = arith.constant 576 : index
    %c512 = arith.constant 512 : index
    %c448 = arith.constant 448 : index
    %c384 = arith.constant 384 : index
    %c320 = arith.constant 320 : index
    %c256 = arith.constant 256 : index
    %c192 = arith.constant 192 : index
    %c128 = arith.constant 128 : index
    %c15_i32 = arith.constant 15 : i32
    %c14_i32 = arith.constant 14 : i32
    %c13_i32 = arith.constant 13 : i32
    %c12_i32 = arith.constant 12 : i32
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c8_i32 = arith.constant 8 : i32
    %c7_i32 = arith.constant 7 : i32
    %c6_i32 = arith.constant 6 : i32
    %c5_i32 = arith.constant 5 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<-1> : vector<16xi32>
    %c0_i32 = arith.constant 0 : i32
    %c64 = arith.constant 64 : index
    %0 = gpu.thread_id  x
    %1 = arith.remui %0, %c64 : index
    %2 = memref.load %arg0[%1] : memref<1024xi32>
    %3 = vector.insertelement %2, %cst[%c0_i32 : i32] : vector<16xi32>
    %4 = arith.addi %1, %c64 : index
    %5 = memref.load %arg0[%4] : memref<1024xi32>
    %6 = vector.insertelement %5, %3[%c1_i32 : i32] : vector<16xi32>
    %7 = arith.addi %1, %c128 : index
    %8 = memref.load %arg0[%7] : memref<1024xi32>
    %9 = vector.insertelement %8, %6[%c2_i32 : i32] : vector<16xi32>
    %10 = arith.addi %1, %c192 : index
    %11 = memref.load %arg0[%10] : memref<1024xi32>
    %12 = vector.insertelement %11, %9[%c3_i32 : i32] : vector<16xi32>
    %13 = arith.addi %1, %c256 : index
    %14 = memref.load %arg0[%13] : memref<1024xi32>
    %15 = vector.insertelement %14, %12[%c4_i32 : i32] : vector<16xi32>
    %16 = arith.addi %1, %c320 : index
    %17 = memref.load %arg0[%16] : memref<1024xi32>
    %18 = vector.insertelement %17, %15[%c5_i32 : i32] : vector<16xi32>
    %19 = arith.addi %1, %c384 : index
    %20 = memref.load %arg0[%19] : memref<1024xi32>
    %21 = vector.insertelement %20, %18[%c6_i32 : i32] : vector<16xi32>
    %22 = arith.addi %1, %c448 : index
    %23 = memref.load %arg0[%22] : memref<1024xi32>
    %24 = vector.insertelement %23, %21[%c7_i32 : i32] : vector<16xi32>
    %25 = arith.addi %1, %c512 : index
    %26 = memref.load %arg0[%25] : memref<1024xi32>
    %27 = vector.insertelement %26, %24[%c8_i32 : i32] : vector<16xi32>
    %28 = arith.addi %1, %c576 : index
    %29 = memref.load %arg0[%28] : memref<1024xi32>
    %30 = vector.insertelement %29, %27[%c9_i32 : i32] : vector<16xi32>
    %31 = arith.addi %1, %c640 : index
    %32 = memref.load %arg0[%31] : memref<1024xi32>
    %33 = vector.insertelement %32, %30[%c10_i32 : i32] : vector<16xi32>
    %34 = arith.addi %1, %c704 : index
    %35 = memref.load %arg0[%34] : memref<1024xi32>
    %36 = vector.insertelement %35, %33[%c11_i32 : i32] : vector<16xi32>
    %37 = arith.addi %1, %c768 : index
    %38 = memref.load %arg0[%37] : memref<1024xi32>
    %39 = vector.insertelement %38, %36[%c12_i32 : i32] : vector<16xi32>
    %40 = arith.addi %1, %c832 : index
    %41 = memref.load %arg0[%40] : memref<1024xi32>
    %42 = vector.insertelement %41, %39[%c13_i32 : i32] : vector<16xi32>
    %43 = arith.addi %1, %c896 : index
    %44 = memref.load %arg0[%43] : memref<1024xi32>
    %45 = vector.insertelement %44, %42[%c14_i32 : i32] : vector<16xi32>
    %46 = arith.addi %1, %c960 : index
    %47 = memref.load %arg0[%46] : memref<1024xi32>
    %48 = vector.insertelement %47, %45[%c15_i32 : i32] : vector<16xi32>
    gpu.barrier
    %49 = rock.in_warp_transpose {inGroupPerm = [0 : i32, 1 : i32, 2 : i32, 3 : i32], size = 4 : i32} %48, %1 : vector<16xi32>, index
    gpu.barrier
    %50 = vector.extractelement %49[%c0_i32 : i32] : vector<16xi32>
    memref.store %50, %arg1[%1] : memref<1024xi32>
    %51 = arith.addi %1, %c64 : index
    %52 = vector.extractelement %49[%c1_i32 : i32] : vector<16xi32>
    memref.store %52, %arg1[%51] : memref<1024xi32>
    %53 = arith.addi %1, %c128 : index
    %54 = vector.extractelement %49[%c2_i32 : i32] : vector<16xi32>
    memref.store %54, %arg1[%53] : memref<1024xi32>
    %55 = arith.addi %1, %c192 : index
    %56 = vector.extractelement %49[%c3_i32 : i32] : vector<16xi32>
    memref.store %56, %arg1[%55] : memref<1024xi32>
    %57 = arith.addi %1, %c256 : index
    %58 = vector.extractelement %49[%c4_i32 : i32] : vector<16xi32>
    memref.store %58, %arg1[%57] : memref<1024xi32>
    %59 = arith.addi %1, %c320 : index
    %60 = vector.extractelement %49[%c5_i32 : i32] : vector<16xi32>
    memref.store %60, %arg1[%59] : memref<1024xi32>
    %61 = arith.addi %1, %c384 : index
    %62 = vector.extractelement %49[%c6_i32 : i32] : vector<16xi32>
    memref.store %62, %arg1[%61] : memref<1024xi32>
    %63 = arith.addi %1, %c448 : index
    %64 = vector.extractelement %49[%c7_i32 : i32] : vector<16xi32>
    memref.store %64, %arg1[%63] : memref<1024xi32>
    %65 = arith.addi %1, %c512 : index
    %66 = vector.extractelement %49[%c8_i32 : i32] : vector<16xi32>
    memref.store %66, %arg1[%65] : memref<1024xi32>
    %67 = arith.addi %1, %c576 : index
    %68 = vector.extractelement %49[%c9_i32 : i32] : vector<16xi32>
    memref.store %68, %arg1[%67] : memref<1024xi32>
    %69 = arith.addi %1, %c640 : index
    %70 = vector.extractelement %49[%c10_i32 : i32] : vector<16xi32>
    memref.store %70, %arg1[%69] : memref<1024xi32>
    %71 = arith.addi %1, %c704 : index
    %72 = vector.extractelement %49[%c11_i32 : i32] : vector<16xi32>
    memref.store %72, %arg1[%71] : memref<1024xi32>
    %73 = arith.addi %1, %c768 : index
    %74 = vector.extractelement %49[%c12_i32 : i32] : vector<16xi32>
    memref.store %74, %arg1[%73] : memref<1024xi32>
    %75 = arith.addi %1, %c832 : index
    %76 = vector.extractelement %49[%c13_i32 : i32] : vector<16xi32>
    memref.store %76, %arg1[%75] : memref<1024xi32>
    %77 = arith.addi %1, %c896 : index
    %78 = vector.extractelement %49[%c14_i32 : i32] : vector<16xi32>
    memref.store %78, %arg1[%77] : memref<1024xi32>
    %79 = arith.addi %1, %c960 : index
    %80 = vector.extractelement %49[%c15_i32 : i32] : vector<16xi32>
    memref.store %80, %arg1[%79] : memref<1024xi32>
    return
  }
  func.func @tr_2x2_kern(%arg0: memref<1024xi32>, %arg1: memref<1024xi32>) attributes {block_size = 64 : i32, grid_size = 64 : i32, kernel = 0 : i32} {
    %c960 = arith.constant 960 : index
    %c896 = arith.constant 896 : index
    %c832 = arith.constant 832 : index
    %c768 = arith.constant 768 : index
    %c704 = arith.constant 704 : index
    %c640 = arith.constant 640 : index
    %c576 = arith.constant 576 : index
    %c512 = arith.constant 512 : index
    %c448 = arith.constant 448 : index
    %c384 = arith.constant 384 : index
    %c320 = arith.constant 320 : index
    %c256 = arith.constant 256 : index
    %c192 = arith.constant 192 : index
    %c128 = arith.constant 128 : index
    %c15_i32 = arith.constant 15 : i32
    %c14_i32 = arith.constant 14 : i32
    %c13_i32 = arith.constant 13 : i32
    %c12_i32 = arith.constant 12 : i32
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c8_i32 = arith.constant 8 : i32
    %c7_i32 = arith.constant 7 : i32
    %c6_i32 = arith.constant 6 : i32
    %c5_i32 = arith.constant 5 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<-1> : vector<16xi32>
    %c0_i32 = arith.constant 0 : i32
    %c64 = arith.constant 64 : index
    %0 = gpu.thread_id  x
    %1 = arith.remui %0, %c64 : index
    %2 = memref.load %arg0[%1] : memref<1024xi32>
    %3 = vector.insertelement %2, %cst[%c0_i32 : i32] : vector<16xi32>
    %4 = arith.addi %1, %c64 : index
    %5 = memref.load %arg0[%4] : memref<1024xi32>
    %6 = vector.insertelement %5, %3[%c1_i32 : i32] : vector<16xi32>
    %7 = arith.addi %1, %c128 : index
    %8 = memref.load %arg0[%7] : memref<1024xi32>
    %9 = vector.insertelement %8, %6[%c2_i32 : i32] : vector<16xi32>
    %10 = arith.addi %1, %c192 : index
    %11 = memref.load %arg0[%10] : memref<1024xi32>
    %12 = vector.insertelement %11, %9[%c3_i32 : i32] : vector<16xi32>
    %13 = arith.addi %1, %c256 : index
    %14 = memref.load %arg0[%13] : memref<1024xi32>
    %15 = vector.insertelement %14, %12[%c4_i32 : i32] : vector<16xi32>
    %16 = arith.addi %1, %c320 : index
    %17 = memref.load %arg0[%16] : memref<1024xi32>
    %18 = vector.insertelement %17, %15[%c5_i32 : i32] : vector<16xi32>
    %19 = arith.addi %1, %c384 : index
    %20 = memref.load %arg0[%19] : memref<1024xi32>
    %21 = vector.insertelement %20, %18[%c6_i32 : i32] : vector<16xi32>
    %22 = arith.addi %1, %c448 : index
    %23 = memref.load %arg0[%22] : memref<1024xi32>
    %24 = vector.insertelement %23, %21[%c7_i32 : i32] : vector<16xi32>
    %25 = arith.addi %1, %c512 : index
    %26 = memref.load %arg0[%25] : memref<1024xi32>
    %27 = vector.insertelement %26, %24[%c8_i32 : i32] : vector<16xi32>
    %28 = arith.addi %1, %c576 : index
    %29 = memref.load %arg0[%28] : memref<1024xi32>
    %30 = vector.insertelement %29, %27[%c9_i32 : i32] : vector<16xi32>
    %31 = arith.addi %1, %c640 : index
    %32 = memref.load %arg0[%31] : memref<1024xi32>
    %33 = vector.insertelement %32, %30[%c10_i32 : i32] : vector<16xi32>
    %34 = arith.addi %1, %c704 : index
    %35 = memref.load %arg0[%34] : memref<1024xi32>
    %36 = vector.insertelement %35, %33[%c11_i32 : i32] : vector<16xi32>
    %37 = arith.addi %1, %c768 : index
    %38 = memref.load %arg0[%37] : memref<1024xi32>
    %39 = vector.insertelement %38, %36[%c12_i32 : i32] : vector<16xi32>
    %40 = arith.addi %1, %c832 : index
    %41 = memref.load %arg0[%40] : memref<1024xi32>
    %42 = vector.insertelement %41, %39[%c13_i32 : i32] : vector<16xi32>
    %43 = arith.addi %1, %c896 : index
    %44 = memref.load %arg0[%43] : memref<1024xi32>
    %45 = vector.insertelement %44, %42[%c14_i32 : i32] : vector<16xi32>
    %46 = arith.addi %1, %c960 : index
    %47 = memref.load %arg0[%46] : memref<1024xi32>
    %48 = vector.insertelement %47, %45[%c15_i32 : i32] : vector<16xi32>
    gpu.barrier
    %49 = rock.in_warp_transpose {inGroupPerm = [0 : i32, 1 : i32, 2 : i32, 3 : i32], size = 2 : i32} %48, %1 : vector<16xi32>, index
    gpu.barrier
    %50 = vector.extractelement %49[%c0_i32 : i32] : vector<16xi32>
    memref.store %50, %arg1[%1] : memref<1024xi32>
    %51 = arith.addi %1, %c64 : index
    %52 = vector.extractelement %49[%c1_i32 : i32] : vector<16xi32>
    memref.store %52, %arg1[%51] : memref<1024xi32>
    %53 = arith.addi %1, %c128 : index
    %54 = vector.extractelement %49[%c2_i32 : i32] : vector<16xi32>
    memref.store %54, %arg1[%53] : memref<1024xi32>
    %55 = arith.addi %1, %c192 : index
    %56 = vector.extractelement %49[%c3_i32 : i32] : vector<16xi32>
    memref.store %56, %arg1[%55] : memref<1024xi32>
    %57 = arith.addi %1, %c256 : index
    %58 = vector.extractelement %49[%c4_i32 : i32] : vector<16xi32>
    memref.store %58, %arg1[%57] : memref<1024xi32>
    %59 = arith.addi %1, %c320 : index
    %60 = vector.extractelement %49[%c5_i32 : i32] : vector<16xi32>
    memref.store %60, %arg1[%59] : memref<1024xi32>
    %61 = arith.addi %1, %c384 : index
    %62 = vector.extractelement %49[%c6_i32 : i32] : vector<16xi32>
    memref.store %62, %arg1[%61] : memref<1024xi32>
    %63 = arith.addi %1, %c448 : index
    %64 = vector.extractelement %49[%c7_i32 : i32] : vector<16xi32>
    memref.store %64, %arg1[%63] : memref<1024xi32>
    %65 = arith.addi %1, %c512 : index
    %66 = vector.extractelement %49[%c8_i32 : i32] : vector<16xi32>
    memref.store %66, %arg1[%65] : memref<1024xi32>
    %67 = arith.addi %1, %c576 : index
    %68 = vector.extractelement %49[%c9_i32 : i32] : vector<16xi32>
    memref.store %68, %arg1[%67] : memref<1024xi32>
    %69 = arith.addi %1, %c640 : index
    %70 = vector.extractelement %49[%c10_i32 : i32] : vector<16xi32>
    memref.store %70, %arg1[%69] : memref<1024xi32>
    %71 = arith.addi %1, %c704 : index
    %72 = vector.extractelement %49[%c11_i32 : i32] : vector<16xi32>
    memref.store %72, %arg1[%71] : memref<1024xi32>
    %73 = arith.addi %1, %c768 : index
    %74 = vector.extractelement %49[%c12_i32 : i32] : vector<16xi32>
    memref.store %74, %arg1[%73] : memref<1024xi32>
    %75 = arith.addi %1, %c832 : index
    %76 = vector.extractelement %49[%c13_i32 : i32] : vector<16xi32>
    memref.store %76, %arg1[%75] : memref<1024xi32>
    %77 = arith.addi %1, %c896 : index
    %78 = vector.extractelement %49[%c14_i32 : i32] : vector<16xi32>
    memref.store %78, %arg1[%77] : memref<1024xi32>
    %79 = arith.addi %1, %c960 : index
    %80 = vector.extractelement %49[%c15_i32 : i32] : vector<16xi32>
    memref.store %80, %arg1[%79] : memref<1024xi32>
    return
  }
  func.func @tr_2x2_0213_kern(%arg0: memref<1024xi32>, %arg1: memref<1024xi32>) attributes {block_size = 64 : i32, grid_size = 64 : i32, kernel = 0 : i32} {
    %c960 = arith.constant 960 : index
    %c896 = arith.constant 896 : index
    %c832 = arith.constant 832 : index
    %c768 = arith.constant 768 : index
    %c704 = arith.constant 704 : index
    %c640 = arith.constant 640 : index
    %c576 = arith.constant 576 : index
    %c512 = arith.constant 512 : index
    %c448 = arith.constant 448 : index
    %c384 = arith.constant 384 : index
    %c320 = arith.constant 320 : index
    %c256 = arith.constant 256 : index
    %c192 = arith.constant 192 : index
    %c128 = arith.constant 128 : index
    %c15_i32 = arith.constant 15 : i32
    %c14_i32 = arith.constant 14 : i32
    %c13_i32 = arith.constant 13 : i32
    %c12_i32 = arith.constant 12 : i32
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c8_i32 = arith.constant 8 : i32
    %c7_i32 = arith.constant 7 : i32
    %c6_i32 = arith.constant 6 : i32
    %c5_i32 = arith.constant 5 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<-1> : vector<16xi32>
    %c0_i32 = arith.constant 0 : i32
    %c64 = arith.constant 64 : index
    %0 = gpu.thread_id  x
    %1 = arith.remui %0, %c64 : index
    %2 = memref.load %arg0[%1] : memref<1024xi32>
    %3 = vector.insertelement %2, %cst[%c0_i32 : i32] : vector<16xi32>
    %4 = arith.addi %1, %c64 : index
    %5 = memref.load %arg0[%4] : memref<1024xi32>
    %6 = vector.insertelement %5, %3[%c1_i32 : i32] : vector<16xi32>
    %7 = arith.addi %1, %c128 : index
    %8 = memref.load %arg0[%7] : memref<1024xi32>
    %9 = vector.insertelement %8, %6[%c2_i32 : i32] : vector<16xi32>
    %10 = arith.addi %1, %c192 : index
    %11 = memref.load %arg0[%10] : memref<1024xi32>
    %12 = vector.insertelement %11, %9[%c3_i32 : i32] : vector<16xi32>
    %13 = arith.addi %1, %c256 : index
    %14 = memref.load %arg0[%13] : memref<1024xi32>
    %15 = vector.insertelement %14, %12[%c4_i32 : i32] : vector<16xi32>
    %16 = arith.addi %1, %c320 : index
    %17 = memref.load %arg0[%16] : memref<1024xi32>
    %18 = vector.insertelement %17, %15[%c5_i32 : i32] : vector<16xi32>
    %19 = arith.addi %1, %c384 : index
    %20 = memref.load %arg0[%19] : memref<1024xi32>
    %21 = vector.insertelement %20, %18[%c6_i32 : i32] : vector<16xi32>
    %22 = arith.addi %1, %c448 : index
    %23 = memref.load %arg0[%22] : memref<1024xi32>
    %24 = vector.insertelement %23, %21[%c7_i32 : i32] : vector<16xi32>
    %25 = arith.addi %1, %c512 : index
    %26 = memref.load %arg0[%25] : memref<1024xi32>
    %27 = vector.insertelement %26, %24[%c8_i32 : i32] : vector<16xi32>
    %28 = arith.addi %1, %c576 : index
    %29 = memref.load %arg0[%28] : memref<1024xi32>
    %30 = vector.insertelement %29, %27[%c9_i32 : i32] : vector<16xi32>
    %31 = arith.addi %1, %c640 : index
    %32 = memref.load %arg0[%31] : memref<1024xi32>
    %33 = vector.insertelement %32, %30[%c10_i32 : i32] : vector<16xi32>
    %34 = arith.addi %1, %c704 : index
    %35 = memref.load %arg0[%34] : memref<1024xi32>
    %36 = vector.insertelement %35, %33[%c11_i32 : i32] : vector<16xi32>
    %37 = arith.addi %1, %c768 : index
    %38 = memref.load %arg0[%37] : memref<1024xi32>
    %39 = vector.insertelement %38, %36[%c12_i32 : i32] : vector<16xi32>
    %40 = arith.addi %1, %c832 : index
    %41 = memref.load %arg0[%40] : memref<1024xi32>
    %42 = vector.insertelement %41, %39[%c13_i32 : i32] : vector<16xi32>
    %43 = arith.addi %1, %c896 : index
    %44 = memref.load %arg0[%43] : memref<1024xi32>
    %45 = vector.insertelement %44, %42[%c14_i32 : i32] : vector<16xi32>
    %46 = arith.addi %1, %c960 : index
    %47 = memref.load %arg0[%46] : memref<1024xi32>
    %48 = vector.insertelement %47, %45[%c15_i32 : i32] : vector<16xi32>
    gpu.barrier
    %49 = rock.in_warp_transpose {inGroupPerm = [0 : i32, 2 : i32, 1 : i32, 3 : i32], size = 2 : i32} %48, %1 : vector<16xi32>, index
    gpu.barrier
    %50 = vector.extractelement %49[%c0_i32 : i32] : vector<16xi32>
    memref.store %50, %arg1[%1] : memref<1024xi32>
    %51 = arith.addi %1, %c64 : index
    %52 = vector.extractelement %49[%c1_i32 : i32] : vector<16xi32>
    memref.store %52, %arg1[%51] : memref<1024xi32>
    %53 = arith.addi %1, %c128 : index
    %54 = vector.extractelement %49[%c2_i32 : i32] : vector<16xi32>
    memref.store %54, %arg1[%53] : memref<1024xi32>
    %55 = arith.addi %1, %c192 : index
    %56 = vector.extractelement %49[%c3_i32 : i32] : vector<16xi32>
    memref.store %56, %arg1[%55] : memref<1024xi32>
    %57 = arith.addi %1, %c256 : index
    %58 = vector.extractelement %49[%c4_i32 : i32] : vector<16xi32>
    memref.store %58, %arg1[%57] : memref<1024xi32>
    %59 = arith.addi %1, %c320 : index
    %60 = vector.extractelement %49[%c5_i32 : i32] : vector<16xi32>
    memref.store %60, %arg1[%59] : memref<1024xi32>
    %61 = arith.addi %1, %c384 : index
    %62 = vector.extractelement %49[%c6_i32 : i32] : vector<16xi32>
    memref.store %62, %arg1[%61] : memref<1024xi32>
    %63 = arith.addi %1, %c448 : index
    %64 = vector.extractelement %49[%c7_i32 : i32] : vector<16xi32>
    memref.store %64, %arg1[%63] : memref<1024xi32>
    %65 = arith.addi %1, %c512 : index
    %66 = vector.extractelement %49[%c8_i32 : i32] : vector<16xi32>
    memref.store %66, %arg1[%65] : memref<1024xi32>
    %67 = arith.addi %1, %c576 : index
    %68 = vector.extractelement %49[%c9_i32 : i32] : vector<16xi32>
    memref.store %68, %arg1[%67] : memref<1024xi32>
    %69 = arith.addi %1, %c640 : index
    %70 = vector.extractelement %49[%c10_i32 : i32] : vector<16xi32>
    memref.store %70, %arg1[%69] : memref<1024xi32>
    %71 = arith.addi %1, %c704 : index
    %72 = vector.extractelement %49[%c11_i32 : i32] : vector<16xi32>
    memref.store %72, %arg1[%71] : memref<1024xi32>
    %73 = arith.addi %1, %c768 : index
    %74 = vector.extractelement %49[%c12_i32 : i32] : vector<16xi32>
    memref.store %74, %arg1[%73] : memref<1024xi32>
    %75 = arith.addi %1, %c832 : index
    %76 = vector.extractelement %49[%c13_i32 : i32] : vector<16xi32>
    memref.store %76, %arg1[%75] : memref<1024xi32>
    %77 = arith.addi %1, %c896 : index
    %78 = vector.extractelement %49[%c14_i32 : i32] : vector<16xi32>
    memref.store %78, %arg1[%77] : memref<1024xi32>
    %79 = arith.addi %1, %c960 : index
    %80 = vector.extractelement %49[%c15_i32 : i32] : vector<16xi32>
    memref.store %80, %arg1[%79] : memref<1024xi32>
    return
  }
  func.func @host_tr_4x4() -> i1 {
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c-559038737_i32 = arith.constant -559038737 : i32
    %c0 = arith.constant 0 : index
    %c1024 = arith.constant 1024 : index
    %c1 = arith.constant 1 : index
    %true = arith.constant true
    %0 = memref.get_global @__constant_1024xi32_0 : memref<1024xi32>
    %1 = memref.get_global @__constant_1024xi32 : memref<1024xi32>
    %2 = memref.alloc() : memref<1024xi32>
    %3 = memref.alloc() : memref<1024xi32>
    memref.copy %1, %2 : memref<1024xi32> to memref<1024xi32>
    %4 = memref.cast %2 : memref<1024xi32> to memref<?xi32>
    %5 = call @mgpuMemAllocInt32(%4) : (memref<?xi32>) -> memref<?xi32>
    call @mgpuMemCopyInt32(%4, %5, %c1_i32) : (memref<?xi32>, memref<?xi32>, i32) -> ()
    %6 = memref.cast %5 : memref<?xi32> to memref<1024xi32>
    %7 = memref.cast %3 : memref<1024xi32> to memref<?xi32>
    %8 = call @mgpuMemAllocInt32(%7) : (memref<?xi32>) -> memref<?xi32>
    call @mgpuMemSetInt32(%8, %c-559038737_i32) : (memref<?xi32>, i32) -> ()
    %9 = memref.cast %8 : memref<?xi32> to memref<1024xi32>
    call @tr_4x4_kern(%6, %9) : (memref<1024xi32>, memref<1024xi32>) -> ()
    call @mgpuMemCopyInt32(%8, %7, %c2_i32) : (memref<?xi32>, memref<?xi32>, i32) -> ()
    %10 = scf.for %arg0 = %c0 to %c1024 step %c1 iter_args(%arg1 = %true) -> (i1) {
      %11 = memref.load %0[%arg0] : memref<1024xi32>
      %12 = memref.load %3[%arg0] : memref<1024xi32>
      %13 = arith.cmpi eq, %11, %12 : i32
      %14 = arith.andi %arg1, %13 : i1
      scf.yield %14 : i1
    }
    scf.if %10 {
    } else {
      %11 = memref.cast %3 : memref<1024xi32> to memref<*xi32>
      func.call @printMemrefI32(%11) : (memref<*xi32>) -> ()
    }
    call @mgpuMemDeallocInt32(%5) : (memref<?xi32>) -> ()
    call @mgpuMemDeallocInt32(%8) : (memref<?xi32>) -> ()
    return %10 : i1
  }
  func.func @host_tr_2x2() -> i1 {
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c-559038737_i32 = arith.constant -559038737 : i32
    %c0 = arith.constant 0 : index
    %c1024 = arith.constant 1024 : index
    %c1 = arith.constant 1 : index
    %true = arith.constant true
    %0 = memref.get_global @__constant_1024xi32_1 : memref<1024xi32>
    %1 = memref.get_global @__constant_1024xi32 : memref<1024xi32>
    %2 = memref.alloc() : memref<1024xi32>
    %3 = memref.alloc() : memref<1024xi32>
    memref.copy %1, %2 : memref<1024xi32> to memref<1024xi32>
    %4 = memref.cast %2 : memref<1024xi32> to memref<?xi32>
    %5 = call @mgpuMemAllocInt32(%4) : (memref<?xi32>) -> memref<?xi32>
    call @mgpuMemCopyInt32(%4, %5, %c1_i32) : (memref<?xi32>, memref<?xi32>, i32) -> ()
    %6 = memref.cast %5 : memref<?xi32> to memref<1024xi32>
    %7 = memref.cast %3 : memref<1024xi32> to memref<?xi32>
    %8 = call @mgpuMemAllocInt32(%7) : (memref<?xi32>) -> memref<?xi32>
    call @mgpuMemSetInt32(%8, %c-559038737_i32) : (memref<?xi32>, i32) -> ()
    %9 = memref.cast %8 : memref<?xi32> to memref<1024xi32>
    call @tr_2x2_kern(%6, %9) : (memref<1024xi32>, memref<1024xi32>) -> ()
    call @mgpuMemCopyInt32(%8, %7, %c2_i32) : (memref<?xi32>, memref<?xi32>, i32) -> ()
    %10 = scf.for %arg0 = %c0 to %c1024 step %c1 iter_args(%arg1 = %true) -> (i1) {
      %11 = memref.load %0[%arg0] : memref<1024xi32>
      %12 = memref.load %3[%arg0] : memref<1024xi32>
      %13 = arith.cmpi eq, %11, %12 : i32
      %14 = arith.andi %arg1, %13 : i1
      scf.yield %14 : i1
    }
    scf.if %10 {
    } else {
      %11 = memref.cast %3 : memref<1024xi32> to memref<*xi32>
      func.call @printMemrefI32(%11) : (memref<*xi32>) -> ()
    }
    call @mgpuMemDeallocInt32(%5) : (memref<?xi32>) -> ()
    call @mgpuMemDeallocInt32(%8) : (memref<?xi32>) -> ()
    return %10 : i1
  }
  func.func @host_tr_2x2_0213() -> i1 {
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c-559038737_i32 = arith.constant -559038737 : i32
    %c0 = arith.constant 0 : index
    %c1024 = arith.constant 1024 : index
    %c1 = arith.constant 1 : index
    %true = arith.constant true
    %0 = memref.get_global @__constant_1024xi32_2 : memref<1024xi32>
    %1 = memref.get_global @__constant_1024xi32 : memref<1024xi32>
    %2 = memref.alloc() : memref<1024xi32>
    %3 = memref.alloc() : memref<1024xi32>
    memref.copy %1, %2 : memref<1024xi32> to memref<1024xi32>
    %4 = memref.cast %2 : memref<1024xi32> to memref<?xi32>
    %5 = call @mgpuMemAllocInt32(%4) : (memref<?xi32>) -> memref<?xi32>
    call @mgpuMemCopyInt32(%4, %5, %c1_i32) : (memref<?xi32>, memref<?xi32>, i32) -> ()
    %6 = memref.cast %5 : memref<?xi32> to memref<1024xi32>
    %7 = memref.cast %3 : memref<1024xi32> to memref<?xi32>
    %8 = call @mgpuMemAllocInt32(%7) : (memref<?xi32>) -> memref<?xi32>
    call @mgpuMemSetInt32(%8, %c-559038737_i32) : (memref<?xi32>, i32) -> ()
    %9 = memref.cast %8 : memref<?xi32> to memref<1024xi32>
    call @tr_2x2_0213_kern(%6, %9) : (memref<1024xi32>, memref<1024xi32>) -> ()
    call @mgpuMemCopyInt32(%8, %7, %c2_i32) : (memref<?xi32>, memref<?xi32>, i32) -> ()
    %10 = scf.for %arg0 = %c0 to %c1024 step %c1 iter_args(%arg1 = %true) -> (i1) {
      %11 = memref.load %0[%arg0] : memref<1024xi32>
      %12 = memref.load %3[%arg0] : memref<1024xi32>
      %13 = arith.cmpi eq, %11, %12 : i32
      %14 = arith.andi %arg1, %13 : i1
      scf.yield %14 : i1
    }
    scf.if %10 {
    } else {
      %11 = memref.cast %3 : memref<1024xi32> to memref<*xi32>
      func.call @printMemrefI32(%11) : (memref<*xi32>) -> ()
    }
    call @mgpuMemDeallocInt32(%5) : (memref<?xi32>) -> ()
    call @mgpuMemDeallocInt32(%8) : (memref<?xi32>) -> ()
    return %10 : i1
  }
  func.func @main() -> i32 {
    %true = arith.constant true
    %0 = call @host_tr_4x4() : () -> i1
    %1 = call @host_tr_2x2() : () -> i1
    %2 = call @host_tr_2x2_0213() : () -> i1
    %3 = arith.andi %0, %1 : i1
    %4 = arith.andi %3, %2 : i1
    %5 = arith.xori %4, %true : i1
    %6 = arith.extui %5 : i1 to i32
    return %6 : i32
  }
}


