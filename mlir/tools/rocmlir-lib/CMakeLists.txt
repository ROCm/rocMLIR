get_property(rocmlir_dialect_libs GLOBAL PROPERTY ROCMLIR_DIALECT_LIBS)
get_property(rocmlir_capi_libs GLOBAL PROPERTY ROCMLIR_PUBLIC_C_API_LIBS)

set(LIBS
  ${rocmlir_dialect_libs}
  ${rocmlir_capi_libs}
)

set(CMAKE_BUILD_RPATH ${CMAKE_BUILD_DIR}/external/llvm-project/llvm/lib)

llvm_add_library(MLIRRockThin
PARTIAL_SOURCES_INTENDED

  rocmlir-lib.cpp

  LINK_LIBS
  ${LIBS}
  )

add_llvm_executable(rocmlir-lib-test
  PARTIAL_SOURCES_INTENDED

  rocmlir-lib-test.cpp

  DEPENDS
  MLIRRockThin
  ${LIBS}
)

llvm_update_compile_flags(rocmlir-lib-test)
target_link_libraries(rocmlir-lib-test PRIVATE MLIRRockThin ${LIBS})
mlir_check_link_libraries(rocmlir-lib-test)

llvm_canonicalize_cmake_booleans(BUILD_FAT_LIBROCKCOMPILER)
# Static library target, enabled only when building static libs
if(BUILD_FAT_LIBROCKCOMPILER)
  find_package(ROCM 0.8 REQUIRED PATHS /opt/rocm)
  include(ROCMInstallTargets)
  include(ROCMCreatePackage)

  set(ROCMCHECKS_WARN_TOOLCHAIN_VAR OFF)
  set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

  string(TOLOWER ${CMAKE_PROJECT_NAME} CMAKE_PROJECT_NAME_LOWER)
  set(PACKAGE_NAME ${CMAKE_PROJECT_NAME_LOWER})

  set(LIBRARY_NAME rockCompiler)
  function(combine_archives output_archive)
    set(mri_file ${CMAKE_CURRENT_BINARY_DIR}/${output_archive}.mri)
    set(full_output_path ${ROCMLIR_LIB_DIR}/lib${output_archive}.a)
    set(output_archive_dummy_file ./${output_archive}.dummy.cpp)

    # Step one: construct mri file.
    add_custom_command(OUTPUT ${output_archive_dummy_file}
                       COMMAND if [ -f ${output_archive}.mri ]\; then rm ${output_archive}.mri\; fi
                       COMMAND touch ${output_archive}.mri
                       COMMAND echo "create ${full_output_path}" >> ${output_archive}.mri
                       COMMAND for archive in ${ROCMLIR_LIB_DIR}/*.a ${LLVM_EXTERNAL_LIB_DIR}/*.a\;
                       do echo "addlib $$archive" >> ${output_archive}.mri \; done
                       COMMAND echo "save" >> ${output_archive}.mri
                       COMMAND echo "end" >> ${output_archive}.mri
                       COMMAND touch ${output_archive_dummy_file}
                       DEPENDS MLIRRockThin)

    # Step two: use mri file to generate the fat library.
    llvm_add_library(${output_archive}
      PARTIAL_SOURCES_INTENDED
      STATIC ${output_archive_dummy_file})
    add_custom_command(TARGET ${output_archive}
                       POST_BUILD
                       COMMAND ${CMAKE_AR} -M < ${mri_file}
                       DEPENDS ${output_archive_dummy_file})
  endfunction(combine_archives)

  combine_archives(${LIBRARY_NAME})

  add_custom_target(lib${LIBRARY_NAME} ALL
    DEPENDS
    ${LIBRARY_NAME}
  )

  # Install Miir.h to ${CMAKE_INSTALL_PREFIX}/include/${PACKAGE_NAME}/
  # as part of component libroCompiler
  rocm_install(FILES Miir.h
    DESTINATION include/${PACKAGE_NAME})

  # Install a target, i.e. ${package_name}::lib${lib_name}, as part of
  # devel component and export it to be searchable by find_package().
  # The include directories are propagated to the downstream targets
  # that links to ${package_name}::lib${lib_name}
  # Be default, include/${package_name} is added. If extra include directories
  # are needed, add them using the keyword EXTRA_INCLUDES.
  #
  # As an example, when CMAKE_INSTALL_PREFIX is set to /a/dummy/ and
  # CMAKE_BUILD_TYPE is set to CONFIG
  # The following files are generated and installed as a result of
  # cmake --install . --component ${component_name} --prefix /a/dummy
  # /a/dummy/lib/${package_name}/lib${lib_name}.a
  # /a/dummy/lib/cmake/${package_name}/${package_name}-targets.cmake
  #   This file is autogenerated by install(EXPORT).
  #   It creates the imported library as a target that can be used by
  #   target_link_libraries()
  #   It also sets the INTERFACE_INCLUDE_DIRECTORIES property of the target
  # /a/dummy/lib/cmake/${package_name}/${package_name}-targets-release.cmake
  #   This file is autogenerated by install(EXPORT).
  #   It sets the location of the library as a property of the imported target
  # /a/dummy/lib/cmake/${package_name}/${package_name}-config.cmake
  #   This file is generated by rocm_export_targets and is searched
  #   and loaded by find_package(). It includes ${package_name}-targets.cmake.
  # /a/dummy/lib/cmake/${package_name}/${package_name}-config-version.cmake
  #   This file is autogenerated by rocm_export_targets and is used by
  #   find_package to implement a package version matching mechanism.
  #
  # The only input to this exporting process is cmake/${package_name}Config.cmake.in,
  # which is used to auto generate ${package_name}Config.cmake
  function(export_target package_name lib_name)
    cmake_parse_arguments(ARG "" "" "EXTRA_INCLUDES" ${ARGN})
    set(export_set ${package_name}-targets)
    set(INCLUDE_DIR include/${package_name}/)
    set(LIB_CMAKE_DIR lib/cmake/${package_name}/)
    set(development "devel")

    # Install lib${lib_name}.a to ${CMAKE_INSTALL_PREFIX}/lib/${package_name}/
    # and group it into the ${export-set}
    # The INTERFACE_INCLUDE_DIRECTORIES will be set as the property of the exported library
    # so that when comsumer libraries (Rock) link in lib${LIBRARY_NAME}, ${INCLUDE_DIR} is
    # automatically propagated to the consumer library's include_dirs
    set(EXTRA_INCLUDES "")
    if(ARG_EXTRA_INCLUDES)
      set(EXTRA_INCLUDES ${ARG_EXTRA_INCLUDES})
    endif()
    # Call install() instead of rocm_install() here in order to install
    # header files  in a subdirecotry.
    install(TARGETS ${lib_name}
      EXPORT ${export_set}
      ARCHIVE DESTINATION lib
      COMPONENT ${development} 
      INCLUDES DESTINATION ${INCLUDE_DIR} ${EXTRA_INCLUDES}
    )

    # Generate package config and version file
    rocm_export_targets(
      NAMESPACE ${CMAKE_PROJECT_NAME}::
      NAME ${package_name}
      TARGETS ${package_name}
      COMPATIBILITY AnyNewerVersion
      )
  endfunction(export_target)

  set(extra_include_dir "")

  if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY)
    rocm_install(DIRECTORY
      ${PROJECT_SOURCE_DIR}/mlir/include/mlir
      ${PROJECT_SOURCE_DIR}/mlir/include/mlir-c
      DESTINATION include/${PACKAGE_NAME}
      FILES_MATCHING
      PATTERN "*.def"
      PATTERN "*.h"
      PATTERN "*.inc"
      PATTERN "*.td"
      PATTERN "LICENSE.TXT"
    )

    rocm_install(DIRECTORY ${MLIR_INCLUDE_DIRS}
      DESTINATION include/${PACKAGE_NAME}/external
      FILES_MATCHING
      PATTERN "*.def"
      PATTERN "*.h"
      PATTERN "*.gen"
      PATTERN "*.inc"
      PATTERN "*.td"
      PATTERN "CMakeFiles" EXCLUDE
      PATTERN "config.h" EXCLUDE
    )

    rocm_install(DIRECTORY ${PROJECT_BINARY_DIR}/mlir/include
      DESTINATION include/${PACKAGE_NAME}/build
      FILES_MATCHING
      PATTERN "*.def"
      PATTERN "*.h"
      PATTERN "*.gen"
      PATTERN "*.inc"
      PATTERN "*.td"
      PATTERN "CMakeFiles" EXCLUDE
      PATTERN "config.h" EXCLUDE
    )

    set(extra_include_dir include/${PACKAGE_NAME}/external/include)
  endif()

  # Install lib${LIBRARY_NAME}.a as part of component lib${LIBRARY_NAME}
  # and export it to be searchable by find_package()
  export_target(${PACKAGE_NAME} # package name
    ${LIBRARY_NAME}             # library name
    EXTRA_INCLUDES              # extra include directories
    ${extra_include_dir}
  )

  rocm_create_package(
    NAME ${CMAKE_PROJECT_NAME}
    DESCRIPTION "MLIR packages"
    MAINTAINER "rocMLIR Dev Team dl.dl-mlir@amd.com"
    HEADER_ONLY
  )
endif()
